{TOC:maxLevel=3}
h1. ESO UI Documentation for API Version 100020

h2. Global Variables

h5. AchievementPointValue
* ACHIEVEMENT_POINT_HIGH
* ACHIEVEMENT_POINT_LEGENDARY_DEED
* ACHIEVEMENT_POINT_LOW
* ACHIEVEMENT_POINT_MEDIUM
* ACHIEVEMENT_POINT_VERY_HIGH


h5. ActionBarSlotType
* ACTION_TYPE_ABILITY
* ACTION_TYPE_COLLECTIBLE
* ACTION_TYPE_EMOTE
* ACTION_TYPE_ITEM
* ACTION_TYPE_NOTHING
* ACTION_TYPE_QUICK_CHAT
* ACTION_TYPE_SIEGE_ACTION


h5. ActionSlotType
* ACTION_SLOT_TYPE_BLOCK
* ACTION_SLOT_TYPE_HEAVY_ATTACK
* ACTION_SLOT_TYPE_LIGHT_ATTACK
* ACTION_SLOT_TYPE_NORMAL_ABILITY
* ACTION_SLOT_TYPE_OTHER
* ACTION_SLOT_TYPE_ULTIMATE
* ACTION_SLOT_TYPE_WEAPON_ATTACK


h5. ActiveCombatTipConditionResult
* ACTIVE_COMBAT_TIP_RESULT_FAILURE
* ACTIVE_COMBAT_TIP_RESULT_NO_ACTION
* ACTIVE_COMBAT_TIP_RESULT_SUCCESS


h5. ActiveCombatTipSetting
* ACT_SETTING_ALWAYS
* ACT_SETTING_AUTO
* ACT_SETTING_OFF


h5. Alliance
* ALLIANCE_ALDMERI_DOMINION
* ALLIANCE_DAGGERFALL_COVENANT
* ALLIANCE_EBONHEART_PACT
* ALLIANCE_NONE


h5. ApprovedURLType
* APPROVED_URL_ESO_ACCOUNT
* APPROVED_URL_ESO_ACCOUNT_STORE
* APPROVED_URL_ESO_ACCOUNT_SUBSCRIPTION
* APPROVED_URL_ESO_CHAPTER_UPGRADE
* APPROVED_URL_ESO_FORUMS
* APPROVED_URL_ESO_HELP
* APPROVED_URL_ESO_HOMEPAGE


h5. Attributes
* ATTRIBUTE_HEALTH
* ATTRIBUTE_MAGICKA
* ATTRIBUTE_NONE
* ATTRIBUTE_STAMINA


h5. AudioSpeakerConfigurations
* AUDIO_SPEAKER_CONFIG_FIVE_POINT_ONE
* AUDIO_SPEAKER_CONFIG_FIVE_POINT_ZERO
* AUDIO_SPEAKER_CONFIG_FOUR_POINT_ONE
* AUDIO_SPEAKER_CONFIG_FOUR_POINT_ZERO
* AUDIO_SPEAKER_CONFIG_MONO
* AUDIO_SPEAKER_CONFIG_SEVEN_POINT_ONE
* AUDIO_SPEAKER_CONFIG_STEREO
* AUDIO_SPEAKER_CONFIG_TWO_POINT_ONE
* AUDIO_SPEAKER_CONFIG_USE_WINDOWS_SETTING


h5. BackgroundListFilterTarget
* BACKGROUND_LIST_FILTER_TARGET_BAG_SLOT
* BACKGROUND_LIST_FILTER_TARGET_COLLECTIBLE_ID
* BACKGROUND_LIST_FILTER_TARGET_FURNITURE_ID
* BACKGROUND_LIST_FILTER_TARGET_MARKET_PRODUCT_ID


h5. BackgroundListFilterType
* BACKGROUND_LIST_FILTER_TYPE_DESCRIPTION
* BACKGROUND_LIST_FILTER_TYPE_FURNITURE_KEYWORDS
* BACKGROUND_LIST_FILTER_TYPE_NAME
* BACKGROUND_LIST_FILTER_TYPE_SEARCH_KEYWORDS


h5. BattlegroundAlliance
* BATTLEGROUND_ALLIANCE_FIRE_DRAKES
* BATTLEGROUND_ALLIANCE_NONE
* BATTLEGROUND_ALLIANCE_PIT_DAEMONS
* BATTLEGROUND_ALLIANCE_STORM_LORDS


h5. BattlegroundGameType
* BATTLEGROUND_GAME_TYPE_CAPTURE_THE_FLAG
* BATTLEGROUND_GAME_TYPE_CRAZY_KING
* BATTLEGROUND_GAME_TYPE_DEATHMATCH
* BATTLEGROUND_GAME_TYPE_DOMINATION
* BATTLEGROUND_GAME_TYPE_KING_OF_THE_HILL
* BATTLEGROUND_GAME_TYPE_MURDERBALL
* BATTLEGROUND_GAME_TYPE_NONE


h5. BattlegroundKillType
* BATTLEGROUND_KILL_TYPE_ASSIST
* BATTLEGROUND_KILL_TYPE_KILLED_BY_ENEMY_TEAM
* BATTLEGROUND_KILL_TYPE_KILLED_BY_MY_TEAM
* BATTLEGROUND_KILL_TYPE_KILLING_BLOW
* BATTLEGROUND_KILL_TYPE_STOLEN_BY_ENEMY_TEAM


h5. BattlegroundLeaderboardType
* BATTLEGROUND_LEADERBOARD_TYPE_DEATHMATCH
* BATTLEGROUND_LEADERBOARD_TYPE_FLAG_GAMES
* BATTLEGROUND_LEADERBOARD_TYPE_LAND_GRAB
* BATTLEGROUND_LEADERBOARD_TYPE_NONE


h5. BookMedium
* BOOK_MEDIUM_ANIMAL_SKIN
* BOOK_MEDIUM_LETTER
* BOOK_MEDIUM_NONE
* BOOK_MEDIUM_NOTE
* BOOK_MEDIUM_RUBBING_PAPER
* BOOK_MEDIUM_SCROLL
* BOOK_MEDIUM_STONE_TABLET
* BOOK_MEDIUM_YELLOWED_PAPER


h5. BossRank
* BOSS_RANK_EXTRA
* BOSS_RANK_FIVE
* BOSS_RANK_FOUR
* BOSS_RANK_NOT_A_BOSS
* BOSS_RANK_ONE
* BOSS_RANK_SIX
* BOSS_RANK_THREE
* BOSS_RANK_TWO


h5. BuffEffectType
* BUFF_EFFECT_TYPE_BUFF
* BUFF_EFFECT_TYPE_DEBUFF
* BUFF_EFFECT_TYPE_NOT_AN_EFFECT


h5. BuffType
* BUFF_TYPE_EMPOWER
* BUFF_TYPE_MAJOR_BERSERK
* BUFF_TYPE_MAJOR_BRUTALITY
* BUFF_TYPE_MAJOR_DEFILE
* BUFF_TYPE_MAJOR_ENDURANCE
* BUFF_TYPE_MAJOR_EROSION
* BUFF_TYPE_MAJOR_EVASION
* BUFF_TYPE_MAJOR_EXPEDITION
* BUFF_TYPE_MAJOR_FORCE
* BUFF_TYPE_MAJOR_FORTITUDE
* BUFF_TYPE_MAJOR_FRACTURE
* BUFF_TYPE_MAJOR_HEROISM
* BUFF_TYPE_MAJOR_INTELLECT
* BUFF_TYPE_MAJOR_MAIM
* BUFF_TYPE_MAJOR_MANGLE
* BUFF_TYPE_MAJOR_MENDING
* BUFF_TYPE_MAJOR_PROPHECY
* BUFF_TYPE_MAJOR_PROTECTION
* BUFF_TYPE_MAJOR_RESOLVE
* BUFF_TYPE_MAJOR_SAVAGERY
* BUFF_TYPE_MAJOR_SORCERY
* BUFF_TYPE_MAJOR_SPELL_SHATTER
* BUFF_TYPE_MAJOR_VITALITY
* BUFF_TYPE_MAJOR_WARD
* BUFF_TYPE_MINOR_BERSERK
* BUFF_TYPE_MINOR_BRUTALITY
* BUFF_TYPE_MINOR_DEFILE
* BUFF_TYPE_MINOR_ENDURANCE
* BUFF_TYPE_MINOR_EROSION
* BUFF_TYPE_MINOR_EVASION
* BUFF_TYPE_MINOR_EXPEDITION
* BUFF_TYPE_MINOR_FORCE
* BUFF_TYPE_MINOR_FORTITUDE
* BUFF_TYPE_MINOR_FRACTURE
* BUFF_TYPE_MINOR_HEROISM
* BUFF_TYPE_MINOR_INTELLECT
* BUFF_TYPE_MINOR_MAIM
* BUFF_TYPE_MINOR_MANGLE
* BUFF_TYPE_MINOR_MENDING
* BUFF_TYPE_MINOR_PROPHECY
* BUFF_TYPE_MINOR_PROTECTION
* BUFF_TYPE_MINOR_RESOLVE
* BUFF_TYPE_MINOR_SAVAGERY
* BUFF_TYPE_MINOR_SORCERY
* BUFF_TYPE_MINOR_SPELL_SHATTER
* BUFF_TYPE_MINOR_VITALITY
* BUFF_TYPE_MINOR_WARD
* BUFF_TYPE_NONE


h5. CadwellProgressionLevel
* CADWELL_PROGRESSION_LEVEL_BRONZE
* CADWELL_PROGRESSION_LEVEL_GOLD
* CADWELL_PROGRESSION_LEVEL_SILVER


h5. CenterScreenAnnounceType
* CENTER_SCREEN_ANNOUNCE_TYPE_ABILITY_PROGRESSION_RANK_MORPH
* CENTER_SCREEN_ANNOUNCE_TYPE_ABILITY_PROGRESSION_RANK_UPDATE
* CENTER_SCREEN_ANNOUNCE_TYPE_ACHIEVEMENT_AWARDED
* CENTER_SCREEN_ANNOUNCE_TYPE_ACTIVITY_COMPLETE
* CENTER_SCREEN_ANNOUNCE_TYPE_ARTIFACT_CONTROL_STATE
* CENTER_SCREEN_ANNOUNCE_TYPE_AVENGE_KILL
* CENTER_SCREEN_ANNOUNCE_TYPE_BAG_CAPACITY_CHANGED
* CENTER_SCREEN_ANNOUNCE_TYPE_BANK_CAPACITY_CHANGED
* CENTER_SCREEN_ANNOUNCE_TYPE_BATTLEGROUND_MINUTE_WARNING
* CENTER_SCREEN_ANNOUNCE_TYPE_BATTLEGROUND_NEARING_VICTORY
* CENTER_SCREEN_ANNOUNCE_TYPE_BATTLEGROUND_OBJECTIVE
* CENTER_SCREEN_ANNOUNCE_TYPE_CHAMPION_LEVEL_ACHIEVED
* CENTER_SCREEN_ANNOUNCE_TYPE_CHAMPION_POINT_GAINED
* CENTER_SCREEN_ANNOUNCE_TYPE_COLLECTIBLES_UPDATED
* CENTER_SCREEN_ANNOUNCE_TYPE_CORONATE_EMPEROR
* CENTER_SCREEN_ANNOUNCE_TYPE_COUNTDOWN
* CENTER_SCREEN_ANNOUNCE_TYPE_DEPOSE_EMPEROR
* CENTER_SCREEN_ANNOUNCE_TYPE_DISCOVERY_EXPERIENCE
* CENTER_SCREEN_ANNOUNCE_TYPE_DISPLAY_ANNOUNCEMENT
* CENTER_SCREEN_ANNOUNCE_TYPE_DUEL_COUNTDOWN
* CENTER_SCREEN_ANNOUNCE_TYPE_DUEL_FINISHED
* CENTER_SCREEN_ANNOUNCE_TYPE_DUEL_NEAR_BOUNDARY
* CENTER_SCREEN_ANNOUNCE_TYPE_ENLIGHTENMENT_GAINED
* CENTER_SCREEN_ANNOUNCE_TYPE_ENLIGHTENMENT_LOST
* CENTER_SCREEN_ANNOUNCE_TYPE_ESO_PLUS_SUBSCRIPTION_CHANGED
* CENTER_SCREEN_ANNOUNCE_TYPE_EXPERIENCE_GAIN
* CENTER_SCREEN_ANNOUNCE_TYPE_FORCE_RESPEC
* CENTER_SCREEN_ANNOUNCE_TYPE_IMPERIAL_CITY_ACCESS_GAINED
* CENTER_SCREEN_ANNOUNCE_TYPE_IMPERIAL_CITY_ACCESS_LOST
* CENTER_SCREEN_ANNOUNCE_TYPE_JUSTICE_INFAMY_CHANGED
* CENTER_SCREEN_ANNOUNCE_TYPE_JUSTICE_NOW_KOS
* CENTER_SCREEN_ANNOUNCE_TYPE_JUSTICE_NO_LONGER_KOS
* CENTER_SCREEN_ANNOUNCE_TYPE_KEEP_GATE_CHANGED
* CENTER_SCREEN_ANNOUNCE_TYPE_LEVEL_GAIN
* CENTER_SCREEN_ANNOUNCE_TYPE_LORE_BOOK_LEARNED
* CENTER_SCREEN_ANNOUNCE_TYPE_LORE_BOOK_LEARNED_SKILL_EXPERIENCE
* CENTER_SCREEN_ANNOUNCE_TYPE_LORE_COLLECTION_COMPLETED
* CENTER_SCREEN_ANNOUNCE_TYPE_LORE_COLLECTION_COMPLETED_SKILL_EXPERIENCE
* CENTER_SCREEN_ANNOUNCE_TYPE_OBJECTIVE_COMPLETED
* CENTER_SCREEN_ANNOUNCE_TYPE_PLEDGE_OF_MARA_RESULT
* CENTER_SCREEN_ANNOUNCE_TYPE_POI_DISCOVERED
* CENTER_SCREEN_ANNOUNCE_TYPE_QUEST_ADDED
* CENTER_SCREEN_ANNOUNCE_TYPE_QUEST_COMPLETE
* CENTER_SCREEN_ANNOUNCE_TYPE_QUEST_CONDITION_COUNTER_CHANGED
* CENTER_SCREEN_ANNOUNCE_TYPE_QUEST_OPTIONAL_STEP_ADVANCED
* CENTER_SCREEN_ANNOUNCE_TYPE_RAID_TRIAL
* CENTER_SCREEN_ANNOUNCE_TYPE_REVENGE_KILL
* CENTER_SCREEN_ANNOUNCE_TYPE_RIDING_SKILL_IMPROVEMENT
* CENTER_SCREEN_ANNOUNCE_TYPE_SINGLE_COLLECTIBLE_UPDATED
* CENTER_SCREEN_ANNOUNCE_TYPE_SKILL_LINE_ADDED
* CENTER_SCREEN_ANNOUNCE_TYPE_SKILL_POINTS_GAINED
* CENTER_SCREEN_ANNOUNCE_TYPE_SKILL_POINTS_PARTIAL_GAINED
* CENTER_SCREEN_ANNOUNCE_TYPE_SKILL_RANK_UPDATE
* CENTER_SCREEN_ANNOUNCE_TYPE_SKILL_XP_UPDATE
* CENTER_SCREEN_ANNOUNCE_TYPE_SYSTEM_BROADCAST


h5. ChampionPointActiveReason
* CHAMPION_POINT_ACTIVE_REASON_ACTIVE
* CHAMPION_POINT_ACTIVE_REASON_IN_NON_CHAMPION_BATTLEGROUND
* CHAMPION_POINT_ACTIVE_REASON_IN_NON_CHAMPION_CAMPAIGN


h5. Chapter
* CHAPTER_BASE_GAME
* CHAPTER_CHAPTER_10
* CHAPTER_CHAPTER_11
* CHAPTER_CHAPTER_12
* CHAPTER_CHAPTER_13
* CHAPTER_CHAPTER_14
* CHAPTER_CHAPTER_15
* CHAPTER_CHAPTER_16
* CHAPTER_CHAPTER_2
* CHAPTER_CHAPTER_3
* CHAPTER_CHAPTER_4
* CHAPTER_CHAPTER_5
* CHAPTER_CHAPTER_6
* CHAPTER_CHAPTER_7
* CHAPTER_CHAPTER_8
* CHAPTER_CHAPTER_9
* CHAPTER_VOLCANO


h5. CharacterAppearanceMode
* CHARACTER_MODE_CREATION
* CHARACTER_MODE_EDIT
* CHARACTER_MODE_SELECTION


h5. CharacterCreateOptionRestrictionReason
* CHARACTER_CREATE_OPTION_RESTRICTION_REASON_NONE
* CHARACTER_CREATE_OPTION_RESTRICTION_REASON_REQUIRES_COLLECTIBLE
* CHARACTER_CREATE_OPTION_RESTRICTION_REASON_REQUIRES_MORROWIND


h5. ChatChannelCategories
* CHAT_CATEGORY_COMBAT_ALLIANCE_POINTS
* CHAT_CATEGORY_COMBAT_BLOCK_ABSORBED_DEFEND
* CHAT_CATEGORY_COMBAT_DEATH
* CHAT_CATEGORY_COMBAT_DIRECT_DAMAGE
* CHAT_CATEGORY_COMBAT_DIRECT_HEAL
* CHAT_CATEGORY_COMBAT_DODGE_PARRY_MISS
* CHAT_CATEGORY_COMBAT_DOT
* CHAT_CATEGORY_COMBAT_DRAIN
* CHAT_CATEGORY_COMBAT_ENERGIZE
* CHAT_CATEGORY_COMBAT_EXPERIENCE
* CHAT_CATEGORY_COMBAT_GAINED_EFFECT
* CHAT_CATEGORY_COMBAT_HOT
* CHAT_CATEGORY_COMBAT_LOST_EFFECT
* CHAT_CATEGORY_COMBAT_OTHER
* CHAT_CATEGORY_COMBAT_RANK_POINTS
* CHAT_CATEGORY_COMBAT_RESIST
* CHAT_CATEGORY_COMBAT_TELVAR_STONES
* CHAT_CATEGORY_EMOTE
* CHAT_CATEGORY_GUILD_1
* CHAT_CATEGORY_GUILD_2
* CHAT_CATEGORY_GUILD_3
* CHAT_CATEGORY_GUILD_4
* CHAT_CATEGORY_GUILD_5
* CHAT_CATEGORY_MONSTER_EMOTE
* CHAT_CATEGORY_MONSTER_SAY
* CHAT_CATEGORY_MONSTER_WHISPER
* CHAT_CATEGORY_MONSTER_YELL
* CHAT_CATEGORY_OFFICER_1
* CHAT_CATEGORY_OFFICER_2
* CHAT_CATEGORY_OFFICER_3
* CHAT_CATEGORY_OFFICER_4
* CHAT_CATEGORY_OFFICER_5
* CHAT_CATEGORY_PARTY
* CHAT_CATEGORY_SAY
* CHAT_CATEGORY_SYSTEM
* CHAT_CATEGORY_WHISPER_INCOMING
* CHAT_CATEGORY_WHISPER_OUTGOING
* CHAT_CATEGORY_YELL
* CHAT_CATEGORY_ZONE
* CHAT_CATEGORY_ZONE_ENGLISH
* CHAT_CATEGORY_ZONE_FRENCH
* CHAT_CATEGORY_ZONE_GERMAN
* CHAT_CATEGORY_ZONE_JAPANESE


h5. ChatChannelCategoryHeaders
* CHAT_CATEGORY_HEADER_CHANNELS
* CHAT_CATEGORY_HEADER_COMBAT
* CHAT_CATEGORY_HEADER_GUILDS


h5. ConsoleServerChoice
* CONSOLE_SERVER_EUROPE
* CONSOLE_SERVER_NORTH_AMERICA


h5. CurrencyChangeReason
* CURRENCY_CHANGE_REASON_ABILITY_UPGRADE_PURCHASE
* CURRENCY_CHANGE_REASON_ACHIEVEMENT
* CURRENCY_CHANGE_REASON_ACTION
* CURRENCY_CHANGE_REASON_BAGSPACE
* CURRENCY_CHANGE_REASON_BANKSPACE
* CURRENCY_CHANGE_REASON_BANK_DEPOSIT
* CURRENCY_CHANGE_REASON_BANK_FEE
* CURRENCY_CHANGE_REASON_BANK_WITHDRAWAL
* CURRENCY_CHANGE_REASON_BATTLEGROUND
* CURRENCY_CHANGE_REASON_BOUNTY_CONFISCATED
* CURRENCY_CHANGE_REASON_BOUNTY_PAID_FENCE
* CURRENCY_CHANGE_REASON_BOUNTY_PAID_GUARD
* CURRENCY_CHANGE_REASON_BUYBACK
* CURRENCY_CHANGE_REASON_CASH_ON_DELIVERY
* CURRENCY_CHANGE_REASON_COMMAND
* CURRENCY_CHANGE_REASON_CONSUME_FOOD_DRINK
* CURRENCY_CHANGE_REASON_CONSUME_POTION
* CURRENCY_CHANGE_REASON_CONVERSATION
* CURRENCY_CHANGE_REASON_CRAFT
* CURRENCY_CHANGE_REASON_DEATH
* CURRENCY_CHANGE_REASON_DECONSTRUCT
* CURRENCY_CHANGE_REASON_EDIT_GUILD_HERALDRY
* CURRENCY_CHANGE_REASON_FEED_MOUNT
* CURRENCY_CHANGE_REASON_GUILD_BANK_DEPOSIT
* CURRENCY_CHANGE_REASON_GUILD_BANK_WITHDRAWAL
* CURRENCY_CHANGE_REASON_GUILD_FORWARD_CAMP
* CURRENCY_CHANGE_REASON_GUILD_STANDARD
* CURRENCY_CHANGE_REASON_GUILD_TABARD
* CURRENCY_CHANGE_REASON_HARVEST_REAGENT
* CURRENCY_CHANGE_REASON_HOOKPOINT_STORE
* CURRENCY_CHANGE_REASON_JUMP_FAILURE_REFUND
* CURRENCY_CHANGE_REASON_KEEP_REPAIR
* CURRENCY_CHANGE_REASON_KEEP_REWARD
* CURRENCY_CHANGE_REASON_KEEP_UPGRADE
* CURRENCY_CHANGE_REASON_KILL
* CURRENCY_CHANGE_REASON_LOOT
* CURRENCY_CHANGE_REASON_LOOT_STOLEN
* CURRENCY_CHANGE_REASON_MAIL
* CURRENCY_CHANGE_REASON_MEDAL
* CURRENCY_CHANGE_REASON_PICKPOCKET
* CURRENCY_CHANGE_REASON_PLAYER_INIT
* CURRENCY_CHANGE_REASON_PVP_KILL_TRANSFER
* CURRENCY_CHANGE_REASON_PVP_RESURRECT
* CURRENCY_CHANGE_REASON_QUESTREWARD
* CURRENCY_CHANGE_REASON_RECIPE
* CURRENCY_CHANGE_REASON_REFORGE
* CURRENCY_CHANGE_REASON_RESEARCH_TRAIT
* CURRENCY_CHANGE_REASON_RESPEC_ATTRIBUTES
* CURRENCY_CHANGE_REASON_RESPEC_CHAMPION
* CURRENCY_CHANGE_REASON_RESPEC_MORPHS
* CURRENCY_CHANGE_REASON_RESPEC_SKILLS
* CURRENCY_CHANGE_REASON_REWARD
* CURRENCY_CHANGE_REASON_SELL_STOLEN
* CURRENCY_CHANGE_REASON_SOULWEARY
* CURRENCY_CHANGE_REASON_SOUL_HEAL
* CURRENCY_CHANGE_REASON_STABLESPACE
* CURRENCY_CHANGE_REASON_STUCK
* CURRENCY_CHANGE_REASON_TRADE
* CURRENCY_CHANGE_REASON_TRADINGHOUSE_LISTING
* CURRENCY_CHANGE_REASON_TRADINGHOUSE_PURCHASE
* CURRENCY_CHANGE_REASON_TRADINGHOUSE_REFUND
* CURRENCY_CHANGE_REASON_TRAIT_REVEAL
* CURRENCY_CHANGE_REASON_TRAVEL_GRAVEYARD
* CURRENCY_CHANGE_REASON_VENDOR
* CURRENCY_CHANGE_REASON_VENDOR_LAUNDER
* CURRENCY_CHANGE_REASON_VENDOR_REPAIR


h5. CurrencyType
* CURT_ALLIANCE_POINTS
* CURT_HIDDEN_THING
* CURT_MONEY
* CURT_NONE
* CURT_TELVAR_STONES
* CURT_WRIT_VOUCHERS


h5. CustomerServiceAskForHelpCategories
* CUSTOMER_SERVICE_ASK_FOR_HELP_CATEGORY_CHARACTER_ISSUE
* CUSTOMER_SERVICE_ASK_FOR_HELP_CATEGORY_NONE
* CUSTOMER_SERVICE_ASK_FOR_HELP_CATEGORY_REPORT_PLAYER


h5. CustomerServiceAskForHelpReportPlayerSubcategory
* CUSTOMER_SERVICE_ASK_FOR_HELP_REPORT_PLAYER_SUBCATEGORY_CHEATING
* CUSTOMER_SERVICE_ASK_FOR_HELP_REPORT_PLAYER_SUBCATEGORY_HARASSMENT
* CUSTOMER_SERVICE_ASK_FOR_HELP_REPORT_PLAYER_SUBCATEGORY_INAPPROPRIATE_NAME
* CUSTOMER_SERVICE_ASK_FOR_HELP_REPORT_PLAYER_SUBCATEGORY_NONE
* CUSTOMER_SERVICE_ASK_FOR_HELP_REPORT_PLAYER_SUBCATEGORY_OTHER


h5. CustomerServiceItemAssistanceCategories
* CUSTOMER_SERVICE_ITEM_ASSISTANCE_CATEGORY_CANT_ACQUIRE
* CUSTOMER_SERVICE_ITEM_ASSISTANCE_CATEGORY_DEPRECATED
* CUSTOMER_SERVICE_ITEM_ASSISTANCE_CATEGORY_FROM_CROWN_STORE
* CUSTOMER_SERVICE_ITEM_ASSISTANCE_CATEGORY_LOST
* CUSTOMER_SERVICE_ITEM_ASSISTANCE_CATEGORY_MISSING_CROWNS
* CUSTOMER_SERVICE_ITEM_ASSISTANCE_CATEGORY_NONE


h5. CustomerServiceQuestAssistanceCategories
* CUSTOMER_SERVICE_QUEST_ASSISTANCE_CATEGORY_ITEM_MISSING
* CUSTOMER_SERVICE_QUEST_ASSISTANCE_CATEGORY_NONE
* CUSTOMER_SERVICE_QUEST_ASSISTANCE_CATEGORY_NPC_MOBS


h5. CustomerServiceSubmitFeedbackCategories
* CUSTOMER_SERVICE_SUBMIT_FEEDBACK_CATEGORY_ALLIANCE_WAR
* CUSTOMER_SERVICE_SUBMIT_FEEDBACK_CATEGORY_AUDIO
* CUSTOMER_SERVICE_SUBMIT_FEEDBACK_CATEGORY_CHARACTERS
* CUSTOMER_SERVICE_SUBMIT_FEEDBACK_CATEGORY_COMBAT
* CUSTOMER_SERVICE_SUBMIT_FEEDBACK_CATEGORY_GAME_SYSTEM
* CUSTOMER_SERVICE_SUBMIT_FEEDBACK_CATEGORY_GRAPHICS
* CUSTOMER_SERVICE_SUBMIT_FEEDBACK_CATEGORY_ITEMS
* CUSTOMER_SERVICE_SUBMIT_FEEDBACK_CATEGORY_NONE
* CUSTOMER_SERVICE_SUBMIT_FEEDBACK_CATEGORY_QUESTS
* CUSTOMER_SERVICE_SUBMIT_FEEDBACK_CATEGORY_TEXT


h5. CustomerServiceSubmitFeedbackImpacts
* CUSTOMER_SERVICE_SUBMIT_FEEDBACK_IMPACT_AWESOME
* CUSTOMER_SERVICE_SUBMIT_FEEDBACK_IMPACT_COSMETIC
* CUSTOMER_SERVICE_SUBMIT_FEEDBACK_IMPACT_CRASH
* CUSTOMER_SERVICE_SUBMIT_FEEDBACK_IMPACT_DELAYS_PROGRESS
* CUSTOMER_SERVICE_SUBMIT_FEEDBACK_IMPACT_EXPLOIT
* CUSTOMER_SERVICE_SUBMIT_FEEDBACK_IMPACT_IMPAIR
* CUSTOMER_SERVICE_SUBMIT_FEEDBACK_IMPACT_NONE
* CUSTOMER_SERVICE_SUBMIT_FEEDBACK_IMPACT_SURPRISE


h5. CustomerServiceSubmitFeedbackSubcategories
* CUSTOMER_SERVICE_SUBMIT_FEEDBACK_SUBCATEGORY_ALLIANCE_WAR_GRAVEYARD
* CUSTOMER_SERVICE_SUBMIT_FEEDBACK_SUBCATEGORY_ALLIANCE_WAR_OBJECTIVE
* CUSTOMER_SERVICE_SUBMIT_FEEDBACK_SUBCATEGORY_ALLIANCE_WAR_RANKING
* CUSTOMER_SERVICE_SUBMIT_FEEDBACK_SUBCATEGORY_ALLIANCE_WAR_SIEGE
* CUSTOMER_SERVICE_SUBMIT_FEEDBACK_SUBCATEGORY_AUDIO_MUSIC
* CUSTOMER_SERVICE_SUBMIT_FEEDBACK_SUBCATEGORY_AUDIO_OTHER
* CUSTOMER_SERVICE_SUBMIT_FEEDBACK_SUBCATEGORY_AUDIO_SFX
* CUSTOMER_SERVICE_SUBMIT_FEEDBACK_SUBCATEGORY_AUDIO_VOICEOVER
* CUSTOMER_SERVICE_SUBMIT_FEEDBACK_SUBCATEGORY_CHARACTERS_ABILITIES
* CUSTOMER_SERVICE_SUBMIT_FEEDBACK_SUBCATEGORY_CHARACTERS_ACHIEVEMENTS
* CUSTOMER_SERVICE_SUBMIT_FEEDBACK_SUBCATEGORY_CHARACTERS_ART_ANIMATION
* CUSTOMER_SERVICE_SUBMIT_FEEDBACK_SUBCATEGORY_CHARACTERS_CAMERA
* CUSTOMER_SERVICE_SUBMIT_FEEDBACK_SUBCATEGORY_CHARACTERS_CREATION_LOGIN_SELECTION
* CUSTOMER_SERVICE_SUBMIT_FEEDBACK_SUBCATEGORY_CHARACTERS_DEATH_RESURRECTION
* CUSTOMER_SERVICE_SUBMIT_FEEDBACK_SUBCATEGORY_CHARACTERS_EMOTES
* CUSTOMER_SERVICE_SUBMIT_FEEDBACK_SUBCATEGORY_CHARACTERS_FRIENDS
* CUSTOMER_SERVICE_SUBMIT_FEEDBACK_SUBCATEGORY_CHARACTERS_MAIL
* CUSTOMER_SERVICE_SUBMIT_FEEDBACK_SUBCATEGORY_CHARACTERS_MOVEMENT
* CUSTOMER_SERVICE_SUBMIT_FEEDBACK_SUBCATEGORY_CHARACTERS_SKILLS
* CUSTOMER_SERVICE_SUBMIT_FEEDBACK_SUBCATEGORY_CHARACTERS_TARGETING
* CUSTOMER_SERVICE_SUBMIT_FEEDBACK_SUBCATEGORY_COMBAT_ABILITY
* CUSTOMER_SERVICE_SUBMIT_FEEDBACK_SUBCATEGORY_COMBAT_AI
* CUSTOMER_SERVICE_SUBMIT_FEEDBACK_SUBCATEGORY_COMBAT_ART
* CUSTOMER_SERVICE_SUBMIT_FEEDBACK_SUBCATEGORY_COMBAT_LOOT
* CUSTOMER_SERVICE_SUBMIT_FEEDBACK_SUBCATEGORY_COMBAT_NPC
* CUSTOMER_SERVICE_SUBMIT_FEEDBACK_SUBCATEGORY_GAME_SYSTEM_CHAT
* CUSTOMER_SERVICE_SUBMIT_FEEDBACK_SUBCATEGORY_GAME_SYSTEM_CRAFTING
* CUSTOMER_SERVICE_SUBMIT_FEEDBACK_SUBCATEGORY_GAME_SYSTEM_FRAMERATE
* CUSTOMER_SERVICE_SUBMIT_FEEDBACK_SUBCATEGORY_GAME_SYSTEM_GROUPING
* CUSTOMER_SERVICE_SUBMIT_FEEDBACK_SUBCATEGORY_GAME_SYSTEM_GUILDS
* CUSTOMER_SERVICE_SUBMIT_FEEDBACK_SUBCATEGORY_GAME_SYSTEM_INTERACTABLES_LOCKPICKING
* CUSTOMER_SERVICE_SUBMIT_FEEDBACK_SUBCATEGORY_GAME_SYSTEM_LATENCY
* CUSTOMER_SERVICE_SUBMIT_FEEDBACK_SUBCATEGORY_GAME_SYSTEM_MOUNTS
* CUSTOMER_SERVICE_SUBMIT_FEEDBACK_SUBCATEGORY_GAME_SYSTEM_TRADE
* CUSTOMER_SERVICE_SUBMIT_FEEDBACK_SUBCATEGORY_GAME_SYSTEM_VENDOR
* CUSTOMER_SERVICE_SUBMIT_FEEDBACK_SUBCATEGORY_GRAPHICS_ART_ANIMATION
* CUSTOMER_SERVICE_SUBMIT_FEEDBACK_SUBCATEGORY_GRAPHICS_CHARACTER
* CUSTOMER_SERVICE_SUBMIT_FEEDBACK_SUBCATEGORY_GRAPHICS_CHAT
* CUSTOMER_SERVICE_SUBMIT_FEEDBACK_SUBCATEGORY_GRAPHICS_COLLISION_FIXTURES
* CUSTOMER_SERVICE_SUBMIT_FEEDBACK_SUBCATEGORY_GRAPHICS_COLLISION_LANDSCAPE
* CUSTOMER_SERVICE_SUBMIT_FEEDBACK_SUBCATEGORY_GRAPHICS_CURRENCY
* CUSTOMER_SERVICE_SUBMIT_FEEDBACK_SUBCATEGORY_GRAPHICS_INVENTORY
* CUSTOMER_SERVICE_SUBMIT_FEEDBACK_SUBCATEGORY_GRAPHICS_KEYBINDS
* CUSTOMER_SERVICE_SUBMIT_FEEDBACK_SUBCATEGORY_GRAPHICS_MAPS
* CUSTOMER_SERVICE_SUBMIT_FEEDBACK_SUBCATEGORY_GRAPHICS_SETTINGS
* CUSTOMER_SERVICE_SUBMIT_FEEDBACK_SUBCATEGORY_GRAPHICS_TOOLTIPS
* CUSTOMER_SERVICE_SUBMIT_FEEDBACK_SUBCATEGORY_GRAPHICS_WEATHER
* CUSTOMER_SERVICE_SUBMIT_FEEDBACK_SUBCATEGORY_ITEMS_ARMOR
* CUSTOMER_SERVICE_SUBMIT_FEEDBACK_SUBCATEGORY_ITEMS_ART
* CUSTOMER_SERVICE_SUBMIT_FEEDBACK_SUBCATEGORY_ITEMS_CONSUMABLES
* CUSTOMER_SERVICE_SUBMIT_FEEDBACK_SUBCATEGORY_ITEMS_GATHERING
* CUSTOMER_SERVICE_SUBMIT_FEEDBACK_SUBCATEGORY_ITEMS_LOOT
* CUSTOMER_SERVICE_SUBMIT_FEEDBACK_SUBCATEGORY_ITEMS_SOUL_GEMS
* CUSTOMER_SERVICE_SUBMIT_FEEDBACK_SUBCATEGORY_ITEMS_WEAPONS
* CUSTOMER_SERVICE_SUBMIT_FEEDBACK_SUBCATEGORY_NONE
* CUSTOMER_SERVICE_SUBMIT_FEEDBACK_SUBCATEGORY_QUESTS_DIALOG_GRAMMAR
* CUSTOMER_SERVICE_SUBMIT_FEEDBACK_SUBCATEGORY_QUESTS_DIALOG_VOICEOVER
* CUSTOMER_SERVICE_SUBMIT_FEEDBACK_SUBCATEGORY_QUESTS_NPC_MONSTERS
* CUSTOMER_SERVICE_SUBMIT_FEEDBACK_SUBCATEGORY_QUESTS_OBJECTIVES
* CUSTOMER_SERVICE_SUBMIT_FEEDBACK_SUBCATEGORY_QUESTS_REWARDS
* CUSTOMER_SERVICE_SUBMIT_FEEDBACK_SUBCATEGORY_TEXT_BOOKS
* CUSTOMER_SERVICE_SUBMIT_FEEDBACK_SUBCATEGORY_TEXT_DIALOG_VOICEOVER
* CUSTOMER_SERVICE_SUBMIT_FEEDBACK_SUBCATEGORY_TEXT_LOCALIZATION


h5. DeathRecapHintImportance
* DEATH_RECAP_HINT_IMPORTANCE_ALWAYS_INCLUDE
* DEATH_RECAP_HINT_IMPORTANCE_EXCLUSIVE
* DEATH_RECAP_HINT_IMPORTANCE_NORMAL


h5. DerivedStats
* STAT_ARMOR_RATING
* STAT_ATTACK_POWER
* STAT_BLOCK
* STAT_CRITICAL_RESISTANCE
* STAT_CRITICAL_STRIKE
* STAT_DAMAGE_RESIST_COLD
* STAT_DAMAGE_RESIST_DISEASE
* STAT_DAMAGE_RESIST_DROWN
* STAT_DAMAGE_RESIST_EARTH
* STAT_DAMAGE_RESIST_FIRE
* STAT_DAMAGE_RESIST_GENERIC
* STAT_DAMAGE_RESIST_MAGIC
* STAT_DAMAGE_RESIST_OBLIVION
* STAT_DAMAGE_RESIST_PHYSICAL
* STAT_DAMAGE_RESIST_POISON
* STAT_DAMAGE_RESIST_SHOCK
* STAT_DAMAGE_RESIST_START
* STAT_DODGE
* STAT_HEALING_DONE
* STAT_HEALING_TAKEN
* STAT_HEALTH_MAX
* STAT_HEALTH_REGEN_COMBAT
* STAT_HEALTH_REGEN_IDLE
* STAT_MAGICKA_MAX
* STAT_MAGICKA_REGEN_COMBAT
* STAT_MAGICKA_REGEN_IDLE
* STAT_MISS
* STAT_MITIGATION
* STAT_MOUNT_STAMINA_MAX
* STAT_MOUNT_STAMINA_REGEN_COMBAT
* STAT_MOUNT_STAMINA_REGEN_MOVING
* STAT_NONE
* STAT_PHYSICAL_PENETRATION
* STAT_PHYSICAL_RESIST
* STAT_POWER
* STAT_SPELL_CRITICAL
* STAT_SPELL_MITIGATION
* STAT_SPELL_PENETRATION
* STAT_SPELL_POWER
* STAT_SPELL_RESIST
* STAT_STAMINA_MAX
* STAT_STAMINA_REGEN_COMBAT
* STAT_STAMINA_REGEN_IDLE
* STAT_WEAPON_AND_SPELL_DAMAGE


h5. DifficultyCon
* CON_APPROPRIATE
* CON_DIFFICULT
* CON_EASY
* CON_IMPOSSIBLE
* CON_TRIVIAL


h5. DuelResult
* DUEL_RESULT_FORFEIT
* DUEL_RESULT_WON


h5. DuelState
* DUEL_STATE_DUELING
* DUEL_STATE_DUEL_PENDING
* DUEL_STATE_DUEL_TERMINATING
* DUEL_STATE_IDLE
* DUEL_STATE_INVITE_CONSIDERING
* DUEL_STATE_INVITE_REQUESTING


h5. DungeonDifficulty
* DUNGEON_DIFFICULTY_NONE
* DUNGEON_DIFFICULTY_NORMAL
* DUNGEON_DIFFICULTY_VETERAN


h5. EULAType
* EULA_TYPE_ADDON_EULA
* EULA_TYPE_CODE_OF_CONDUCT
* EULA_TYPE_NON_DISCLOSURE_AGREEMENT
* EULA_TYPE_PREGAME_EULA
* EULA_TYPE_PRIVACY_POLICY
* EULA_TYPE_TERMS_OF_SERVICE


h5. EmoteCategory
* EMOTE_CATEGORY_CEREMONIAL
* EMOTE_CATEGORY_CHEERS_AND_JEERS
* EMOTE_CATEGORY_COLLECTED
* EMOTE_CATEGORY_DEPRECATED
* EMOTE_CATEGORY_EMOTION
* EMOTE_CATEGORY_ENTERTAINMENT
* EMOTE_CATEGORY_FOOD_AND_DRINK
* EMOTE_CATEGORY_GIVE_DIRECTIONS
* EMOTE_CATEGORY_INVALID
* EMOTE_CATEGORY_PERPETUAL
* EMOTE_CATEGORY_PERSONALITY_OVERRIDE
* EMOTE_CATEGORY_PHYSICAL
* EMOTE_CATEGORY_POSES_AND_FIDGETS
* EMOTE_CATEGORY_PROP
* EMOTE_CATEGORY_SOCIAL


h5. FastTravelLinkType
* FAST_TRAVEL_LINK_ACTIVE
* FAST_TRAVEL_LINK_INACTIVE
* FAST_TRAVEL_LINK_IN_COMBAT


h5. FullscreenEffectType
* FULLSCREEN_EFFECT_CHARACTER_FRAMING_BLUR
* FULLSCREEN_EFFECT_NONE
* FULLSCREEN_EFFECT_UNIFORM_BLUR


h5. GameCameraAdditionalInfo
* ADDITIONAL_INTERACT_INFO_EMPTY
* ADDITIONAL_INTERACT_INFO_FISHING_NODE
* ADDITIONAL_INTERACT_INFO_INSTANCE_TYPE
* ADDITIONAL_INTERACT_INFO_IN_HIDEYHOLE
* ADDITIONAL_INTERACT_INFO_LOCKED
* ADDITIONAL_INTERACT_INFO_NONE
* ADDITIONAL_INTERACT_INFO_PICKPOCKET_CHANCE
* ADDITIONAL_INTERACT_INFO_REQUIRES_KEY
* ADDITIONAL_INTERACT_INFO_WEREWOLF_ACTIVE_WHILE_ATTEMPTING_TO_CRAFT


h5. GameCameraFramingScreenType
* FRAMING_SCREEN_AVA
* FRAMING_SCREEN_CHAMPION
* FRAMING_SCREEN_CROWN_CRATES
* FRAMING_SCREEN_CROWN_STORE
* FRAMING_SCREEN_DEFAULT
* FRAMING_SCREEN_INVENTORY
* FRAMING_SCREEN_JOURNAL
* FRAMING_SCREEN_LOOT
* FRAMING_SCREEN_MAP
* FRAMING_SCREEN_SKILLS
* FRAMING_SCREEN_SOCIAL
* FRAMING_SCREEN_SYSTEM


h5. GameCreditsEntryType
* GAME_CREDITS_ENTRY_TYPE_BACKGROUND_SWITCH
* GAME_CREDITS_ENTRY_TYPE_COMPANY_LOGO
* GAME_CREDITS_ENTRY_TYPE_DEPARTMENT_HEADER
* GAME_CREDITS_ENTRY_TYPE_PADDING_SECTION
* GAME_CREDITS_ENTRY_TYPE_SECTION_HEADER
* GAME_CREDITS_ENTRY_TYPE_SECTION_TEXT
* GAME_CREDITS_ENTRY_TYPE_SECTION_TEXT_BLOCK


h5. GamepadTemplate
* GAMEPAD_TEMPLATE_ABILITY_MODIFIERS
* GAMEPAD_TEMPLATE_ALTERNATE_INTERACT
* GAMEPAD_TEMPLATE_DEFAULT
* GAMEPAD_TEMPLATE_MODIFIERS_VARIANT
* GAMEPAD_TEMPLATE_REUSE_ME1
* GAMEPAD_TEMPLATE_REUSE_ME2
* GAMEPAD_TEMPLATE_SOUTHPAW
* GAMEPAD_TEMPLATE_WEAPON_TRICKS


h5. GamepadType
* GAMEPAD_TYPE_NONE
* GAMEPAD_TYPE_PS4
* GAMEPAD_TYPE_XBOX


h5. GamepadVibrationTrigger
* GAMEPAD_VIBRATION_TRIGGER_DIED
* GAMEPAD_VIBRATION_TRIGGER_FALL_DAMAGE_HIGH
* GAMEPAD_VIBRATION_TRIGGER_FALL_DAMAGE_LOW
* GAMEPAD_VIBRATION_TRIGGER_KILLED
* GAMEPAD_VIBRATION_TRIGGER_KNOCKED_BACK
* GAMEPAD_VIBRATION_TRIGGER_STAGGERED
* GAMEPAD_VIBRATION_TRIGGER_STUNNED


h5. GroupDifficultyChangeReason
* GROUP_DIFFICULTY_CHANGE_REASON_IN_DUNGEON
* GROUP_DIFFICULTY_CHANGE_REASON_IN_LFG_GROUP
* GROUP_DIFFICULTY_CHANGE_REASON_NOT_GROUP_LEADER
* GROUP_DIFFICULTY_CHANGE_REASON_NOT_UNLOCKED
* GROUP_DIFFICULTY_CHANGE_REASON_NO_UNIT
* GROUP_DIFFICULTY_CHANGE_REASON_SUCCESS


h5. GroupElectionFailure
* GROUP_ELECTION_FAILURE_ALREADY_VOTED
* GROUP_ELECTION_FAILURE_ANOTHER_IN_PROGRESS
* GROUP_ELECTION_FAILURE_INITIATOR_CANNOT_VOTE
* GROUP_ELECTION_FAILURE_INITIATOR_NOT_FOUND
* GROUP_ELECTION_FAILURE_IN_BATTLEGROUND
* GROUP_ELECTION_FAILURE_NONE
* GROUP_ELECTION_FAILURE_NOT_GROUPED
* GROUP_ELECTION_FAILURE_NO_CURRENT_ELECTION
* GROUP_ELECTION_FAILURE_SAME_INITIATOR_AND_TARGET
* GROUP_ELECTION_FAILURE_SERVER_ERROR
* GROUP_ELECTION_FAILURE_TARGET_NOT_FOUND
* GROUP_ELECTION_FAILURE_TOO_FEW_MEMBERS
* GROUP_ELECTION_FAILURE_TOO_SOON
* GROUP_ELECTION_FAILURE_UNKNOWN_CHOICE


h5. GroupElectionResult
* GROUP_ELECTION_RESULT_ABANDONED
* GROUP_ELECTION_RESULT_ELECTION_LOST
* GROUP_ELECTION_RESULT_ELECTION_WON
* GROUP_ELECTION_RESULT_IN_PROGRESS
* GROUP_ELECTION_RESULT_NOT_APPLICABLE
* GROUP_ELECTION_RESULT_TIED
* GROUP_ELECTION_RESULT_TIMED_OUT


h5. GroupElectionType
* GROUP_ELECTION_TYPE_GENERIC_SIMPLEMAJORITY
* GROUP_ELECTION_TYPE_GENERIC_SUPERMAJORITY
* GROUP_ELECTION_TYPE_GENERIC_UNANIMOUS
* GROUP_ELECTION_TYPE_KICK_MEMBER
* GROUP_ELECTION_TYPE_NEW_LEADER


h5. GroupLeaveReason
* GROUP_LEAVE_REASON_DESTROYED
* GROUP_LEAVE_REASON_DISBAND
* GROUP_LEAVE_REASON_KICKED
* GROUP_LEAVE_REASON_LEFT_BATTLEGROUND
* GROUP_LEAVE_REASON_VOLUNTARY


h5. GroupNotificationMessage
* GROUP_MSG_CANT_KICK_YOURSELF
* GROUP_MSG_CANT_PROMOTE_YOURSELF
* GROUP_MSG_INVALID_MEMBER
* GROUP_MSG_YOU_ARE_NOT_IN_A_GROUP
* GROUP_MSG_YOU_ARE_NOT_THE_LEADER


h5. GroupVoteChoice
* GROUP_VOTE_CHOICE_ABSTAIN
* GROUP_VOTE_CHOICE_AGAINST
* GROUP_VOTE_CHOICE_FOR


h5. HealthWarningStage
* HEALTH_WARNING_FLASH_1
* HEALTH_WARNING_FLASH_2
* HEALTH_WARNING_NONE
* HEALTH_WARNING_STAGE_1
* HEALTH_WARNING_STAGE_2
* HEALTH_WARNING_STAGE_3


h5. HelpShowOptions
* HELP_SHOW_OPTIONS_ALL
* HELP_SHOW_OPTIONS_CONSOLE_AND_PC_GAMEPAD
* HELP_SHOW_OPTIONS_CONSOLE_GAMEPAD
* HELP_SHOW_OPTIONS_KEYBOARD
* HELP_SHOW_OPTIONS_KEYBOARD_AND_CONSOLE_GAMEPAD
* HELP_SHOW_OPTIONS_KEYBOARD_AND_PC_GAMEPAD
* HELP_SHOW_OPTIONS_PC_GAMEPAD


h5. HiddenItemValues
* HIDDEN_ITEM_HELM
* HIDDEN_ITEM_LOIN_CLOTH
* HIDDEN_ITEM_MOUNT_INVENTORY_UPGRADE
* HIDDEN_ITEM_MOUNT_SPEED_UPGRADE
* HIDDEN_ITEM_MOUNT_STAMINA_UPGRADE
* HIDDEN_ITEM_TASSETS


h5. InfamyThresholdsType
* INFAMY_THRESHOLD_DISREPUTABLE
* INFAMY_THRESHOLD_FUGITIVE
* INFAMY_THRESHOLD_NOTORIOUS
* INFAMY_THRESHOLD_UPSTANDING


h5. InstanceDisplayType
* INSTANCE_DISPLAY_TYPE_BATTLEGROUND
* INSTANCE_DISPLAY_TYPE_DELVE
* INSTANCE_DISPLAY_TYPE_DUNGEON
* INSTANCE_DISPLAY_TYPE_GROUP_AREA
* INSTANCE_DISPLAY_TYPE_GROUP_DELVE
* INSTANCE_DISPLAY_TYPE_HOUSING
* INSTANCE_DISPLAY_TYPE_NONE
* INSTANCE_DISPLAY_TYPE_PUBLIC_DUNGEON
* INSTANCE_DISPLAY_TYPE_RAID
* INSTANCE_DISPLAY_TYPE_SOLO


h5. InstanceType
* INSTANCE_TYPE_BATTLEGROUND
* INSTANCE_TYPE_GRADUATION_MOMENT
* INSTANCE_TYPE_GROUP
* INSTANCE_TYPE_HOUSING
* INSTANCE_TYPE_NONE
* INSTANCE_TYPE_PUBLIC_DUNGEON
* INSTANCE_TYPE_RAID
* INSTANCE_TYPE_SOLO


h5. InteractionType
* INTERACTION_AVA_HOOK_POINT
* INTERACTION_BANK
* INTERACTION_BOOK
* INTERACTION_BUY_BAG_SPACE
* INTERACTION_CONVERSATION
* INTERACTION_CRAFT
* INTERACTION_DYE_STATION
* INTERACTION_FAST_TRAVEL
* INTERACTION_FAST_TRAVEL_KEEP
* INTERACTION_FISH
* INTERACTION_FURNITURE
* INTERACTION_GUILDBANK
* INTERACTION_GUILDKIOSK_BID
* INTERACTION_GUILDKIOSK_PURCHASE
* INTERACTION_HARVEST
* INTERACTION_HIDDEN_THING
* INTERACTION_HIDEYHOLE
* INTERACTION_KEEP_GUILD_CLAIM
* INTERACTION_KEEP_GUILD_RELEASE
* INTERACTION_KEEP_INSPECT
* INTERACTION_KEEP_PIECE
* INTERACTION_LOCKPICK
* INTERACTION_LOOT
* INTERACTION_MAIL
* INTERACTION_NONE
* INTERACTION_PAY_BOUNTY
* INTERACTION_PICKPOCKET
* INTERACTION_QUEST
* INTERACTION_SIEGE
* INTERACTION_STABLE
* INTERACTION_STONE_MASON
* INTERACTION_STORE
* INTERACTION_TRADINGHOUSE
* INTERACTION_VENDOR


h5. ItemVisualDamage
* ITEMVISUALDAMAGE_BROKEN
* ITEMVISUALDAMAGE_DAMAGED
* ITEMVISUALDAMAGE_NONE


h5. JumpToPlayerResult
* JUMP_TO_PLAYER_RESULT_CROSS_ALLIANCE_LOCKED
* JUMP_TO_PLAYER_RESULT_GENERIC_FAILURE
* JUMP_TO_PLAYER_RESULT_PLAYER_DIFFICULTY_LOCKED
* JUMP_TO_PLAYER_RESULT_PLAYER_OFFLINE
* JUMP_TO_PLAYER_RESULT_SOLO_ZONE
* JUMP_TO_PLAYER_RESULT_SUCCESS
* JUMP_TO_PLAYER_RESULT_ZONE_COLLECTIBLE_LOCKED


h5. JusticeAllegiance
* JUSTICE_CRIMINAL
* JUSTICE_ENFORCER
* JUSTICE_NONE


h5. JusticeSkillEvent
* JUSTICE_SKILL_FENCE
* JUSTICE_SKILL_LOCKPICK
* JUSTICE_SKILL_NONE
* JUSTICE_SKILL_PICKPOCKET


h5. LeaderboardType
* LEADERBOARD_TYPE_ALLIANCE
* LEADERBOARD_TYPE_BATTLEGROUND
* LEADERBOARD_TYPE_CLASS
* LEADERBOARD_TYPE_HOUSE
* LEADERBOARD_TYPE_OVERALL


h5. LinkStyle
* LINK_STYLE_BRACKETS
* LINK_STYLE_DEFAULT


h5. LinkType
* LINK_TYPE_ACHIEVEMENT
* LINK_TYPE_BOOK
* LINK_TYPE_COLLECTIBLE
* LINK_TYPE_INVALID
* LINK_TYPE_ITEM
* LINK_TYPE_QUEST_ITEM


h5. LocaleRegion
* REGION_AFRICA
* REGION_ASIA
* REGION_EUROPE
* REGION_NONE
* REGION_NORTH_AMERICA
* REGION_OCEANIA
* REGION_SOUTH_AMERICA


h5. LockQuality
* LOCK_QUALITY_ADVANCED
* LOCK_QUALITY_IMPOSSIBLE
* LOCK_QUALITY_INTERMEDIATE
* LOCK_QUALITY_MASTER
* LOCK_QUALITY_NONE
* LOCK_QUALITY_PRACTICE
* LOCK_QUALITY_SIMPLE
* LOCK_QUALITY_TRIVIAL


h5. LootItemType
* LOOT_TYPE_ANY
* LOOT_TYPE_COLLECTIBLE
* LOOT_TYPE_ITEM
* LOOT_TYPE_MONEY
* LOOT_TYPE_QUEST_ITEM
* LOOT_TYPE_TELVAR_STONES
* LOOT_TYPE_WRIT_VOUCHERS


h5. MailAttachmentResult
* MAIL_ATTACHMENT_RESULT_ALREADY_ATTACHED
* MAIL_ATTACHMENT_RESULT_BOUND
* MAIL_ATTACHMENT_RESULT_ITEM_NOT_FOUND
* MAIL_ATTACHMENT_RESULT_LOCKED
* MAIL_ATTACHMENT_RESULT_PLAYER_LOCKED
* MAIL_ATTACHMENT_RESULT_STOLEN
* MAIL_ATTACHMENT_RESULT_SUCCESS


h5. MapContentType
* MAP_CONTENT_AVA
* MAP_CONTENT_BATTLEGROUND
* MAP_CONTENT_DUNGEON
* MAP_CONTENT_NONE


h5. MapFilter
* MAP_FILTER_AVA_GRAVEYARDS
* MAP_FILTER_AVA_GRAVEYARD_AREAS
* MAP_FILTER_AVA_OBJECTIVES
* MAP_FILTER_GROUP_MEMBERS
* MAP_FILTER_IMPERIAL_CITY_ENTRANCES
* MAP_FILTER_KILL_LOCATIONS
* MAP_FILTER_OBJECTIVES
* MAP_FILTER_QUESTS
* MAP_FILTER_RESOURCE_KEEPS
* MAP_FILTER_TRANSIT_LINES
* MAP_FILTER_TRANSIT_LINES_ALLIANCE
* MAP_FILTER_WAYSHRINES


h5. MapFilterType
* MAP_FILTER_TYPE_AVA_CYRODIIL
* MAP_FILTER_TYPE_AVA_IMPERIAL
* MAP_FILTER_TYPE_BATTLEGROUND
* MAP_FILTER_TYPE_STANDARD


h5. MapPingEventType
* PING_EVENT_ADDED
* PING_EVENT_REMOVED


h5. MapTransitLineAlliance
* MAP_TRANSIT_LINE_ALLIANCE_ALL
* MAP_TRANSIT_LINE_ALLIANCE_MINE


h5. MarketCurrencyType
* MKCT_CROWNS
* MKCT_CROWN_GEMS
* MKCT_NONE


h5. MarketDisplayGroup
* MARKET_DISPLAY_GROUP_CROWN_STORE
* MARKET_DISPLAY_GROUP_HOUSE_EDITOR
* MARKET_DISPLAY_GROUP_HOUSE_PREVIEW


h5. MarketFilterView
* MARKET_FILTER_VIEW_ALL
* MARKET_FILTER_VIEW_NOT_PURCHASED
* MARKET_FILTER_VIEW_PURCHASED


h5. MarketInstantUnlock
* MARKET_INSTANT_UNLOCK_APPEARANCE_CHANGE_TOKEN
* MARKET_INSTANT_UNLOCK_BITE_CURE
* MARKET_INSTANT_UNLOCK_CHARACTER_SLOT
* MARKET_INSTANT_UNLOCK_ESO_PLUS
* MARKET_INSTANT_UNLOCK_NONE
* MARKET_INSTANT_UNLOCK_PLAYER_BACKPACK
* MARKET_INSTANT_UNLOCK_PLAYER_BANK
* MARKET_INSTANT_UNLOCK_RACE_CHANGE_TOKEN
* MARKET_INSTANT_UNLOCK_RENAME_TOKEN
* MARKET_INSTANT_UNLOCK_VAMPIRE_BITE
* MARKET_INSTANT_UNLOCK_WEREWOLF_BITE


h5. MarketProductPurchaseState
* MARKET_PRODUCT_PURCHASE_STATE_INSTANT_UNLOCK_COMPLETE
* MARKET_PRODUCT_PURCHASE_STATE_INSTANT_UNLOCK_INELIGIBLE
* MARKET_PRODUCT_PURCHASE_STATE_NOT_PURCHASED
* MARKET_PRODUCT_PURCHASE_STATE_PURCHASED


h5. MarketProductType
* MARKET_PRODUCT_TYPE_BUNDLE
* MARKET_PRODUCT_TYPE_COLLECTIBLE
* MARKET_PRODUCT_TYPE_CROWN_CRATE
* MARKET_PRODUCT_TYPE_HOUSING
* MARKET_PRODUCT_TYPE_INSTANT_UNLOCK
* MARKET_PRODUCT_TYPE_ITEM
* MARKET_PRODUCT_TYPE_NONE
* MARKET_PRODUCT_TYPE_PROMO


h5. MarketPurchasableResult
* MARKET_PURCHASE_RESULT_ALREADY_COMPLETED_INSTANT_UNLOCK
* MARKET_PURCHASE_RESULT_COLLECTIBLE_ALREADY
* MARKET_PURCHASE_RESULT_COLLECTIONS_DISABLED
* MARKET_PURCHASE_RESULT_COMING_SOON
* MARKET_PURCHASE_RESULT_FAIL_INSTANT_UNLOCK_REQ_LIST
* MARKET_PURCHASE_RESULT_HOUSING_ALREADY_OWNED
* MARKET_PURCHASE_RESULT_INVALID_MARKET_COLLECTIBLE
* MARKET_PURCHASE_RESULT_INVALID_MARKET_HOUSING
* MARKET_PURCHASE_RESULT_INVALID_MARKET_ITEM
* MARKET_PURCHASE_RESULT_INVALID_STACK_SIZE
* MARKET_PURCHASE_RESULT_MARKET_LOCKED
* MARKET_PURCHASE_RESULT_NOT_ENOUGH_CROWN_GEMS
* MARKET_PURCHASE_RESULT_NOT_ENOUGH_ROOM
* MARKET_PURCHASE_RESULT_NOT_ENOUGH_VC
* MARKET_PURCHASE_RESULT_SUCCESS
* MARKET_PURCHASE_RESULT_UNIQUE_ITEM_ALREADY


h5. MarketState
* MARKET_STATE_LOCKED
* MARKET_STATE_OPEN
* MARKET_STATE_UNKNOWN
* MARKET_STATE_UPDATING


h5. MegaServer
* MEGASERVER_EU
* MEGASERVER_NA
* MEGASERVER_NONE


h5. MonsterSocialClass
* MONSTER_SOCIAL_CLASS_ALCHEMIST
* MONSTER_SOCIAL_CLASS_ARTISAN
* MONSTER_SOCIAL_CLASS_ASSASSIN
* MONSTER_SOCIAL_CLASS_BARD
* MONSTER_SOCIAL_CLASS_BEGGAR
* MONSTER_SOCIAL_CLASS_CHEF
* MONSTER_SOCIAL_CLASS_CIVIL_SERVANT
* MONSTER_SOCIAL_CLASS_CLOTHIER
* MONSTER_SOCIAL_CLASS_COMMONER
* MONSTER_SOCIAL_CLASS_CRAFTER
* MONSTER_SOCIAL_CLASS_CULTIST
* MONSTER_SOCIAL_CLASS_DRUNKARD
* MONSTER_SOCIAL_CLASS_FARMER
* MONSTER_SOCIAL_CLASS_FIGHTER
* MONSTER_SOCIAL_CLASS_FISHER
* MONSTER_SOCIAL_CLASS_GATHERER
* MONSTER_SOCIAL_CLASS_GHOST
* MONSTER_SOCIAL_CLASS_GUARD
* MONSTER_SOCIAL_CLASS_HEALER
* MONSTER_SOCIAL_CLASS_HUNTER
* MONSTER_SOCIAL_CLASS_LABORER
* MONSTER_SOCIAL_CLASS_MAGE
* MONSTER_SOCIAL_CLASS_MERCHANT
* MONSTER_SOCIAL_CLASS_NOBLE
* MONSTER_SOCIAL_CLASS_NOT_APPLICABLE
* MONSTER_SOCIAL_CLASS_NUDE
* MONSTER_SOCIAL_CLASS_ORDINATOR
* MONSTER_SOCIAL_CLASS_OUTLAW
* MONSTER_SOCIAL_CLASS_PILGRIM
* MONSTER_SOCIAL_CLASS_PRIEST
* MONSTER_SOCIAL_CLASS_PRISONER
* MONSTER_SOCIAL_CLASS_PROVISIONER
* MONSTER_SOCIAL_CLASS_SAILOR
* MONSTER_SOCIAL_CLASS_SCHOLAR
* MONSTER_SOCIAL_CLASS_SERVANT
* MONSTER_SOCIAL_CLASS_SKELETON
* MONSTER_SOCIAL_CLASS_SLAVE
* MONSTER_SOCIAL_CLASS_SMITH
* MONSTER_SOCIAL_CLASS_SOLDIER
* MONSTER_SOCIAL_CLASS_STUDENT
* MONSTER_SOCIAL_CLASS_THIEF
* MONSTER_SOCIAL_CLASS_UNDEFINED
* MONSTER_SOCIAL_CLASS_VAMPIRE
* MONSTER_SOCIAL_CLASS_WARRIOR
* MONSTER_SOCIAL_CLASS_WATCHMEN
* MONSTER_SOCIAL_CLASS_WEREWOLF
* MONSTER_SOCIAL_CLASS_WOODWORKER


h5. MouseContentType
* MOUSE_CONTENT_ACTION
* MOUSE_CONTENT_COLLECTIBLE
* MOUSE_CONTENT_EMPTY
* MOUSE_CONTENT_EQUIPPED_ITEM
* MOUSE_CONTENT_INVENTORY_ITEM
* MOUSE_CONTENT_QUEST_ITEM
* MOUSE_CONTENT_STORE_BUYBACK_ITEM
* MOUSE_CONTENT_STORE_ITEM
* MOUSE_CONTENT_TRADE_ITEM


h5. MouseDestroyItemFailedReason
* MOUSE_DESTROY_ITEM_FAIL_REASON_CRAFTING
* MOUSE_DESTROY_ITEM_FAIL_REASON_NONE
* MOUSE_DESTROY_ITEM_FAIL_REASON_PLAYER_LOCKED


h5. MultiLocalizedEnumTest
* MLET_EXP_VAL_MULTI_LOC
* MLET_EXP_VAL_NO_LOC
* MLET_EXP_VAL_STD_LOC
* MLET_IMP_VAL_MULTI_LOC
* MLET_IMP_VAL_STD_LOC


h5. NonCombatBonusType
* NON_COMBAT_BONUS_ALCHEMY_CREATE_EXTRA
* NON_COMBAT_BONUS_ALCHEMY_CREATE_PERCENT_DISCOUNT
* NON_COMBAT_BONUS_ALCHEMY_LEVEL
* NON_COMBAT_BONUS_ALCHEMY_NEGATIVE_DURATION
* NON_COMBAT_BONUS_ALCHEMY_POTION_DURATION
* NON_COMBAT_BONUS_ALCHEMY_SHOW_NODES
* NON_COMBAT_BONUS_ALCHEMY_THIRD_SLOT
* NON_COMBAT_BONUS_ARMOR_KNOWLEDGE
* NON_COMBAT_BONUS_ASSAULT_BOUNTY_REDUCTION
* NON_COMBAT_BONUS_AVOID_BLADE_OF_WOE_WITNESS_CHANCE
* NON_COMBAT_BONUS_BLACKSMITHING_BOOSTER_BONUS
* NON_COMBAT_BONUS_BLACKSMITHING_CRAFT_PERCENT_DISCOUNT
* NON_COMBAT_BONUS_BLACKSMITHING_EXTRACT_LEVEL
* NON_COMBAT_BONUS_BLACKSMITHING_HIRELING_LEVEL
* NON_COMBAT_BONUS_BLACKSMITHING_LEVEL
* NON_COMBAT_BONUS_BLACKSMITHING_RESEARCH_LEVEL
* NON_COMBAT_BONUS_BLACKSMITHING_SHOW_NODES
* NON_COMBAT_BONUS_BOUNTY_DECAY
* NON_COMBAT_BONUS_CLEMENCY
* NON_COMBAT_BONUS_CLEMENCY_ARREST_IMMUNITY
* NON_COMBAT_BONUS_CLOTHIER_BOOSTER_BONUS
* NON_COMBAT_BONUS_CLOTHIER_CRAFT_PERCENT_DISCOUNT
* NON_COMBAT_BONUS_CLOTHIER_EXTRACT_LEVEL
* NON_COMBAT_BONUS_CLOTHIER_HIRELING_LEVEL
* NON_COMBAT_BONUS_CLOTHIER_LEVEL
* NON_COMBAT_BONUS_CLOTHIER_RESEARCH_LEVEL
* NON_COMBAT_BONUS_CLOTHIER_SHOW_NODES
* NON_COMBAT_BONUS_ENCHANTING_CRAFT_PERCENT_DISCOUNT
* NON_COMBAT_BONUS_ENCHANTING_DECONSTRUCTION_UPGRADE
* NON_COMBAT_BONUS_ENCHANTING_HIRELING_LEVEL
* NON_COMBAT_BONUS_ENCHANTING_LEVEL
* NON_COMBAT_BONUS_ENCHANTING_RARITY_LEVEL
* NON_COMBAT_BONUS_ENCHANTING_SHOW_NODES
* NON_COMBAT_BONUS_ENCHANTING_SLOT_IMPROVEMENT
* NON_COMBAT_BONUS_ENLIGHTENED
* NON_COMBAT_BONUS_EXTRACTION
* NON_COMBAT_BONUS_FENCE_SALESMAN
* NON_COMBAT_BONUS_FORTUNE_SEEKER
* NON_COMBAT_BONUS_GROOM
* NON_COMBAT_BONUS_GUARD_KILL
* NON_COMBAT_BONUS_GUARD_PURSUIT_DISTANCE_REDUCTION
* NON_COMBAT_BONUS_HAGGLING
* NON_COMBAT_BONUS_HEAT_DECAY
* NON_COMBAT_BONUS_IMPATIENCE
* NON_COMBAT_BONUS_INVALID
* NON_COMBAT_BONUS_MASTER_GATHERER
* NON_COMBAT_BONUS_MOUNTED_AGGRO_RADIUS_REDUCTION
* NON_COMBAT_BONUS_MURDER_BOUNTY_REDUCTION
* NON_COMBAT_BONUS_PICKPOCKET_CHANCE
* NON_COMBAT_BONUS_PROVISIONING_CREATE_EXTRA_DRINK
* NON_COMBAT_BONUS_PROVISIONING_CREATE_EXTRA_FOOD
* NON_COMBAT_BONUS_PROVISIONING_DRINK_DURATION
* NON_COMBAT_BONUS_PROVISIONING_FOOD_DURATION
* NON_COMBAT_BONUS_PROVISIONING_HIRELING_LEVEL
* NON_COMBAT_BONUS_PROVISIONING_LEVEL
* NON_COMBAT_BONUS_PROVISIONING_RARITY_LEVEL
* NON_COMBAT_BONUS_PROVISIONING_SHOW_NODES
* NON_COMBAT_BONUS_SECONDARY_WITNESS_RANGE_REDUCTION
* NON_COMBAT_BONUS_SHADOWY_CONNECTIONS
* NON_COMBAT_BONUS_SLY
* NON_COMBAT_BONUS_SPELLCRAFTING_ABILITIES_LEARNED
* NON_COMBAT_BONUS_SPELLCRAFTING_FOCUS_AREA
* NON_COMBAT_BONUS_SPELLCRAFTING_FOCUS_CAST_TIME
* NON_COMBAT_BONUS_SPELLCRAFTING_FOCUS_CHEAPER
* NON_COMBAT_BONUS_SPELLCRAFTING_FOCUS_DURATION
* NON_COMBAT_BONUS_SPELLCRAFTING_FOCUS_ULTIMATE
* NON_COMBAT_BONUS_SPELLCRAFTING_TABLET_CREATION_TIME
* NON_COMBAT_BONUS_SPELLCRAFTING_TABLET_QUALITY
* NON_COMBAT_BONUS_TELVAR_MULTIPLIER
* NON_COMBAT_BONUS_TIMELY_ESCAPE
* NON_COMBAT_BONUS_TRAIT_IDENTIFIER
* NON_COMBAT_BONUS_UNUSED
* NON_COMBAT_BONUS_WITNESS_RANGE_REDUCTION
* NON_COMBAT_BONUS_WOODWORKING_BOOSTER_BONUS
* NON_COMBAT_BONUS_WOODWORKING_CRAFT_PERCENT_DISCOUNT
* NON_COMBAT_BONUS_WOODWORKING_EXTRACT_LEVEL
* NON_COMBAT_BONUS_WOODWORKING_HIRELING_LEVEL
* NON_COMBAT_BONUS_WOODWORKING_LEVEL
* NON_COMBAT_BONUS_WOODWORKING_RESEARCH_LEVEL
* NON_COMBAT_BONUS_WOODWORKING_SHOW_NODES


h5. NotificationType
* NOTIFICATION_TYPE_CAMPAIGN_QUEUE
* NOTIFICATION_TYPE_COLLECTIONS
* NOTIFICATION_TYPE_CRAFT_BAG_AUTO_TRANSFER
* NOTIFICATION_TYPE_CUSTOMER_SERVICE
* NOTIFICATION_TYPE_DUEL
* NOTIFICATION_TYPE_ESO_PLUS_SUBSCRIPTION
* NOTIFICATION_TYPE_FRIEND
* NOTIFICATION_TYPE_GROUP
* NOTIFICATION_TYPE_GROUP_ELECTION
* NOTIFICATION_TYPE_GUILD
* NOTIFICATION_TYPE_GUILD_MOTD
* NOTIFICATION_TYPE_LEADERBOARD
* NOTIFICATION_TYPE_LFG
* NOTIFICATION_TYPE_PLEDGE_OF_MARA
* NOTIFICATION_TYPE_POINTS_RESET
* NOTIFICATION_TYPE_QUEST_SHARE
* NOTIFICATION_TYPE_RESURRECT
* NOTIFICATION_TYPE_SCRIPTED_WORLD_EVENT
* NOTIFICATION_TYPE_TRADE


h5. NumberAbbreviationPrecision
* NUMBER_ABBREVIATION_PRECISION_HUNDREDTHS
* NUMBER_ABBREVIATION_PRECISION_LARGEST_UNIT
* NUMBER_ABBREVIATION_PRECISION_TENTHS


h5. ObjectiveDesignation
* OBJECTIVE_DESIGNATION_A
* OBJECTIVE_DESIGNATION_B
* OBJECTIVE_DESIGNATION_C
* OBJECTIVE_DESIGNATION_D
* OBJECTIVE_DESIGNATION_NONE


h5. ObjectivePinTier
* OBJECTIVE_PIN_TIER_PRIMARY
* OBJECTIVE_PIN_TIER_RETURN
* OBJECTIVE_PIN_TIER_SPAWN


h5. ObjectiveType
* OBJECTIVE_ARTIFACT_DEFENSIVE
* OBJECTIVE_ARTIFACT_OFFENSIVE
* OBJECTIVE_ARTIFACT_RETURN
* OBJECTIVE_ASSAULT
* OBJECTIVE_BALL
* OBJECTIVE_CAPTURE_AREA
* OBJECTIVE_CAPTURE_POINT
* OBJECTIVE_FLAG_CAPTURE
* OBJECTIVE_NONE
* OBJECTIVE_RETURN


h5. OpenMarketBehavior
* OPEN_MARKET_BEHAVIOR_NAVIGATE_TO_OTHER_PRODUCT
* OPEN_MARKET_BEHAVIOR_NAVIGATE_TO_PRODUCT
* OPEN_MARKET_BEHAVIOR_SHOW_ESO_PLUS_CATEGORY
* OPEN_MARKET_BEHAVIOR_SHOW_FEATURED_CATEGORY


h5. OwnershipStatusType
* OWNERSHIP_STATUS_ANY
* OWNERSHIP_STATUS_NOT_STOLEN
* OWNERSHIP_STATUS_STOLEN


h5. PendingFeedbackType
* FEEDBACK_TYPE_INVALID
* FEEDBACK_TYPE_QUEST


h5. PickpocketDifficultyType
* PICKPOCKET_DIFFICULTY_EASY
* PICKPOCKET_DIFFICULTY_HARD
* PICKPOCKET_DIFFICULTY_INVALID
* PICKPOCKET_DIFFICULTY_MEDIUM


h5. PlatformAccountLabel
* ACCOUNT_LABEL_PC
* ACCOUNT_LABEL_PS4
* ACCOUNT_LABEL_XBOX


h5. PlatformServiceType
* PLATFORM_SERVICE_TYPE_DMM
* PLATFORM_SERVICE_TYPE_PSN
* PLATFORM_SERVICE_TYPE_STEAM
* PLATFORM_SERVICE_TYPE_XBL
* PLATFORM_SERVICE_TYPE_ZOS


h5. PlatformStoreLabel
* PLATFORM_STORE_LABEL_DMM
* PLATFORM_STORE_LABEL_PSN
* PLATFORM_STORE_LABEL_STEAM
* PLATFORM_STORE_LABEL_XBL
* PLATFORM_STORE_LABEL_ZOS


h5. PlayerEmotePlayFailure
* PLAYER_EMOTE_PLAY_FAILURE_GENERIC
* PLAYER_EMOTE_PLAY_FAILURE_LOCKED


h5. PlayerStatus
* PLAYER_STATUS_AWAY
* PLAYER_STATUS_DO_NOT_DISTURB
* PLAYER_STATUS_OFFLINE
* PLAYER_STATUS_ONLINE


h5. PledgeOfMaraResponse
* PLEDGE_OF_MARA_RESPONSE_ACCEPT
* PLEDGE_OF_MARA_RESPONSE_DECLINE


h5. PointOfInterestType
* POI_TYPE_ACHIEVEMENT
* POI_TYPE_ACHIEVEMENT_COMPONENT
* POI_TYPE_GROUP_DUNGEON
* POI_TYPE_HOUSE
* POI_TYPE_OBJECTIVE
* POI_TYPE_PUBLIC_DUNGEON
* POI_TYPE_STANDARD
* POI_TYPE_WAYSHRINE


h5. ProspectivePickpocketResult
* PROSPECTIVE_PICKPOCKET_RESULT_CAN_ATTEMPT
* PROSPECTIVE_PICKPOCKET_RESULT_COOLDOWN
* PROSPECTIVE_PICKPOCKET_RESULT_INVENTORY_FULL
* PROSPECTIVE_PICKPOCKET_RESULT_OUT_OF_POSITION
* PROSPECTIVE_PICKPOCKET_RESULT_OUT_OF_RANGE


h5. ProvisionerSpecialIngredientType
* PROVISIONER_SPECIAL_INGREDIENT_TYPE_FLAVORING
* PROVISIONER_SPECIAL_INGREDIENT_TYPE_FURNISHING
* PROVISIONER_SPECIAL_INGREDIENT_TYPE_NONE
* PROVISIONER_SPECIAL_INGREDIENT_TYPE_SPICES


h5. PvPSystem
* PVP_SYSTEM_CYRODIIL
* PVP_SYSTEM_INHERIT_FROM_KEEP
* PVP_SYSTEM_NONE


h5. RaidCategory
* RAID_CATEGORY_CHALLENGE
* RAID_CATEGORY_TRIAL


h5. RaidPointReason
* RAID_POINT_REASON_BONUS_ACTIVITY_HIGH
* RAID_POINT_REASON_BONUS_ACTIVITY_LOW
* RAID_POINT_REASON_BONUS_ACTIVITY_MEDIUM
* RAID_POINT_REASON_BONUS_POINT_ONE
* RAID_POINT_REASON_BONUS_POINT_THREE
* RAID_POINT_REASON_BONUS_POINT_TWO
* RAID_POINT_REASON_KILL_BANNERMEN
* RAID_POINT_REASON_KILL_BOSS
* RAID_POINT_REASON_KILL_CHAMPION
* RAID_POINT_REASON_KILL_MINIBOSS
* RAID_POINT_REASON_KILL_NORMAL_MONSTER
* RAID_POINT_REASON_KILL_NOXP_MONSTER
* RAID_POINT_REASON_LIFE_REMAINING
* RAID_POINT_REASON_SOLO_ARENA_COMPLETE
* RAID_POINT_REASON_SOLO_ARENA_PICKUP_FOUR
* RAID_POINT_REASON_SOLO_ARENA_PICKUP_ONE
* RAID_POINT_REASON_SOLO_ARENA_PICKUP_THREE
* RAID_POINT_REASON_SOLO_ARENA_PICKUP_TWO


h5. RatingsBoard
* RATINGS_BOARD_BR
* RATINGS_BOARD_ESRB
* RATINGS_BOARD_FPB
* RATINGS_BOARD_NONE
* RATINGS_BOARD_OFLC
* RATINGS_BOARD_PEGI
* RATINGS_BOARD_RR
* RATINGS_BOARD_USK


h5. RecipeCraftingSystem
* RECIPE_CRAFTING_SYSTEM_ALCHEMY_FORMULAE
* RECIPE_CRAFTING_SYSTEM_BLACKSMITHING_DIAGRAMS
* RECIPE_CRAFTING_SYSTEM_CLOTHIER_PATTERNS
* RECIPE_CRAFTING_SYSTEM_ENCHANTING_SCHEMATICS
* RECIPE_CRAFTING_SYSTEM_INVALID
* RECIPE_CRAFTING_SYSTEM_PROVISIONING_DESIGNS
* RECIPE_CRAFTING_SYSTEM_WOODWORKING_BLUEPRINTS


h5. RegisterForEventFilterType
* REGISTER_FILTER_ABILITY_ID
* REGISTER_FILTER_BAG_ID
* REGISTER_FILTER_COMBAT_RESULT
* REGISTER_FILTER_INVALID
* REGISTER_FILTER_INVENTORY_UPDATE_REASON
* REGISTER_FILTER_IS_ERROR
* REGISTER_FILTER_IS_IN_GAMEPAD_PREFERRED_MODE
* REGISTER_FILTER_IS_NEW_ITEM
* REGISTER_FILTER_POWER_TYPE
* REGISTER_FILTER_SETTING_SYSTEM_TYPE
* REGISTER_FILTER_SOURCE_COMBAT_UNIT_TYPE
* REGISTER_FILTER_TARGET_COMBAT_UNIT_TYPE
* REGISTER_FILTER_UNIT_TAG
* REGISTER_FILTER_UNIT_TAG_PREFIX
* REGISTER_FILTER_VIBRATION_FILTER


h5. RemoteSceneStateChangeOrigin
* REMOTE_SCENE_STATE_CHANGE_ORIGIN_INGAME
* REMOTE_SCENE_STATE_CHANGE_ORIGIN_INTERNAL
* REMOTE_SCENE_STATE_CHANGE_ORIGIN_PREGAME


h5. RemoteSceneStateChangeType
* REMOTE_SCENE_STATE_CHANGE_TYPE_HIDE
* REMOTE_SCENE_STATE_CHANGE_TYPE_POP
* REMOTE_SCENE_STATE_CHANGE_TYPE_PUSH
* REMOTE_SCENE_STATE_CHANGE_TYPE_SHOW
* REMOTE_SCENE_STATE_CHANGE_TYPE_SWAP


h5. ReportPlayerReason
* REPORT_PLAYER_REASON_BEHAVIOR
* REPORT_PLAYER_REASON_BOTTING
* REPORT_PLAYER_REASON_CHAT_SPAM
* REPORT_PLAYER_REASON_FRIEND_REQUEST_SPAM
* REPORT_PLAYER_REASON_GUILD_REQUEST_SPAM
* REPORT_PLAYER_REASON_MAIL_SPAM


h5. RequestReadMailResult
* REQUEST_READ_MAIL_RESULT_ALREADY_REQUESTED
* REQUEST_READ_MAIL_RESULT_NOT_IN_MAIL_INTERACTION
* REQUEST_READ_MAIL_RESULT_NO_SUCH_MAIL
* REQUEST_READ_MAIL_RESULT_SUCCESS_CACHED
* REQUEST_READ_MAIL_RESULT_SUCCESS_SERVER_REQUESTED


h5. RewardItemType
* REWARD_ITEM_TYPE_COLLECTIBLE
* REWARD_ITEM_TYPE_ITEM


h5. RewardType
* REWARD_TYPE_ALLIANCE_POINTS
* REWARD_TYPE_AUTO_ITEM
* REWARD_TYPE_INSPIRATION
* REWARD_TYPE_MONEY
* REWARD_TYPE_NONE
* REWARD_TYPE_PARTIAL_SKILL_POINTS
* REWARD_TYPE_SKILL_LINE
* REWARD_TYPE_TELVAR_STONES
* REWARD_TYPE_UNUSED3
* REWARD_TYPE_WRIT_VOUCHERS


h5. RidingTrainSource
* RIDING_TRAIN_SOURCE_INITIALIZE
* RIDING_TRAIN_SOURCE_ITEM
* RIDING_TRAIN_SOURCE_STABLES


h5. RidingTrainType
* RIDING_TRAIN_CARRYING_CAPACITY
* RIDING_TRAIN_INVALID
* RIDING_TRAIN_SPEED
* RIDING_TRAIN_STAMINA


h5. SCTEventType
* SCT_EVENT_TYPE_ABSORBED
* SCT_EVENT_TYPE_ALLIANCE_POINTS
* SCT_EVENT_TYPE_BLADETURN
* SCT_EVENT_TYPE_BLOCKED
* SCT_EVENT_TYPE_BLOCKED_DAMAGE
* SCT_EVENT_TYPE_DAMAGE
* SCT_EVENT_TYPE_DAMAGE_CRIT
* SCT_EVENT_TYPE_DAMAGE_IMMUNE
* SCT_EVENT_TYPE_DAMAGE_SHIELDED
* SCT_EVENT_TYPE_DEBUG_MESSAGE
* SCT_EVENT_TYPE_DEFENDED
* SCT_EVENT_TYPE_DISARMED
* SCT_EVENT_TYPE_DISORIENTED
* SCT_EVENT_TYPE_DODGED
* SCT_EVENT_TYPE_DOT_IMMUNE
* SCT_EVENT_TYPE_DOT_TICK
* SCT_EVENT_TYPE_DOT_TICK_CRIT
* SCT_EVENT_TYPE_EXPERIENCE_POINTS
* SCT_EVENT_TYPE_FALL_DAMAGE
* SCT_EVENT_TYPE_FEARED
* SCT_EVENT_TYPE_HEAL
* SCT_EVENT_TYPE_HEAL_CRIT
* SCT_EVENT_TYPE_HOT_TICK
* SCT_EVENT_TYPE_HOT_TICK_CRIT
* SCT_EVENT_TYPE_IMMUNE
* SCT_EVENT_TYPE_INTERCEPTED
* SCT_EVENT_TYPE_INTERRUPT
* SCT_EVENT_TYPE_KNOCKBACK
* SCT_EVENT_TYPE_LEVITATED
* SCT_EVENT_TYPE_MISS
* SCT_EVENT_TYPE_NONE
* SCT_EVENT_TYPE_OFFBALANCE
* SCT_EVENT_TYPE_PACIFIED
* SCT_EVENT_TYPE_PARRIED
* SCT_EVENT_TYPE_PARTIAL_RESIST
* SCT_EVENT_TYPE_REFLECTED
* SCT_EVENT_TYPE_RESIST
* SCT_EVENT_TYPE_ROOTED
* SCT_EVENT_TYPE_SILENCED
* SCT_EVENT_TYPE_SNARED
* SCT_EVENT_TYPE_SPEED_BOOST
* SCT_EVENT_TYPE_SST_COMBAT
* SCT_EVENT_TYPE_SST_MOVEMENT
* SCT_EVENT_TYPE_SST_STATE
* SCT_EVENT_TYPE_STAGGERED
* SCT_EVENT_TYPE_STUNNED
* SCT_EVENT_TYPE_WEAPONSWAP
* SCT_EVENT_TYPE_WRONG_WEAPON


h5. SaveLoadDialogAnswer
* SLD_ANSWER_NO
* SLD_ANSWER_YES


h5. SaveLoadDialogError
* SLD_ERROR_ALLOW_OVERWRITE
* SLD_ERROR_FAILED_LOAD
* SLD_ERROR_FAILED_SAVE
* SLD_ERROR_FILE_CORRUPT
* SLD_ERROR_NO_SAVE_CREATED
* SLD_ERROR_NO_SAVE_DEVICE_SELECTED
* SLD_ERROR_OUT_OF_SPACE
* SLD_ERROR_SAVE_DEST_REMOVED


h5. ScaleLevelConstraintType
* SCALE_LEVEL_CONSTRAINT_CHAMPION_RANK_MIN_CHAMPION_RANK_MAX
* SCALE_LEVEL_CONSTRAINT_NORMAL_MIN_CHAMPION_RANK_MAX
* SCALE_LEVEL_CONSTRAINT_NORMAL_MIN_NORMAL_MAX


h5. ScoreTrackerEntryType
* SCORE_TRACKER_TYPE_ASSISTS
* SCORE_TRACKER_TYPE_CAPTURE_DEFENSE_POINTS
* SCORE_TRACKER_TYPE_CAPTURE_KILLED_ATTACKER
* SCORE_TRACKER_TYPE_CAPTURE_KILLED_DEFENDER
* SCORE_TRACKER_TYPE_DAMAGED_FLAG_CARRIER
* SCORE_TRACKER_TYPE_DAMAGE_DONE
* SCORE_TRACKER_TYPE_DAMAGE_TAKEN
* SCORE_TRACKER_TYPE_DEATH
* SCORE_TRACKER_TYPE_FLAG_CAPTURED
* SCORE_TRACKER_TYPE_FLAG_CARRIED_TIME
* SCORE_TRACKER_TYPE_HEALED_FLAG_CARRIER
* SCORE_TRACKER_TYPE_HEALING_DEFENDERS
* SCORE_TRACKER_TYPE_HEALING_DONE
* SCORE_TRACKER_TYPE_KILL
* SCORE_TRACKER_TYPE_KILLED_FLAG_CARRIER
* SCORE_TRACKER_TYPE_KILL_STREAK
* SCORE_TRACKER_TYPE_NONE
* SCORE_TRACKER_TYPE_SCORE


h5. ServiceTokenType
* SERVICE_TOKEN_APPEARANCE_CHANGE
* SERVICE_TOKEN_NAME_CHANGE
* SERVICE_TOKEN_NONE
* SERVICE_TOKEN_RACE_CHANGE


h5. SkillGrowthType
* SKILL_GROWTH_TYPE_AP
* SKILL_GROWTH_TYPE_EXP
* SKILL_GROWTH_TYPE_INSPIRATION
* SKILL_GROWTH_TYPE_JUSTICE_THIEF
* SKILL_GROWTH_TYPE_KEEP
* SKILL_GROWTH_TYPE_SIEGE


h5. SkillType
* SKILL_TYPE_ARMOR
* SKILL_TYPE_AVA
* SKILL_TYPE_CHAMPION
* SKILL_TYPE_CLASS
* SKILL_TYPE_GUILD
* SKILL_TYPE_NONE
* SKILL_TYPE_RACIAL
* SKILL_TYPE_TRADESKILL
* SKILL_TYPE_WEAPON
* SKILL_TYPE_WORLD


h5. SpamWarningType
* SPAM_WARNING_TYPE_ACTION_SLOTS
* SPAM_WARNING_TYPE_CHAT_MESSAGE
* SPAM_WARNING_TYPE_GUILD_BANK_SELECTOR
* SPAM_WARNING_TYPE_GUILD_DESCRIPTION
* SPAM_WARNING_TYPE_GUILD_MOTD
* SPAM_WARNING_TYPE_GUILD_RANK_CHANGE
* SPAM_WARNING_TYPE_HOUSE_SAFE_LOC
* SPAM_WARNING_TYPE_NONE
* SPAM_WARNING_TYPE_TRADE_INVENTORY


h5. StatBonusOption
* STAT_BONUS_OPTION_APPLY_BONUS
* STAT_BONUS_OPTION_DONT_APPLY_BONUS


h5. StatusEffectType
* STATUS_EFFECT_TYPE_BLEED
* STATUS_EFFECT_TYPE_BLIND
* STATUS_EFFECT_TYPE_CHARM
* STATUS_EFFECT_TYPE_DAZED
* STATUS_EFFECT_TYPE_DISEASE
* STATUS_EFFECT_TYPE_ENVIRONMENT
* STATUS_EFFECT_TYPE_FEAR
* STATUS_EFFECT_TYPE_LEVITATE
* STATUS_EFFECT_TYPE_MAGIC
* STATUS_EFFECT_TYPE_MESMERIZE
* STATUS_EFFECT_TYPE_NEARSIGHT
* STATUS_EFFECT_TYPE_NONE
* STATUS_EFFECT_TYPE_PACIFY
* STATUS_EFFECT_TYPE_POISON
* STATUS_EFFECT_TYPE_PUNCTURE
* STATUS_EFFECT_TYPE_ROOT
* STATUS_EFFECT_TYPE_SILENCE
* STATUS_EFFECT_TYPE_SNARE
* STATUS_EFFECT_TYPE_STUN
* STATUS_EFFECT_TYPE_TRAUMA
* STATUS_EFFECT_TYPE_WEAKNESS
* STATUS_EFFECT_TYPE_WOUND


h5. StoreEntryType
* STORE_ENTRY_TYPE_COLLECTIBLE
* STORE_ENTRY_TYPE_HOUSE_WITH_TEMPLATE
* STORE_ENTRY_TYPE_INTERACTABLE
* STORE_ENTRY_TYPE_ITEM
* STORE_ENTRY_TYPE_MONSTER
* STORE_ENTRY_TYPE_QUEST_ITEM
* STORE_ENTRY_TYPE_SUBSTORE


h5. TooltipGameDataType
* TOOLTIP_GAME_DATA_CHARGES
* TOOLTIP_GAME_DATA_CONDITION
* TOOLTIP_GAME_DATA_DIVIDER
* TOOLTIP_GAME_DATA_EQUIPPED_INFO
* TOOLTIP_GAME_DATA_ITEM_ICON
* TOOLTIP_GAME_DATA_NONE
* TOOLTIP_GAME_DATA_PROGRESSION
* TOOLTIP_GAME_DATA_SKILL_UPGRADE
* TOOLTIP_GAME_DATA_STOLEN


h5. TradeskillType
* CRAFTING_TYPE_ALCHEMY
* CRAFTING_TYPE_BLACKSMITHING
* CRAFTING_TYPE_CLOTHIER
* CRAFTING_TYPE_ENCHANTING
* CRAFTING_TYPE_INVALID
* CRAFTING_TYPE_PROVISIONING
* CRAFTING_TYPE_WOODWORKING


h5. TutorialShowOptions
* TUTORIAL_SHOW_OPTIONS_ALL
* TUTORIAL_SHOW_OPTIONS_GAMEPAD
* TUTORIAL_SHOW_OPTIONS_KEYBOARD


h5. TutorialTrigger
* TUTORIAL_TRIGGER_ABILITY_PURCHASED_TIMELY_ESCAPE
* TUTORIAL_TRIGGER_ACCOUNT_BANK_OPENED
* TUTORIAL_TRIGGER_ACHIEVEMENTS_OPENED
* TUTORIAL_TRIGGER_ACQUIRED_COLLECTIBLE
* TUTORIAL_TRIGGER_ALCHEMY_OPENED
* TUTORIAL_TRIGGER_ALCHEMY_STATION_OIL_SLOTTED
* TUTORIAL_TRIGGER_ATTEMPTED_TO_FISH_WITHOUT_BAIT
* TUTORIAL_TRIGGER_AVA_FAST_TRAVEL
* TUTORIAL_TRIGGER_BANK_FULL_NO_ESO_PLUS
* TUTORIAL_TRIGGER_BANK_OPENED_AS_SUBSCRIBER
* TUTORIAL_TRIGGER_BANK_OVERFULL
* TUTORIAL_TRIGGER_BATTLE_LEVEL_ZONE_ENTERED
* TUTORIAL_TRIGGER_BATTLE_LEVEL_ZONE_ENTERED_VETERAN
* TUTORIAL_TRIGGER_BLACKSMITHING_CREATION_OPENED
* TUTORIAL_TRIGGER_BLACKSMITHING_DECONSTRUCTION_OPENED
* TUTORIAL_TRIGGER_BLACKSMITHING_IMPROVEMENT_OPENED
* TUTORIAL_TRIGGER_BLACKSMITHING_REFINEMENT_OPENED
* TUTORIAL_TRIGGER_BLACKSMITHING_RESEARCH_OPENED
* TUTORIAL_TRIGGER_BOUNTY_ADDED
* TUTORIAL_TRIGGER_CADWELLS_ALMANAC_OPENED
* TUTORIAL_TRIGGER_CAMPAIGN_AVAILABLE_TO_ENTER
* TUTORIAL_TRIGGER_CAMPAIGN_BROWSER_OPENED
* TUTORIAL_TRIGGER_CAMPAIGN_OVERVIEW_OPENED
* TUTORIAL_TRIGGER_CHAMPION_POINT_GAINED
* TUTORIAL_TRIGGER_CHAMPION_RANK_UP
* TUTORIAL_TRIGGER_CHAMPION_SYSTEM_UNLOCKED
* TUTORIAL_TRIGGER_CHAMPION_UI_SHOWN
* TUTORIAL_TRIGGER_CLOTHIER_CREATION_OPENED
* TUTORIAL_TRIGGER_CLOTHIER_DECONSTRUCTION_OPENED
* TUTORIAL_TRIGGER_CLOTHIER_IMPROVEMENT_OPENED
* TUTORIAL_TRIGGER_CLOTHIER_REFINEMENT_OPENED
* TUTORIAL_TRIGGER_CLOTHIER_RESEARCH_OPENED
* TUTORIAL_TRIGGER_COLLECTIONS_DLC_OPENED_AS_SUBSCRIBER
* TUTORIAL_TRIGGER_COLLECTIONS_OPENED
* TUTORIAL_TRIGGER_COMBAT_MONSTER_DIFFICULTY
* TUTORIAL_TRIGGER_COMBAT_ROOTED
* TUTORIAL_TRIGGER_COMBAT_SKILLS_OPENED
* TUTORIAL_TRIGGER_COMBAT_STATUS_EFFECT
* TUTORIAL_TRIGGER_COMBAT_STUNNED
* TUTORIAL_TRIGGER_CONTACTS_OPENED
* TUTORIAL_TRIGGER_CONTROLLING_SIEGE
* TUTORIAL_TRIGGER_CRAFT_BAG_ITEM_GAINED
* TUTORIAL_TRIGGER_CRAFT_BAG_OPENED
* TUTORIAL_TRIGGER_CROWN_CONSUMABLE_PURCHASED
* TUTORIAL_TRIGGER_CROWN_CRATE_UI_OPENED
* TUTORIAL_TRIGGER_CROWN_GEMS_GAINED
* TUTORIAL_TRIGGER_CROWN_STORE_PRODUCT_PURCHASED_1
* TUTORIAL_TRIGGER_CROWN_STORE_PRODUCT_PURCHASED_10
* TUTORIAL_TRIGGER_CROWN_STORE_PRODUCT_PURCHASED_2
* TUTORIAL_TRIGGER_CROWN_STORE_PRODUCT_PURCHASED_3
* TUTORIAL_TRIGGER_CROWN_STORE_PRODUCT_PURCHASED_4
* TUTORIAL_TRIGGER_CROWN_STORE_PRODUCT_PURCHASED_5
* TUTORIAL_TRIGGER_CROWN_STORE_PRODUCT_PURCHASED_6
* TUTORIAL_TRIGGER_CROWN_STORE_PRODUCT_PURCHASED_7
* TUTORIAL_TRIGGER_CROWN_STORE_PRODUCT_PURCHASED_8
* TUTORIAL_TRIGGER_CROWN_STORE_PRODUCT_PURCHASED_9
* TUTORIAL_TRIGGER_DAILY_QUEST_ADDED
* TUTORIAL_TRIGGER_DAMAGED_EQUIPMENT_REDUCING_EFFECTIVENESS
* TUTORIAL_TRIGGER_DEATH_AVA
* TUTORIAL_TRIGGER_DEATH_PVE
* TUTORIAL_TRIGGER_DECONSTRUCTION_LEVEL_PENALTY
* TUTORIAL_TRIGGER_DEPRECATED1
* TUTORIAL_TRIGGER_DEPRECATED2
* TUTORIAL_TRIGGER_DISCOVERED_GROUP_DUNGEON
* TUTORIAL_TRIGGER_DISCOVERED_PUBLIC_DUNGEON
* TUTORIAL_TRIGGER_DISREPUTABLE_REACHED
* TUTORIAL_TRIGGER_DYEING_OPENED
* TUTORIAL_TRIGGER_DYEING_OPENED_AS_SUBSCRIBER
* TUTORIAL_TRIGGER_DYE_STAMP_CONFIRMATION_SEEN
* TUTORIAL_TRIGGER_EARNED_ALLIANCE_POINTS
* TUTORIAL_TRIGGER_EIDETIC_MEMORY
* TUTORIAL_TRIGGER_EMOTES_MENU_OPENED
* TUTORIAL_TRIGGER_ENCHANTING_CREATION_OPENED
* TUTORIAL_TRIGGER_ENCHANTING_EXTRACTION_OPENED
* TUTORIAL_TRIGGER_ENLIGHTENED_STATE_GAINED
* TUTORIAL_TRIGGER_ENLIGHTENED_STATE_LOST
* TUTORIAL_TRIGGER_ENTERED_BATTLEGROUND_CAPTURE_THE_FLAG
* TUTORIAL_TRIGGER_ENTERED_BATTLEGROUND_CRAZY_KING
* TUTORIAL_TRIGGER_ENTERED_BATTLEGROUND_DEATHMATCH
* TUTORIAL_TRIGGER_ENTERED_BATTLEGROUND_DOMINATION
* TUTORIAL_TRIGGER_ENTERED_BATTLEGROUND_KING_OF_THE_HILL
* TUTORIAL_TRIGGER_ENTERED_BATTLEGROUND_MURDERBALL
* TUTORIAL_TRIGGER_ENTERED_EDITABLE_HOME
* TUTORIAL_TRIGGER_ENTERED_OBJECTIVE_CAPTURE_AREA
* TUTORIAL_TRIGGER_ENTERED_OWNED_HOUSE_AS_SUBSCRIBER
* TUTORIAL_TRIGGER_EQUIPMENT_DAMAGED
* TUTORIAL_TRIGGER_EQUIPMENT_OUT_OF_CHARGES
* TUTORIAL_TRIGGER_EQUIPPED_ANY_ARMOR
* TUTORIAL_TRIGGER_EQUIPPED_ANY_WEAPON
* TUTORIAL_TRIGGER_FENCE_OPENED
* TUTORIAL_TRIGGER_FUGITIVE_REACHED
* TUTORIAL_TRIGGER_GAINED_BATTLE_STANDARD_ITEM
* TUTORIAL_TRIGGER_GAINED_BIND_ON_EQUIP_ITEM
* TUTORIAL_TRIGGER_GAINED_CRAFTING_MATERIAL
* TUTORIAL_TRIGGER_GAINED_DISGUISE
* TUTORIAL_TRIGGER_GAINED_EMPTY_SOUL_GEM
* TUTORIAL_TRIGGER_GAINED_FORWARD_CAMP_ITEM
* TUTORIAL_TRIGGER_GAINED_SIEGE_BALLISTA_ITEM
* TUTORIAL_TRIGGER_GAINED_SIEGE_CATAPULT_ITEM
* TUTORIAL_TRIGGER_GAINED_SIEGE_MASONRY_KIT
* TUTORIAL_TRIGGER_GAINED_SIEGE_MONSTER_ITEM
* TUTORIAL_TRIGGER_GAINED_SIEGE_OIL_ITEM
* TUTORIAL_TRIGGER_GAINED_SIEGE_RAM_ITEM
* TUTORIAL_TRIGGER_GAINED_SIEGE_TREBUCHET_ITEM
* TUTORIAL_TRIGGER_GAINED_SIEGE_WOODWORKING_KIT
* TUTORIAL_TRIGGER_GAINED_SOUL_GEM
* TUTORIAL_TRIGGER_GROUP_CHAT
* TUTORIAL_TRIGGER_GROUP_TOOLS_OPENED
* TUTORIAL_TRIGGER_GUILDS_HERALDRY_OPENED
* TUTORIAL_TRIGGER_GUILDS_HOME_OPENED
* TUTORIAL_TRIGGER_GUILDS_ROSTER_OPENED
* TUTORIAL_TRIGGER_GUILD_BANK_OPENED
* TUTORIAL_TRIGGER_GUILD_CHAT
* TUTORIAL_TRIGGER_HELP_CUSTOMER_SUPPORT_OPENED
* TUTORIAL_TRIGGER_HELP_TUTORIALS_OPENED
* TUTORIAL_TRIGGER_IMPORTANT_DIALOGUE
* TUTORIAL_TRIGGER_INCOMING_PLAYER_TO_PLAYER_NOTIFICATION
* TUTORIAL_TRIGGER_INVENTORY_FULL
* TUTORIAL_TRIGGER_INVENTORY_OPENED
* TUTORIAL_TRIGGER_INVENTORY_OPENED_AND_QUICKSLOTS_AVAILABLE
* TUTORIAL_TRIGGER_INVENTORY_OPENED_AND_STOLEN_ITEMS_PRESENT
* TUTORIAL_TRIGGER_INVENTORY_OPENED_AND_WEAPON_SETS_AVAILABLE
* TUTORIAL_TRIGGER_JOURNAL_OPENED
* TUTORIAL_TRIGGER_LAUNDER_OPENED
* TUTORIAL_TRIGGER_LEADERBOARDS_OPENED
* TUTORIAL_TRIGGER_LEVEL_UP
* TUTORIAL_TRIGGER_LIVESTOCK_TARGETED
* TUTORIAL_TRIGGER_LOCKPICKING_OPENED
* TUTORIAL_TRIGGER_LORE_LIBRARY_OPENED
* TUTORIAL_TRIGGER_MAELSTROM_ARENA_ZONE_ENTERED
* TUTORIAL_TRIGGER_MAIL_OPENED
* TUTORIAL_TRIGGER_MAIL_OPENED_AND_FULL
* TUTORIAL_TRIGGER_MAP_OPENED_AVA
* TUTORIAL_TRIGGER_MAP_OPENED_BATTLEGROUND
* TUTORIAL_TRIGGER_MAP_OPENED_PVE
* TUTORIAL_TRIGGER_MARKET_OPENED
* TUTORIAL_TRIGGER_MOUNTED
* TUTORIAL_TRIGGER_MOUNT_SET
* TUTORIAL_TRIGGER_NONE
* TUTORIAL_TRIGGER_NON_SUBSCRIBER_LIMIT_REACHED
* TUTORIAL_TRIGGER_NOTIFICATIONS_OPENED
* TUTORIAL_TRIGGER_NOTORIOUS_REACHED
* TUTORIAL_TRIGGER_OPENED_EDITOR
* TUTORIAL_TRIGGER_OWNED_LOCK_VIEWED
* TUTORIAL_TRIGGER_PICKPOCKET_PROMPT_VIEWED
* TUTORIAL_TRIGGER_POISON_EQUIPPED
* TUTORIAL_TRIGGER_PROVISIONING_OPENED
* TUTORIAL_TRIGGER_PURCHASED_ABILITY
* TUTORIAL_TRIGGER_PURCHASED_PASSIVE_ABILITY
* TUTORIAL_TRIGGER_PURCHASED_ULTIMATE_ABILITY
* TUTORIAL_TRIGGER_PVE_FAST_TRAVEL
* TUTORIAL_TRIGGER_RAID_TRIAL_COMPLETED
* TUTORIAL_TRIGGER_RAID_TRIAL_FAILED
* TUTORIAL_TRIGGER_RAID_TRIAL_STARTED
* TUTORIAL_TRIGGER_RECEIVED_MAIL
* TUTORIAL_TRIGGER_RECEIVED_WHISPER
* TUTORIAL_TRIGGER_REFUGE_ENTERED
* TUTORIAL_TRIGGER_RIDING_SKILL_MANAGEMENT_OPENED
* TUTORIAL_TRIGGER_SCALEABLE_REGION_ENTERED
* TUTORIAL_TRIGGER_SKYSHARDS_DISCOVERED
* TUTORIAL_TRIGGER_STATS_OPENED
* TUTORIAL_TRIGGER_STATS_OPENED_AND_ATTRIBUTE_POINTS_UNSPENT
* TUTORIAL_TRIGGER_STOLEN_ITEM_EQUIPPED
* TUTORIAL_TRIGGER_STOLEN_ITEM_TARGETED
* TUTORIAL_TRIGGER_STORE_OPENED
* TUTORIAL_TRIGGER_TELVAR_STONES_GAINED
* TUTORIAL_TRIGGER_TELVAR_THRESHOLD_CROSSED
* TUTORIAL_TRIGGER_TELVAR_ZONE_ENTERED
* TUTORIAL_TRIGGER_TRADESKILLS_OPENED
* TUTORIAL_TRIGGER_TRADE_OPENED
* TUTORIAL_TRIGGER_TRESPASS_SUBZONE_ENTERED
* TUTORIAL_TRIGGER_TRESPASS_SUBZONE_EXITED_WITH_BOUNTY
* TUTORIAL_TRIGGER_TWO_FAST_TRAVEL_NODES
* TUTORIAL_TRIGGER_ULTIMATE_AVAILABLE
* TUTORIAL_TRIGGER_UNIVERSAL_STYLE_ITEM
* TUTORIAL_TRIGGER_VOICE_CHAT_OPEN_CHANNELS
* TUTORIAL_TRIGGER_VOICE_CHAT_OPEN_HISTORY
* TUTORIAL_TRIGGER_WEAPON_SWAPPING_UNLOCKED
* TUTORIAL_TRIGGER_WOODWORKING_CREATION_OPENED
* TUTORIAL_TRIGGER_WOODWORKING_DECONSTRUCTION_OPENED
* TUTORIAL_TRIGGER_WOODWORKING_IMPROVEMENT_OPENED
* TUTORIAL_TRIGGER_WOODWORKING_REFINEMENT_OPENED
* TUTORIAL_TRIGGER_WOODWORKING_RESEARCH_OPENED
* TUTORIAL_TRIGGER_YOUR_GROUP_OPENED


h5. TutorialType
* TUTORIAL_TYPE_DEPRECATED_3
* TUTORIAL_TYPE_HUD_BRIEF
* TUTORIAL_TYPE_HUD_INFO_BOX
* TUTORIAL_TYPE_UI_INFO_BOX


h5. UIAlertCategory
* UI_ALERT_CATEGORY_ALERT
* UI_ALERT_CATEGORY_ERROR


h5. UIMapType
* MAPTYPE_ALLIANCE
* MAPTYPE_COSMIC
* MAPTYPE_NONE
* MAPTYPE_SUBZONE
* MAPTYPE_WORLD
* MAPTYPE_ZONE


h5. UIMonsterDifficulty
* MONSTER_DIFFICULTY_DEADLY
* MONSTER_DIFFICULTY_EASY
* MONSTER_DIFFICULTY_HARD
* MONSTER_DIFFICULTY_NONE
* MONSTER_DIFFICULTY_NORMAL


h5. UIPlatform
* UI_PLATFORM_PC
* UI_PLATFORM_PS4
* UI_PLATFORM_XBOX


h5. UIWorldEffect
* UI_WORLD_EFFECT_ENEMY_TELEGRAPH
* UI_WORLD_EFFECT_FRIENDLY_TELEGRAPH


h5. UnitAttributeVisual
* ATTRIBUTE_VISUAL_AUTOMATIC
* ATTRIBUTE_VISUAL_DECREASED_MAX_POWER
* ATTRIBUTE_VISUAL_DECREASED_REGEN_POWER
* ATTRIBUTE_VISUAL_DECREASED_STAT
* ATTRIBUTE_VISUAL_INCREASED_MAX_POWER
* ATTRIBUTE_VISUAL_INCREASED_REGEN_POWER
* ATTRIBUTE_VISUAL_INCREASED_STAT
* ATTRIBUTE_VISUAL_NONE
* ATTRIBUTE_VISUAL_POSSESSION
* ATTRIBUTE_VISUAL_POWER_SHIELDING
* ATTRIBUTE_VISUAL_UNWAVERING_POWER


h5. UnitEndCastReason
* END_CAST_REASON_COMPLETED
* END_CAST_REASON_FAILED
* END_CAST_REASON_INTERRUPTED
* END_CAST_REASON_PLAYER_CANCELLED


h5. UnitNameplateType
* UNIT_NAMEPLATE_ALLY_GROUP
* UNIT_NAMEPLATE_ALLY_GROUP_TARGET
* UNIT_NAMEPLATE_ALLY_NPC
* UNIT_NAMEPLATE_ALLY_NPC_TARGET
* UNIT_NAMEPLATE_ALLY_PLAYER
* UNIT_NAMEPLATE_ALLY_PLAYER_TARGET
* UNIT_NAMEPLATE_DEAD
* UNIT_NAMEPLATE_DEAD_TARGET
* UNIT_NAMEPLATE_DEFAULT
* UNIT_NAMEPLATE_DEFAULT_TARGET
* UNIT_NAMEPLATE_ENEMY_NPC_FRIENDLY
* UNIT_NAMEPLATE_ENEMY_NPC_FRIENDLY_TARGET
* UNIT_NAMEPLATE_ENEMY_NPC_HOSTILE
* UNIT_NAMEPLATE_ENEMY_NPC_HOSTILE_TARGET
* UNIT_NAMEPLATE_ENEMY_NPC_IN_COMBAT_WITH_LOCAL_PLAYER
* UNIT_NAMEPLATE_ENEMY_NPC_IN_COMBAT_WITH_LOCAL_PLAYER_JUSTICE_NEUTRAL
* UNIT_NAMEPLATE_ENEMY_NPC_IN_COMBAT_WITH_LOCAL_PLAYER_JUSTICE_NEUTRAL_TARGET
* UNIT_NAMEPLATE_ENEMY_NPC_IN_COMBAT_WITH_LOCAL_PLAYER_TARGET
* UNIT_NAMEPLATE_ENEMY_NPC_JUSTICE_NEUTRAL
* UNIT_NAMEPLATE_ENEMY_NPC_JUSTICE_NEUTRAL_IGNORE_COMBAT
* UNIT_NAMEPLATE_ENEMY_NPC_JUSTICE_NEUTRAL_IGNORE_COMBAT_TARGET
* UNIT_NAMEPLATE_ENEMY_NPC_JUSTICE_NEUTRAL_TARGET
* UNIT_NAMEPLATE_ENEMY_NPC_NEUTRAL
* UNIT_NAMEPLATE_ENEMY_NPC_NEUTRAL_TARGET
* UNIT_NAMEPLATE_ENEMY_PLAYER_NO_PVP
* UNIT_NAMEPLATE_ENEMY_PLAYER_NO_PVP_TARGET
* UNIT_NAMEPLATE_ENEMY_PLAYER_PVP
* UNIT_NAMEPLATE_ENEMY_PLAYER_PVP_TARGET


h5. UnitReactionType
* UNIT_REACTION_DEFAULT
* UNIT_REACTION_FRIENDLY
* UNIT_REACTION_HOSTILE
* UNIT_REACTION_NEUTRAL
* UNIT_REACTION_NPC_ALLY
* UNIT_REACTION_PLAYER_ALLY


h5. VideoSkipMode
* VIDEO_SKIP_MODE_ALLOW_SKIP
* VIDEO_SKIP_MODE_NO_SKIP
* VIDEO_SKIP_MODE_REQUIRE_CONFIRMATION_FOR_SKIP


h5. VoiceChannelType
* VOICE_CHANNEL_ALL
* VOICE_CHANNEL_AREA
* VOICE_CHANNEL_BATTLEGROUP
* VOICE_CHANNEL_GROUP
* VOICE_CHANNEL_GUILD
* VOICE_CHANNEL_NONE


h5. VoiceChatSpeakState
* VOICE_CHAT_SPEAK_STATE_IDLE
* VOICE_CHAT_SPEAK_STATE_MUTED
* VOICE_CHAT_SPEAK_STATE_NONE
* VOICE_CHAT_SPEAK_STATE_SPEAKING


h5. Globals
* ACTION_BAR_CLASS_BAR_SIZE
* ACTION_BAR_EMOTE_QUICK_SLOT_SIZE
* ACTION_BAR_FIRST_CLASS_BAR_SLOT
* ACTION_BAR_FIRST_EMOTE_QUICK_SLOT_INDEX
* ACTION_BAR_FIRST_LOCKED_SLOT
* ACTION_BAR_FIRST_NORMAL_SLOT_INDEX
* ACTION_BAR_FIRST_SIEGE_BAR_SLOT
* ACTION_BAR_FIRST_UTILITY_BAR_SLOT
* ACTION_BAR_FIRST_WEAPON_SLOT_INDEX
* ACTION_BAR_LAST_MAIN_BAR_SLOT
* ACTION_BAR_LAST_WEAPON_SLOT_INDEX
* ACTION_BAR_NUM_PAGES
* ACTION_BAR_NUM_SLOTS
* ACTION_BAR_QUICK_SLOT_INDEX
* ACTION_BAR_SIEGE_BAR_SIZE
* ACTION_BAR_SLOTS_PER_PAGE
* ACTION_BAR_ULTIMATE_SLOT_INDEX
* ACTION_BAR_UTILITY_BAR_SIZE
* DISPLAY_NAME_PREFIX_BYTE
* GROUP_SIZE_MAX
* INVALID_DYE_ID
* INVALID_EXPLORATION_INDEX
* MAIL_MAX_ATTACHED_ITEMS
* MAX_BOSSES
* MAXIMUM_CHAMPION_RANK
* MAX_PLAYER_CURRENCY
* MAX_GUILD_RANKS
* MAX_KEEP_UPGRADE_LEVELS
* MAX_CROWN_CRATE_REWARD_SLOTS
* NUM_POWER_POOLS
* MAX_STORE_WINDOW_STACK_QUANTITY
* MIN_REQUIRED_LEVEL_TO_CREATE_GUILD
* NO_POWER_INDEX
* NUM_ALLIANCES
* NUM_BACKPACK_SLOTS_PER_UPGRADE
* NUM_BANK_SLOTS_PER_UPGRADE
* NUM_COMBAT_RELATED_EQUIP_SLOTS
* NUM_LOCKPICK_CHAMBER_STATES
* NUM_LOCKPICK_CHAMBERS
* NUM_SKILL_LINE_COLUMNS_PER_LINE
* TRADE_NUM_SLOTS
* NUM_PARTIAL_SKILL_POINTS_FOR_FULL
* RAID_GROUP_SIZE_THRESHOLD
* SMALL_GROUP_SIZE_THRESHOLD
* TRADE_DELAY_TIME
* TUTORIAL_ENABLED_SETTING_ID
* VOICE_CHAT_REQUEST_DELAY


h5. AbilityType
* ABILITY_TYPE_ACTIONLIST
* ABILITY_TYPE_AREAEFFECT
* ABILITY_TYPE_AREATELEPORT
* ABILITY_TYPE_ATTACKERINTERCEPT
* ABILITY_TYPE_ATTACKERREFLECT
* ABILITY_TYPE_AVOIDDEATH
* ABILITY_TYPE_BASIC
* ABILITY_TYPE_BLADETURN
* ABILITY_TYPE_BLINK
* ABILITY_TYPE_BLOCK
* ABILITY_TYPE_BONUS
* ABILITY_TYPE_CHANGEAPPEARANCE
* ABILITY_TYPE_CHARGE
* ABILITY_TYPE_CHARM
* ABILITY_TYPE_CLAIRVOYANCE
* ABILITY_TYPE_CLIENTFX
* ABILITY_TYPE_COMBATRESOURCE
* ABILITY_TYPE_CREATEINTERACTABLE
* ABILITY_TYPE_CREATEINVENTORYITEM
* ABILITY_TYPE_DAMAGE
* ABILITY_TYPE_DAMAGELIMIT
* ABILITY_TYPE_DAMAGESHIELD
* ABILITY_TYPE_DEFEND
* ABILITY_TYPE_DEPRECATED
* ABILITY_TYPE_DESPAWNOVERRIDE
* ABILITY_TYPE_DISARM
* ABILITY_TYPE_DISORIENT
* ABILITY_TYPE_DISPEL
* ABILITY_TYPE_DODGE
* ABILITY_TYPE_DOUBLEFIRE
* ABILITY_TYPE_EXHAUSTED
* ABILITY_TYPE_FEAR
* ABILITY_TYPE_FILLSOULGEM
* ABILITY_TYPE_FIREPROC
* ABILITY_TYPE_FLIGHT
* ABILITY_TYPE_FREECAST
* ABILITY_TYPE_FREEINTERACT
* ABILITY_TYPE_GRANTABILITY
* ABILITY_TYPE_HEAL
* ABILITY_TYPE_HIDE
* ABILITY_TYPE_IMMUNITY
* ABILITY_TYPE_INTERCEPT
* ABILITY_TYPE_INTERRUPT
* ABILITY_TYPE_JUMP
* ABILITY_TYPE_KNOCKBACK
* ABILITY_TYPE_LEAP
* ABILITY_TYPE_LEVITATE
* ABILITY_TYPE_MISDIRECT
* ABILITY_TYPE_MODIFYCOOLDOWN
* ABILITY_TYPE_MODIFYDURATION
* ABILITY_TYPE_MOUNT
* ABILITY_TYPE_MOVEPOSITION
* ABILITY_TYPE_NOAGGRO
* ABILITY_TYPE_NOKILL
* ABILITY_TYPE_NOLOCKPICK
* ABILITY_TYPE_NOSEETARGET
* ABILITY_TYPE_NONCOMBATBONUS
* ABILITY_TYPE_NONEXISTENT
* ABILITY_TYPE_NONE
* ABILITY_TYPE_OFFBALANCE
* ABILITY_TYPE_PACIFY
* ABILITY_TYPE_PARRY
* ABILITY_TYPE_PATHLINE
* ABILITY_TYPE_RECALL
* ABILITY_TYPE_REFLECTION
* ABILITY_TYPE_REGISTERTRIGGER
* ABILITY_TYPE_REMOVETYPE
* ABILITY_TYPE_RESURRECT
* ABILITY_TYPE_REVEAL
* ABILITY_TYPE_SEESTEALTH
* ABILITY_TYPE_SETCOOLDOWN
* ABILITY_TYPE_SETHOTBAR
* ABILITY_TYPE_SETPERSONALITY
* ABILITY_TYPE_SETTARGET
* ABILITY_TYPE_SHOWNON
* ABILITY_TYPE_SIEGEAREAEFFECT
* ABILITY_TYPE_SIEGECREATE
* ABILITY_TYPE_SIEGEPACKUP
* ABILITY_TYPE_SILENCE
* ABILITY_TYPE_SLOWFALL
* ABILITY_TYPE_SNARE
* ABILITY_TYPE_SOULGEMRESURRECT
* ABILITY_TYPE_SPELLSTEAL
* ABILITY_TYPE_STAGGER
* ABILITY_TYPE_STEALTH
* ABILITY_TYPE_STUN
* ABILITY_TYPE_SUMMON
* ABILITY_TYPE_THREAT
* ABILITY_TYPE_TRAUMA
* ABILITY_TYPE_UPDATEDEATHDIALOG
* ABILITY_TYPE_VAMPIRE
* ABILITY_TYPE_WIND


h5. Globals


h5. ActivityFinderStatus
* ACTIVITY_FINDER_STATUS_COMPLETE
* ACTIVITY_FINDER_STATUS_FORMING_GROUP
* ACTIVITY_FINDER_STATUS_IN_PROGRESS
* ACTIVITY_FINDER_STATUS_NONE
* ACTIVITY_FINDER_STATUS_QUEUED
* ACTIVITY_FINDER_STATUS_READY_CHECK


h5. ActivityQueueResult
* ACTIVITY_QUEUE_RESULT_CAMPAIGN_MISMATCH
* ACTIVITY_QUEUE_RESULT_CANNOT_QUEUE_IN_BATTLEGROUND
* ACTIVITY_QUEUE_RESULT_DESTINATION_NO_LONGER_VALID
* ACTIVITY_QUEUE_RESULT_DLC_LOCKED
* ACTIVITY_QUEUE_RESULT_GROUP_STRUCTURE_CHANGED
* ACTIVITY_QUEUE_RESULT_GROUP_TOO_LARGE
* ACTIVITY_QUEUE_RESULT_INCOMPATIBLE_GROUP
* ACTIVITY_QUEUE_RESULT_INCOMPATIBLE_REGION
* ACTIVITY_QUEUE_RESULT_INVALID_LEVEL
* ACTIVITY_QUEUE_RESULT_LOCATION_RESTRICTION
* ACTIVITY_QUEUE_RESULT_MEMBERS_OFFLINE
* ACTIVITY_QUEUE_RESULT_MEMBER_LOCATION_NOT_VALID
* ACTIVITY_QUEUE_RESULT_MEMEBER_CANCELED_READY_CHECK
* ACTIVITY_QUEUE_RESULT_NEW_SEARCH_INITIATED
* ACTIVITY_QUEUE_RESULT_NOT_GROUP_LEADER
* ACTIVITY_QUEUE_RESULT_NOT_IMPLEMENTED
* ACTIVITY_QUEUE_RESULT_NO_ACTIVITIES_SELECTED
* ACTIVITY_QUEUE_RESULT_NO_GROUP
* ACTIVITY_QUEUE_RESULT_NO_ROLES_SELECTED
* ACTIVITY_QUEUE_RESULT_ON_QUEUE_COOLDOWN
* ACTIVITY_QUEUE_RESULT_QUEUE_TTL_EXPIRED
* ACTIVITY_QUEUE_RESULT_SUCCESS
* ACTIVITY_QUEUE_RESULT_UNSPECIFIED_INTERNAL_ERROR


h5. LFGActivity
* LFG_ACTIVITY_AVA
* LFG_ACTIVITY_BATTLE_GROUND_CHAMPION
* LFG_ACTIVITY_BATTLE_GROUND_LOW_LEVEL
* LFG_ACTIVITY_BATTLE_GROUND_NON_CHAMPION
* LFG_ACTIVITY_DUNGEON
* LFG_ACTIVITY_HOME_SHOW
* LFG_ACTIVITY_INVALID
* LFG_ACTIVITY_MASTER_DUNGEON
* LFG_ACTIVITY_TRIAL


h5. LFGCooldownType
* LFG_COOLDOWN_ACTIVITY_STARTED
* LFG_COOLDOWN_BATTLEGROUND_DESERTED
* LFG_COOLDOWN_DUNGEON_LEFT
* LFG_COOLDOWN_INVALID
* LFG_COOLDOWN_QUEUE_LEFT
* LFG_COOLDOWN_REWARD_GRANTED
* LFG_COOLDOWN_TRIAL_LEFT


h5. LFGGroupType
* LFG_GROUP_TYPE_LARGE
* LFG_GROUP_TYPE_MEDIUM
* LFG_GROUP_TYPE_NONE
* LFG_GROUP_TYPE_REGULAR


h5. LFGItemRewardType
* LFG_ITEM_REWARD_TYPE_DAILY
* LFG_ITEM_REWARD_TYPE_NONE
* LFG_ITEM_REWARD_TYPE_STANDARD


h5. LFGReadyCheckCancelReason
* LFG_READY_CHECK_CANCEL_REASON_ACTIVITY_NO_LONGER_VALID
* LFG_READY_CHECK_CANCEL_REASON_GROUP_FORMED_SUCCESSFULLY
* LFG_READY_CHECK_CANCEL_REASON_GROUP_MEMBER_CANCELED
* LFG_READY_CHECK_CANCEL_REASON_GROUP_NOT_VIABLE
* LFG_READY_CHECK_CANCEL_REASON_GROUP_REPLACED_IN_QUEUE
* LFG_READY_CHECK_CANCEL_REASON_NOT_IN_READY_CHECK


h5. LFGReadyCheckState
* LFG_READY_CHECK_STATE_FORM_GROUP
* LFG_READY_CHECK_STATE_GROUP_TIMEOUT_CANCEL
* LFG_READY_CHECK_STATE_IN_READY_CHECK
* LFG_READY_CHECK_STATE_IN_READY_CHECK_BATTLEGROUND_TEST
* LFG_READY_CHECK_STATE_IN_TRANSIT_TO_BATTLEGROUND
* LFG_READY_CHECK_STATE_LAUNCHING_BATTLEGROUND_INSTANCE
* LFG_READY_CHECK_STATE_NOT_IN_READY_CHECK
* LFG_READY_CHECK_STATE_PLAYER_ACCEPTED
* LFG_READY_CHECK_STATE_PLAYER_DECLINED
* LFG_READY_CHECK_STATE_QUEUEDTEST_BATTLEGROUND_LAUNCH
* LFG_READY_CHECK_STATE_TRANSFER_TO_BATTLEGROUND_INSTANCE


h5. LFGRole
* LFG_ROLE_DPS
* LFG_ROLE_HEAL
* LFG_ROLE_INVALID
* LFG_ROLE_TANK


h5. Globals


h5. BattlegroundQueryContextType
* BGQUERY_ASSIGNED_AND_LOCAL
* BGQUERY_ASSIGNED_CAMPAIGN
* BGQUERY_LOCAL
* BGQUERY_UNKNOWN


h5. CampaignBuffType
* CAMPAIGNBUFF_DEFENSIVE_ARTIFACT
* CAMPAIGNBUFF_EMPEROR
* CAMPAIGNBUFF_KEEP
* CAMPAIGNBUFF_OFFENSIVE_ARTIFACT


h5. CampaignHoldingType
* HOLDINGTYPE_DEFENSIVE_ARTIFACT
* HOLDINGTYPE_KEEP
* HOLDINGTYPE_OFFENSIVE_ARTIFACT
* HOLDINGTYPE_OUTPOST
* HOLDINGTYPE_RESOURCE


h5. CampaignLevelRequirementType
* CAMPAIGN_LEVEL_REQ_TYPE_CHAMPION_RANK
* CAMPAIGN_LEVEL_REQ_TYPE_NONE
* CAMPAIGN_LEVEL_REQ_TYPE_PLAYER_LEVEL


h5. CampaignPopulationType
* CAMPAIGN_POP_FULL
* CAMPAIGN_POP_HIGH
* CAMPAIGN_POP_LOW
* CAMPAIGN_POP_MEDIUM


h5. CampaignPreferenceType
* CAMP_PREF_ASSIGNED
* CAMP_PREF_GUEST


h5. CampaignReassignmentRequestType
* CAMPAIGN_REASSIGN_TYPE_GUEST
* CAMPAIGN_REASSIGN_TYPE_IMMEDIATE
* CAMPAIGN_REASSIGN_TYPE_ON_END


h5. CampaignRulesetType
* CAMPAIGN_RULESET_TYPE_HARDCORE
* CAMPAIGN_RULESET_TYPE_NORMAL
* CAMPAIGN_RULESET_TYPE_SPECIAL


h5. CampaignUnassignRequestType
* CAMPAIGN_UNASSIGN_TYPE_GUEST
* CAMPAIGN_UNASSIGN_TYPE_HOME_USE_ALLIANCE_POINTS
* CAMPAIGN_UNASSIGN_TYPE_HOME_USE_GOLD


h5. HookpointType
* HOOK_POINT_BOILING_OIL
* HOOK_POINT_GRAPPLE
* HOOK_POINT_NPC
* HOOK_POINT_SIEGE


h5. ImperialCityAccessRulesType
* IMPERIAL_CITY_ACCESS_RULE_TYPE_EVERYONE
* IMPERIAL_CITY_ACCESS_RULE_TYPE_MAJORITY_KEEPS
* IMPERIAL_CITY_ACCESS_RULE_TYPE_NATIVE_KEEPS
* IMPERIAL_CITY_ACCESS_RULE_TYPE_NATIVE_KEEPS_PLUS_ONE


h5. KeepResourceType
* RESOURCETYPE_FOOD
* RESOURCETYPE_NONE
* RESOURCETYPE_ORE
* RESOURCETYPE_WOOD


h5. KeepType
* KEEPTYPE_ARTIFACT_GATE
* KEEPTYPE_ARTIFACT_KEEP
* KEEPTYPE_BORDER_KEEP
* KEEPTYPE_IMPERIAL_CITY_DISTRICT
* KEEPTYPE_KEEP
* KEEPTYPE_OUTPOST
* KEEPTYPE_RESOURCE
* KEEPTYPE_TOWN


h5. KeepUpgradePath
* UPGRADEPATH_DEFENSIVE
* UPGRADEPATH_NONE
* UPGRADEPATH_PRODUCTION


h5. SiegeType
* SIEGE_TYPE_BALLISTA
* SIEGE_TYPE_BATTLE_STANDARD
* SIEGE_TYPE_CATAPULT
* SIEGE_TYPE_GRAVEYARD
* SIEGE_TYPE_MONSTER
* SIEGE_TYPE_NONE
* SIEGE_TYPE_OIL
* SIEGE_TYPE_RAM
* SIEGE_TYPE_TREBUCHET
* SIEGE_TYPE_UNIVERSAL


h5. Globals


h5. ChromaBlendMode
* CHROMA_BLEND_MODE_ADDITIVE
* CHROMA_BLEND_MODE_COLOR_DODGE
* CHROMA_BLEND_MODE_NORMAL


h5. ChromaCustomEffectGridStyle
* CHROMA_CUSTOM_EFFECT_GRID_STYLE_ANIMATED
* CHROMA_CUSTOM_EFFECT_GRID_STYLE_FULL
* CHROMA_CUSTOM_EFFECT_GRID_STYLE_STATIC_CELLS


h5. ChromaCustomEffectType
* CHROMA_CUSTOM_EFFECT_TYPE_RING
* CHROMA_CUSTOM_EFFECT_TYPE_SINGLE_COLOR
* CHROMA_CUSTOM_EFFECT_TYPE_SINGLE_COLOR_FADING


h5. ChromaDeviceType
* CHROMA_DEVICE_TYPE_HEADSET
* CHROMA_DEVICE_TYPE_INVALID
* CHROMA_DEVICE_TYPE_KEYBOARD
* CHROMA_DEVICE_TYPE_KEYPAD
* CHROMA_DEVICE_TYPE_MOUSE
* CHROMA_DEVICE_TYPE_MOUSEPAD
* CHROMA_DEVICE_TYPE_SYSTEM


h5. ChromaHeadsetEffectType
* CHROMA_HEADSET_EFFECT_TYPE_BREATHING
* CHROMA_HEADSET_EFFECT_TYPE_CUSTOM
* CHROMA_HEADSET_EFFECT_TYPE_INVALID
* CHROMA_HEADSET_EFFECT_TYPE_NONE
* CHROMA_HEADSET_EFFECT_TYPE_SPECTRUMCYCLING
* CHROMA_HEADSET_EFFECT_TYPE_STATIC


h5. ChromaKeyboardBreathingEffectType
* CHROMA_KEYBOARD_BREATHING_EFFECT_TYPE_INVALID
* CHROMA_KEYBOARD_BREATHING_EFFECT_TYPE_RANDOM_COLORS
* CHROMA_KEYBOARD_BREATHING_EFFECT_TYPE_TWO_COLORS


h5. ChromaKeyboardEffectType
* CHROMA_KEYBOARD_EFFECT_TYPE_BREATHING
* CHROMA_KEYBOARD_EFFECT_TYPE_CUSTOM
* CHROMA_KEYBOARD_EFFECT_TYPE_CUSTOM_KEY
* CHROMA_KEYBOARD_EFFECT_TYPE_INVALID
* CHROMA_KEYBOARD_EFFECT_TYPE_NONE
* CHROMA_KEYBOARD_EFFECT_TYPE_REACTIVE
* CHROMA_KEYBOARD_EFFECT_TYPE_RESERVED
* CHROMA_KEYBOARD_EFFECT_TYPE_SPECTRUMCYCLING
* CHROMA_KEYBOARD_EFFECT_TYPE_STATIC
* CHROMA_KEYBOARD_EFFECT_TYPE_WAVE


h5. ChromaKeyboardKey
* CHROMA_KEYBOARD_KEY_A
* CHROMA_KEYBOARD_KEY_B
* CHROMA_KEYBOARD_KEY_BACKSPACE
* CHROMA_KEYBOARD_KEY_C
* CHROMA_KEYBOARD_KEY_CAPSLOCK
* CHROMA_KEYBOARD_KEY_D
* CHROMA_KEYBOARD_KEY_DELETE
* CHROMA_KEYBOARD_KEY_DOWN
* CHROMA_KEYBOARD_KEY_E
* CHROMA_KEYBOARD_KEY_END
* CHROMA_KEYBOARD_KEY_ENTER
* CHROMA_KEYBOARD_KEY_ESC
* CHROMA_KEYBOARD_KEY_EUR_1_KOR_2
* CHROMA_KEYBOARD_KEY_EUR_2_KOR_3
* CHROMA_KEYBOARD_KEY_F
* CHROMA_KEYBOARD_KEY_F1
* CHROMA_KEYBOARD_KEY_F10
* CHROMA_KEYBOARD_KEY_F11
* CHROMA_KEYBOARD_KEY_F12
* CHROMA_KEYBOARD_KEY_F2
* CHROMA_KEYBOARD_KEY_F3
* CHROMA_KEYBOARD_KEY_F4
* CHROMA_KEYBOARD_KEY_F5
* CHROMA_KEYBOARD_KEY_F6
* CHROMA_KEYBOARD_KEY_F7
* CHROMA_KEYBOARD_KEY_F8
* CHROMA_KEYBOARD_KEY_F9
* CHROMA_KEYBOARD_KEY_FN
* CHROMA_KEYBOARD_KEY_G
* CHROMA_KEYBOARD_KEY_H
* CHROMA_KEYBOARD_KEY_HOME
* CHROMA_KEYBOARD_KEY_I
* CHROMA_KEYBOARD_KEY_INSERT
* CHROMA_KEYBOARD_KEY_INVALID
* CHROMA_KEYBOARD_KEY_J
* CHROMA_KEYBOARD_KEY_JPN_1_KOR_1
* CHROMA_KEYBOARD_KEY_JPN_2_KOR_4
* CHROMA_KEYBOARD_KEY_JPN_3_KOR_5
* CHROMA_KEYBOARD_KEY_JPN_4_KOR_6
* CHROMA_KEYBOARD_KEY_JPN_5_KOR_7
* CHROMA_KEYBOARD_KEY_K
* CHROMA_KEYBOARD_KEY_L
* CHROMA_KEYBOARD_KEY_LALT
* CHROMA_KEYBOARD_KEY_LCTRL
* CHROMA_KEYBOARD_KEY_LEFT
* CHROMA_KEYBOARD_KEY_LSHIFT
* CHROMA_KEYBOARD_KEY_LWIN
* CHROMA_KEYBOARD_KEY_M
* CHROMA_KEYBOARD_KEY_MACRO1
* CHROMA_KEYBOARD_KEY_MACRO2
* CHROMA_KEYBOARD_KEY_MACRO3
* CHROMA_KEYBOARD_KEY_MACRO4
* CHROMA_KEYBOARD_KEY_MACRO5
* CHROMA_KEYBOARD_KEY_N
* CHROMA_KEYBOARD_KEY_NUM0
* CHROMA_KEYBOARD_KEY_NUM1
* CHROMA_KEYBOARD_KEY_NUM2
* CHROMA_KEYBOARD_KEY_NUM3
* CHROMA_KEYBOARD_KEY_NUM4
* CHROMA_KEYBOARD_KEY_NUM5
* CHROMA_KEYBOARD_KEY_NUM6
* CHROMA_KEYBOARD_KEY_NUM7
* CHROMA_KEYBOARD_KEY_NUM8
* CHROMA_KEYBOARD_KEY_NUM9
* CHROMA_KEYBOARD_KEY_NUMLOCK
* CHROMA_KEYBOARD_KEY_NUMPAD0
* CHROMA_KEYBOARD_KEY_NUMPAD1
* CHROMA_KEYBOARD_KEY_NUMPAD2
* CHROMA_KEYBOARD_KEY_NUMPAD3
* CHROMA_KEYBOARD_KEY_NUMPAD4
* CHROMA_KEYBOARD_KEY_NUMPAD5
* CHROMA_KEYBOARD_KEY_NUMPAD6
* CHROMA_KEYBOARD_KEY_NUMPAD7
* CHROMA_KEYBOARD_KEY_NUMPAD8
* CHROMA_KEYBOARD_KEY_NUMPAD9
* CHROMA_KEYBOARD_KEY_NUMPAD_ADD
* CHROMA_KEYBOARD_KEY_NUMPAD_DECIMAL
* CHROMA_KEYBOARD_KEY_NUMPAD_DIVIDE
* CHROMA_KEYBOARD_KEY_NUMPAD_ENTER
* CHROMA_KEYBOARD_KEY_NUMPAD_MULTIPLY
* CHROMA_KEYBOARD_KEY_NUMPAD_SUBTRACT
* CHROMA_KEYBOARD_KEY_O
* CHROMA_KEYBOARD_KEY_OEM_1
* CHROMA_KEYBOARD_KEY_OEM_10
* CHROMA_KEYBOARD_KEY_OEM_11
* CHROMA_KEYBOARD_KEY_OEM_2
* CHROMA_KEYBOARD_KEY_OEM_3
* CHROMA_KEYBOARD_KEY_OEM_4
* CHROMA_KEYBOARD_KEY_OEM_5
* CHROMA_KEYBOARD_KEY_OEM_6
* CHROMA_KEYBOARD_KEY_OEM_7
* CHROMA_KEYBOARD_KEY_OEM_8
* CHROMA_KEYBOARD_KEY_OEM_9
* CHROMA_KEYBOARD_KEY_P
* CHROMA_KEYBOARD_KEY_PAGEDOWN
* CHROMA_KEYBOARD_KEY_PAGEUP
* CHROMA_KEYBOARD_KEY_PAUSE
* CHROMA_KEYBOARD_KEY_PRINTSCREEN
* CHROMA_KEYBOARD_KEY_Q
* CHROMA_KEYBOARD_KEY_R
* CHROMA_KEYBOARD_KEY_RALT
* CHROMA_KEYBOARD_KEY_RCTRL
* CHROMA_KEYBOARD_KEY_RIGHT
* CHROMA_KEYBOARD_KEY_RMENU
* CHROMA_KEYBOARD_KEY_RSHIFT
* CHROMA_KEYBOARD_KEY_S
* CHROMA_KEYBOARD_KEY_SCROLL
* CHROMA_KEYBOARD_KEY_SPACE
* CHROMA_KEYBOARD_KEY_T
* CHROMA_KEYBOARD_KEY_TAB
* CHROMA_KEYBOARD_KEY_U
* CHROMA_KEYBOARD_KEY_UP
* CHROMA_KEYBOARD_KEY_V
* CHROMA_KEYBOARD_KEY_W
* CHROMA_KEYBOARD_KEY_X
* CHROMA_KEYBOARD_KEY_Y
* CHROMA_KEYBOARD_KEY_Z


h5. ChromaKeyboardReactiveEffectDuration
* CHROMA_KEYBOARD_REACTIVE_EFFECT_DURATION_INVALID
* CHROMA_KEYBOARD_REACTIVE_EFFECT_DURATION_LONG
* CHROMA_KEYBOARD_REACTIVE_EFFECT_DURATION_MEDIUM
* CHROMA_KEYBOARD_REACTIVE_EFFECT_DURATION_NONE
* CHROMA_KEYBOARD_REACTIVE_EFFECT_DURATION_SHORT


h5. ChromaKeyboardWaveEffectDirection
* CHROMA_KEYBOARD_WAVE_EFFECT_DIRECTION_INVALID
* CHROMA_KEYBOARD_WAVE_EFFECT_DIRECTION_LEFT_TO_RIGHT
* CHROMA_KEYBOARD_WAVE_EFFECT_DIRECTION_NONE
* CHROMA_KEYBOARD_WAVE_EFFECT_DIRECTION_RIGHT_TO_LEFT


h5. ChromaKeypadBreathingEffectType
* CHROMA_KEYPAD_BREATHING_EFFECT_TYPE_INVALID
* CHROMA_KEYPAD_BREATHING_EFFECT_TYPE_RANDOM_COLORS
* CHROMA_KEYPAD_BREATHING_EFFECT_TYPE_TWO_COLORS


h5. ChromaKeypadEffectType
* CHROMA_KEYPAD_EFFECT_TYPE_BREATHING
* CHROMA_KEYPAD_EFFECT_TYPE_CUSTOM
* CHROMA_KEYPAD_EFFECT_TYPE_INVALID
* CHROMA_KEYPAD_EFFECT_TYPE_NONE
* CHROMA_KEYPAD_EFFECT_TYPE_REACTIVE
* CHROMA_KEYPAD_EFFECT_TYPE_SPECTRUMCYCLING
* CHROMA_KEYPAD_EFFECT_TYPE_STATIC
* CHROMA_KEYPAD_EFFECT_TYPE_WAVE


h5. ChromaKeypadReactiveEffectDuration
* CHROMA_KEYPAD_REACTIVE_EFFECT_DURATION_INVALID
* CHROMA_KEYPAD_REACTIVE_EFFECT_DURATION_LONG
* CHROMA_KEYPAD_REACTIVE_EFFECT_DURATION_MEDIUM
* CHROMA_KEYPAD_REACTIVE_EFFECT_DURATION_NONE
* CHROMA_KEYPAD_REACTIVE_EFFECT_DURATION_SHORT


h5. ChromaKeypadWaveEffectDirection
* CHROMA_KEYPAD_WAVE_EFFECT_DIRECTION_INVALID
* CHROMA_KEYPAD_WAVE_EFFECT_DIRECTION_LEFT_TO_RIGHT
* CHROMA_KEYPAD_WAVE_EFFECT_DIRECTION_NONE
* CHROMA_KEYPAD_WAVE_EFFECT_DIRECTION_RIGHT_TO_LEFT


h5. ChromaMouseBreathingEffectType
* CHROMA_MOUSE_BREATHING_EFFECT_TYPE_INVALID
* CHROMA_MOUSE_BREATHING_EFFECT_TYPE_ONE_COLOR
* CHROMA_MOUSE_BREATHING_EFFECT_TYPE_RANDOM_COLORS
* CHROMA_MOUSE_BREATHING_EFFECT_TYPE_TWO_COLORS


h5. ChromaMouseEffectType
* CHROMA_MOUSE_EFFECT_TYPE_BLINKING
* CHROMA_MOUSE_EFFECT_TYPE_BREATHING
* CHROMA_MOUSE_EFFECT_TYPE_CUSTOM
* CHROMA_MOUSE_EFFECT_TYPE_CUSTOM2
* CHROMA_MOUSE_EFFECT_TYPE_INVALID
* CHROMA_MOUSE_EFFECT_TYPE_NONE
* CHROMA_MOUSE_EFFECT_TYPE_REACTIVE
* CHROMA_MOUSE_EFFECT_TYPE_SPECTRUMCYCLING
* CHROMA_MOUSE_EFFECT_TYPE_STATIC
* CHROMA_MOUSE_EFFECT_TYPE_WAVE


h5. ChromaMouseLED2
* CHROMA_MOUSE_LED2_BACKLIGHT
* CHROMA_MOUSE_LED2_BOTTOM1
* CHROMA_MOUSE_LED2_BOTTOM2
* CHROMA_MOUSE_LED2_BOTTOM3
* CHROMA_MOUSE_LED2_BOTTOM4
* CHROMA_MOUSE_LED2_BOTTOM5
* CHROMA_MOUSE_LED2_INVALID
* CHROMA_MOUSE_LED2_LEFT_SIDE1
* CHROMA_MOUSE_LED2_LEFT_SIDE2
* CHROMA_MOUSE_LED2_LEFT_SIDE3
* CHROMA_MOUSE_LED2_LEFT_SIDE4
* CHROMA_MOUSE_LED2_LEFT_SIDE5
* CHROMA_MOUSE_LED2_LEFT_SIDE6
* CHROMA_MOUSE_LED2_LEFT_SIDE7
* CHROMA_MOUSE_LED2_LOGO
* CHROMA_MOUSE_LED2_RIGHT_SIDE1
* CHROMA_MOUSE_LED2_RIGHT_SIDE2
* CHROMA_MOUSE_LED2_RIGHT_SIDE3
* CHROMA_MOUSE_LED2_RIGHT_SIDE4
* CHROMA_MOUSE_LED2_RIGHT_SIDE5
* CHROMA_MOUSE_LED2_RIGHT_SIDE6
* CHROMA_MOUSE_LED2_RIGHT_SIDE7
* CHROMA_MOUSE_LED2_SCROLLWHEEL


h5. ChromaMouseReactiveEffectDuration
* CHROMA_MOUSE_REACTIVE_EFFECT_DURATION_LONG
* CHROMA_MOUSE_REACTIVE_EFFECT_DURATION_MEDIUM
* CHROMA_MOUSE_REACTIVE_EFFECT_DURATION_NONE
* CHROMA_MOUSE_REACTIVE_EFFECT_DURATION_SHORT


h5. ChromaMouseWaveEffectDirection
* CHROMA_MOUSE_WAVE_EFFECT_DIRECTION_BACK_TO_FRONT
* CHROMA_MOUSE_WAVE_EFFECT_DIRECTION_FRONT_TO_BACK


h5. ChromaMousepadBreathingEffectType
* CHROMA_MOUSEPAD_BREATHING_EFFECT_TYPE_INVALID
* CHROMA_MOUSEPAD_BREATHING_EFFECT_TYPE_RANDOM_COLORS
* CHROMA_MOUSEPAD_BREATHING_EFFECT_TYPE_TWO_COLORS


h5. ChromaMousepadEffectType
* CHROMA_MOUSEPAD_EFFECT_TYPE_BREATHING
* CHROMA_MOUSEPAD_EFFECT_TYPE_CUSTOM
* CHROMA_MOUSEPAD_EFFECT_TYPE_INVALID
* CHROMA_MOUSEPAD_EFFECT_TYPE_NONE
* CHROMA_MOUSEPAD_EFFECT_TYPE_SPECTRUMCYCLING
* CHROMA_MOUSEPAD_EFFECT_TYPE_STATIC
* CHROMA_MOUSEPAD_EFFECT_TYPE_WAVE


h5. ChromaMousepadLED
* CHROMA_MOUSEPAD_LED_BOTTOM1
* CHROMA_MOUSEPAD_LED_BOTTOM2
* CHROMA_MOUSEPAD_LED_BOTTOM3
* CHROMA_MOUSEPAD_LED_BOTTOM4
* CHROMA_MOUSEPAD_LED_BOTTOM5
* CHROMA_MOUSEPAD_LED_INVALID
* CHROMA_MOUSEPAD_LED_LEFT_SIDE1
* CHROMA_MOUSEPAD_LED_LEFT_SIDE2
* CHROMA_MOUSEPAD_LED_LEFT_SIDE3
* CHROMA_MOUSEPAD_LED_LEFT_SIDE4
* CHROMA_MOUSEPAD_LED_LEFT_SIDE5
* CHROMA_MOUSEPAD_LED_RIGHT_SIDE1
* CHROMA_MOUSEPAD_LED_RIGHT_SIDE2
* CHROMA_MOUSEPAD_LED_RIGHT_SIDE3
* CHROMA_MOUSEPAD_LED_RIGHT_SIDE4
* CHROMA_MOUSEPAD_LED_RIGHT_SIDE5


h5. ChromaMousepadWaveEffectDirection
* CHROMA_MOUSEPAD_WAVE_EFFECT_DIRECTION_INVALID
* CHROMA_MOUSEPAD_WAVE_EFFECT_DIRECTION_LEFT_TO_RIGHT
* CHROMA_MOUSEPAD_WAVE_EFFECT_DIRECTION_NONE
* CHROMA_MOUSEPAD_WAVE_EFFECT_DIRECTION_RIGHT_TO_LEFT


h5. Globals


h5. Globals


h5. CollectibleCategorySpecialization
* COLLECTIBLE_CATEGORY_SPECIALIZATION_DLC
* COLLECTIBLE_CATEGORY_SPECIALIZATION_HOUSING
* COLLECTIBLE_CATEGORY_SPECIALIZATION_NONE


h5. CollectibleCategoryType
* COLLECTIBLE_CATEGORY_TYPE_ABILITY_SKIN
* COLLECTIBLE_CATEGORY_TYPE_ACCOUNT_SERVICE
* COLLECTIBLE_CATEGORY_TYPE_ACCOUNT_UPGRADE
* COLLECTIBLE_CATEGORY_TYPE_ASSISTANT
* COLLECTIBLE_CATEGORY_TYPE_BODY_MARKING
* COLLECTIBLE_CATEGORY_TYPE_CHAPTER
* COLLECTIBLE_CATEGORY_TYPE_COSTUME
* COLLECTIBLE_CATEGORY_TYPE_DLC
* COLLECTIBLE_CATEGORY_TYPE_EMOTE
* COLLECTIBLE_CATEGORY_TYPE_FACIAL_ACCESSORY
* COLLECTIBLE_CATEGORY_TYPE_FACIAL_HAIR_HORNS
* COLLECTIBLE_CATEGORY_TYPE_FURNITURE
* COLLECTIBLE_CATEGORY_TYPE_HAIR
* COLLECTIBLE_CATEGORY_TYPE_HAT
* COLLECTIBLE_CATEGORY_TYPE_HEAD_MARKING
* COLLECTIBLE_CATEGORY_TYPE_HOUSE
* COLLECTIBLE_CATEGORY_TYPE_INVALID
* COLLECTIBLE_CATEGORY_TYPE_MEMENTO
* COLLECTIBLE_CATEGORY_TYPE_MOUNT
* COLLECTIBLE_CATEGORY_TYPE_PERSONALITY
* COLLECTIBLE_CATEGORY_TYPE_PIERCING_JEWELRY
* COLLECTIBLE_CATEGORY_TYPE_POLYMORPH
* COLLECTIBLE_CATEGORY_TYPE_SKIN
* COLLECTIBLE_CATEGORY_TYPE_VANITY_PET


h5. CollectibleRestrictionType
* COLLECTIBLE_RESTRICTION_TYPE_ALLIANCE
* COLLECTIBLE_RESTRICTION_TYPE_CLASS
* COLLECTIBLE_RESTRICTION_TYPE_GENDER
* COLLECTIBLE_RESTRICTION_TYPE_RACE


h5. CollectibleUnlockState
* COLLECTIBLE_UNLOCK_STATE_LOCKED
* COLLECTIBLE_UNLOCK_STATE_UNLOCKED_OWNED
* COLLECTIBLE_UNLOCK_STATE_UNLOCKED_SUBSCRIPTION


h5. CollectibleUsageBlockReason
* COLLECTIBLE_USAGE_BLOCK_REASON_BLOCKED_BY_ZONE
* COLLECTIBLE_USAGE_BLOCK_REASON_DEAD
* COLLECTIBLE_USAGE_BLOCK_REASON_INVALID_ALLIANCE
* COLLECTIBLE_USAGE_BLOCK_REASON_INVALID_CLASS
* COLLECTIBLE_USAGE_BLOCK_REASON_INVALID_COLLECTIBLE
* COLLECTIBLE_USAGE_BLOCK_REASON_INVALID_GENDER
* COLLECTIBLE_USAGE_BLOCK_REASON_INVALID_RACE
* COLLECTIBLE_USAGE_BLOCK_REASON_IN_WATER
* COLLECTIBLE_USAGE_BLOCK_REASON_NOT_BLOCKED
* COLLECTIBLE_USAGE_BLOCK_REASON_ON_COOLDOWN
* COLLECTIBLE_USAGE_BLOCK_REASON_PLACED_IN_HOUSE


h5. SpecializedCollectibleType
* SPECIALIZED_COLLECTIBLE_TYPE_BUST
* SPECIALIZED_COLLECTIBLE_TYPE_NONE


h5. Globals


h5. CombatMechanicType
* POWERTYPE_HEALTH
* POWERTYPE_HEALTH_BONUS
* POWERTYPE_INVALID
* POWERTYPE_MAGICKA
* POWERTYPE_MOUNT_STAMINA
* POWERTYPE_STAMINA
* POWERTYPE_ULTIMATE
* POWERTYPE_WEREWOLF


h5. CombatUnitType
* COMBAT_UNIT_TYPE_GROUP
* COMBAT_UNIT_TYPE_NONE
* COMBAT_UNIT_TYPE_OTHER
* COMBAT_UNIT_TYPE_PLAYER
* COMBAT_UNIT_TYPE_PLAYER_PET
* COMBAT_UNIT_TYPE_TARGET_DUMMY


h5. DamageType
* DAMAGE_TYPE_COLD
* DAMAGE_TYPE_DISEASE
* DAMAGE_TYPE_DROWN
* DAMAGE_TYPE_EARTH
* DAMAGE_TYPE_FIRE
* DAMAGE_TYPE_GENERIC
* DAMAGE_TYPE_MAGIC
* DAMAGE_TYPE_NONE
* DAMAGE_TYPE_OBLIVION
* DAMAGE_TYPE_PHYSICAL
* DAMAGE_TYPE_POISON
* DAMAGE_TYPE_SHOCK


h5. DisguiseState
* DISGUISE_STATE_DANGER
* DISGUISE_STATE_DISCOVERED
* DISGUISE_STATE_DISGUISED
* DISGUISE_STATE_NONE
* DISGUISE_STATE_SUSPICIOUS


h5. SpecialMove
* SPECIAL_MOVE_INDEX_BLOCK
* SPECIAL_MOVE_INDEX_CROUCH
* SPECIAL_MOVE_INDEX_INTERRUPT
* SPECIAL_MOVE_INDEX_ROLL_DODGE
* SPECIAL_MOVE_INDEX_SPRINT


h5. StealthState
* STEALTH_STATE_DETECTED
* STEALTH_STATE_HIDDEN
* STEALTH_STATE_HIDDEN_ALMOST_DETECTED
* STEALTH_STATE_HIDING
* STEALTH_STATE_NONE
* STEALTH_STATE_STEALTH
* STEALTH_STATE_STEALTH_ALMOST_DETECTED


h5. Globals


h5. CrownCrateEvent
* CROWN_CRATE_NPC_ANIMATION_TYPE_ALL_CARDS_REVEALED_HAS_CRATES
* CROWN_CRATE_NPC_ANIMATION_TYPE_ALL_CARDS_REVEALED_NO_CRATES
* CROWN_CRATE_NPC_ANIMATION_TYPE_DEAL_BONUS_CARDS
* CROWN_CRATE_NPC_ANIMATION_TYPE_DEAL_PRIMARY_CARDS
* CROWN_CRATE_NPC_ANIMATION_TYPE_FAREWELL
* CROWN_CRATE_NPC_ANIMATION_TYPE_FLOURISH
* CROWN_CRATE_NPC_ANIMATION_TYPE_GEMS_AWARDED
* CROWN_CRATE_NPC_ANIMATION_TYPE_GREET_PLAYER
* CROWN_CRATE_NPC_ANIMATION_TYPE_IDLE_CHATTER
* CROWN_CRATE_NPC_ANIMATION_TYPE_INVALID
* CROWN_CRATE_NPC_ANIMATION_TYPE_MANIFEST_ENTER_MULTI_CRATES
* CROWN_CRATE_NPC_ANIMATION_TYPE_MANIFEST_ENTER_NO_CRATES
* CROWN_CRATE_NPC_ANIMATION_TYPE_MANIFEST_ENTER_ONE_CRATES
* CROWN_CRATE_NPC_ANIMATION_TYPE_NO_CRATES_WARNING
* CROWN_CRATE_NPC_ANIMATION_TYPE_POSTURE_ENTER
* CROWN_CRATE_NPC_ANIMATION_TYPE_POSTURE_EXIT
* CROWN_CRATE_NPC_ANIMATION_TYPE_POSTURE_FIDGET
* CROWN_CRATE_NPC_ANIMATION_TYPE_POSTURE_GROUP_FIDGET
* CROWN_CRATE_NPC_ANIMATION_TYPE_POSTURE_LOOP
* CROWN_CRATE_NPC_ANIMATION_TYPE_PRIMARY_CARDS_DEALT
* CROWN_CRATE_NPC_ANIMATION_TYPE_REVEAL_ALL_CARDS
* CROWN_CRATE_NPC_ANIMATION_TYPE_SHUFFLE_CARDS
* CROWN_CRATE_NPC_ANIMATION_TYPE_SWIPE_CARDS_AWAY
* CROWN_CRATE_NPC_ANIMATION_TYPE_TIER_FIVE_CARD
* CROWN_CRATE_NPC_ANIMATION_TYPE_TIER_FOUR_CARD
* CROWN_CRATE_NPC_ANIMATION_TYPE_TIER_ONE_CARD
* CROWN_CRATE_NPC_ANIMATION_TYPE_TIER_SIX_CARD
* CROWN_CRATE_NPC_ANIMATION_TYPE_TIER_THREE_CARD
* CROWN_CRATE_NPC_ANIMATION_TYPE_TIER_TWO_CARD
* CROWN_CRATE_NPC_ANIMATION_TYPE_UNDER_ATTACK


h5. CrownCrateParticleEffects
* CROWN_CRATE_PARTICLES_BONUS
* CROWN_CRATE_PARTICLES_GEMIFY


h5. CrownCrateTierParticleEffects
* CROWN_CRATE_TIERED_PARTICLES_MYSTERY
* CROWN_CRATE_TIERED_PARTICLES_REVEAL
* CROWN_CRATE_TIERED_PARTICLES_REVEALED
* CROWN_CRATE_TIERED_PARTICLES_REVEALED_SELECTED


h5. CrownGemBalanceReason
* CROWN_GEM_BALANCE_REASON_ITEMS_GEMMIFIED
* CROWN_GEM_BALANCE_REASON_NOTIFY


h5. GemifiableFilterType
* GEMIFIABLE_FILTER_TYPE_ALL


h5. LootCrateOpenResponse
* LOOT_CRATE_OPEN_RESPONSE_FAIL_NO_INVENTORY_SPACE
* LOOT_CRATE_OPEN_RESPONSE_INVALID_LOOT_CRATE
* LOOT_CRATE_OPEN_RESPONSE_INVALID_LOOT_CRATE_TIER
* LOOT_CRATE_OPEN_RESPONSE_INVALID_MARKET_PRODUCT
* LOOT_CRATE_OPEN_RESPONSE_NO_PRODUCT_SELECTED
* LOOT_CRATE_OPEN_RESPONSE_OUT_OF_ALL_LOOT_CRATES
* LOOT_CRATE_OPEN_RESPONSE_OUT_OF_LOOT_CRATE
* LOOT_CRATE_OPEN_RESPONSE_SUCCESS
* LOOT_CRATE_OPEN_RESPONSE_SYSTEM_UNAVAILABLE


h5. LootCratesSystemState
* LOOT_CRATES_SYSTEM_STATE_OFFLINE
* LOOT_CRATES_SYSTEM_STATE_ONLINE
* LOOT_CRATES_SYSTEM_STATE_OPEN_ONLY


h5. Globals


h5. Globals


h5. DyeHueCategory
* DYE_HUE_CATEGORY_BLUE
* DYE_HUE_CATEGORY_BROWN
* DYE_HUE_CATEGORY_GREEN
* DYE_HUE_CATEGORY_GREY
* DYE_HUE_CATEGORY_PURPLE
* DYE_HUE_CATEGORY_RED
* DYE_HUE_CATEGORY_YELLOW


h5. DyeMode
* DYE_MODE_COLLECTIBLE
* DYE_MODE_EQUIPMENT
* DYE_MODE_NONE
* DYE_MODE_SELECTION


h5. DyeRarity
* DYE_RARITY_COMMON
* DYE_RARITY_RARE
* DYE_RARITY_UNCOMMON


h5. DyeStampUseResult
* DYE_STAMP_USE_RESULT_COLLECTIBLES_NOT_ACTIVE
* DYE_STAMP_USE_RESULT_NONE
* DYE_STAMP_USE_RESULT_NO_ACTIVE_COLLECTIBLES
* DYE_STAMP_USE_RESULT_NO_ACTIVE_ITEMS
* DYE_STAMP_USE_RESULT_NO_SUCH_DYE_STAMP
* DYE_STAMP_USE_RESULT_NO_VALID_COLLECTIBLES
* DYE_STAMP_USE_RESULT_NO_VALID_ITEMS


h5. DyeableSlot
* DYEABLE_SLOT_BACKUP_OFF
* DYEABLE_SLOT_CHEST
* DYEABLE_SLOT_COSTUME
* DYEABLE_SLOT_FEET
* DYEABLE_SLOT_HAND
* DYEABLE_SLOT_HAT
* DYEABLE_SLOT_HEAD
* DYEABLE_SLOT_LEGS
* DYEABLE_SLOT_NONE
* DYEABLE_SLOT_OFF_HAND
* DYEABLE_SLOT_SHOULDERS
* DYEABLE_SLOT_WAIST


h5. Globals


h5. Globals


h5. GuildEventType
* GUILD_EVENT_ABOUT_US_EDITED
* GUILD_EVENT_BANKGOLD_ADDED
* GUILD_EVENT_BANKGOLD_GUILD_STORE_TAX
* GUILD_EVENT_BANKGOLD_KIOSK_BID
* GUILD_EVENT_BANKGOLD_KIOSK_BID_REFUND
* GUILD_EVENT_BANKGOLD_PURCHASE_HERALDRY
* GUILD_EVENT_BANKGOLD_REMOVED
* GUILD_EVENT_BANKITEM_ADDED
* GUILD_EVENT_BANKITEM_REMOVED
* GUILD_EVENT_BATTLE_STANDARD_PICKUP
* GUILD_EVENT_BATTLE_STANDARD_PUTDOWN
* GUILD_EVENT_GUILD_BANK_LOCKED
* GUILD_EVENT_GUILD_BANK_UNLOCKED
* GUILD_EVENT_GUILD_CREATE
* GUILD_EVENT_GUILD_DELETE
* GUILD_EVENT_GUILD_DEMOTE
* GUILD_EVENT_GUILD_INVITE
* GUILD_EVENT_GUILD_INVITEDECLINED
* GUILD_EVENT_GUILD_INVITEPURGED
* GUILD_EVENT_GUILD_INVITEREVOKED
* GUILD_EVENT_GUILD_JOIN
* GUILD_EVENT_GUILD_KICKED
* GUILD_EVENT_GUILD_KIOSK_LOCKED
* GUILD_EVENT_GUILD_KIOSK_PURCHASED
* GUILD_EVENT_GUILD_KIOSK_PURCHASE_REFUND
* GUILD_EVENT_GUILD_KIOSK_UNLOCKED
* GUILD_EVENT_GUILD_LEAVE
* GUILD_EVENT_GUILD_PROMOTE
* GUILD_EVENT_GUILD_REMOVE
* GUILD_EVENT_GUILD_STANDARD_LOCKED
* GUILD_EVENT_GUILD_STANDARD_UNLOCKED
* GUILD_EVENT_GUILD_STORE_LOCKED
* GUILD_EVENT_GUILD_STORE_UNLOCKED
* GUILD_EVENT_GUILD_TABARD_LOCKED
* GUILD_EVENT_GUILD_TABARD_UNLOCKED
* GUILD_EVENT_HERALDRY_EDITED
* GUILD_EVENT_ITEM_LISTED
* GUILD_EVENT_ITEM_SOLD
* GUILD_EVENT_KEEP_CLAIMED
* GUILD_EVENT_KEEP_LOST
* GUILD_EVENT_KEEP_RELEASED
* GUILD_EVENT_MOTD_EDITED
* GUILD_EVENT_NAME_CHANGED


h5. GuildHistoryAllianceWarSubcategories
* GUILD_HISTORY_ALLIANCE_WAR_OWNERSHIP


h5. GuildHistoryBankSubcategories
* GUILD_HISTORY_BANK_DEPOSITS
* GUILD_HISTORY_BANK_WITHDRAWALS


h5. GuildHistoryCategory
* GUILD_HISTORY_ALLIANCE_WAR
* GUILD_HISTORY_BANK
* GUILD_HISTORY_COMBAT
* GUILD_HISTORY_GENERAL
* GUILD_HISTORY_STORE


h5. GuildHistoryGeneralSubcategories
* GUILD_HISTORY_GENERAL_CUSTOMIZATION
* GUILD_HISTORY_GENERAL_ROSTER
* GUILD_HISTORY_GENERAL_UNLOCKS


h5. GuildHistoryStoreSubcategories
* GUILD_HISTORY_STORE_HIRED_TRADER
* GUILD_HISTORY_STORE_PURCHASES


h5. GuildKioskGuildInfoResult
* GUILD_KIOSK_GUILD_INFO_RESULT_NO_GUILD
* GUILD_KIOSK_GUILD_INFO_RESULT_NO_INFO
* GUILD_KIOSK_GUILD_INFO_RESULT_NO_INFO_FOR_ANY_GUILD
* GUILD_KIOSK_GUILD_INFO_RESULT_NO_INFO_FOR_GUILD
* GUILD_KIOSK_GUILD_INFO_RESULT_SUCCESS


h5. GuildPermission
* GUILD_PERMISSION_BANK_DEPOSIT
* GUILD_PERMISSION_BANK_VIEW_DEPOSIT_HISTORY
* GUILD_PERMISSION_BANK_VIEW_GOLD
* GUILD_PERMISSION_BANK_VIEW_WITHDRAW_HISTORY
* GUILD_PERMISSION_BANK_WITHDRAW
* GUILD_PERMISSION_BANK_WITHDRAW_GOLD
* GUILD_PERMISSION_CHAT
* GUILD_PERMISSION_CLAIM_AVA_RESOURCE
* GUILD_PERMISSION_DEMOTE
* GUILD_PERMISSION_DESCRIPTION_EDIT
* GUILD_PERMISSION_EDIT_HERALDRY
* GUILD_PERMISSION_GUILD_KIOSK_BID
* GUILD_PERMISSION_INVITE
* GUILD_PERMISSION_NONE
* GUILD_PERMISSION_NOTE_EDIT
* GUILD_PERMISSION_NOTE_READ
* GUILD_PERMISSION_OFFICER_CHAT_READ
* GUILD_PERMISSION_OFFICER_CHAT_WRITE
* GUILD_PERMISSION_PERMISSION_EDIT
* GUILD_PERMISSION_PROMOTE
* GUILD_PERMISSION_RECRUITMENT_EDIT
* GUILD_PERMISSION_RELEASE_AVA_RESOURCE
* GUILD_PERMISSION_REMOVE
* GUILD_PERMISSION_SET_MOTD
* GUILD_PERMISSION_STORE_BUY
* GUILD_PERMISSION_STORE_SELL
* GUILD_PERMISSION_USE_GUILD_SIEGE


h5. GuildPrivilege
* GUILD_PRIVILEGE_BANK_DEPOSIT
* GUILD_PRIVILEGE_HERALDRY
* GUILD_PRIVILEGE_TRADING_HOUSE


h5. GuildRanks
* DEFAULT_GUILD_LEADER_RANK
* DEFAULT_INVITED_RANK
* DEFAULT_MEMBER_RANK
* DEFAULT_OFFICER_RANK
* DEFAULT_RECRUIT_RANK


h5. Globals


h5. AxisTypes
* AXIS_TYPE_X
* AXIS_TYPE_Y
* AXIS_TYPE_Z


h5. FurnitureThemeType
* FURNITURE_THEME_TYPE_ALL
* FURNITURE_THEME_TYPE_ARGONIAN
* FURNITURE_THEME_TYPE_BRETON
* FURNITURE_THEME_TYPE_DARK_ELF
* FURNITURE_THEME_TYPE_GENERIC
* FURNITURE_THEME_TYPE_HIGH_ELF
* FURNITURE_THEME_TYPE_IMPERIAL
* FURNITURE_THEME_TYPE_KHAJIIT
* FURNITURE_THEME_TYPE_NORD
* FURNITURE_THEME_TYPE_ORC
* FURNITURE_THEME_TYPE_REDGUARD
* FURNITURE_THEME_TYPE_WOOD_ELF


h5. HouseCategoryType
* HOUSE_CATEGORY_TYPE_CLASSIC
* HOUSE_CATEGORY_TYPE_NONE
* HOUSE_CATEGORY_TYPE_NOTABLE
* HOUSE_CATEGORY_TYPE_STAPLE


h5. HousePermissionDefaultAccessSetting
* HOUSE_PERMISSION_DEFAULT_ACCESS_SETTING_DECORATOR
* HOUSE_PERMISSION_DEFAULT_ACCESS_SETTING_NO_ACCESS
* HOUSE_PERMISSION_DEFAULT_ACCESS_SETTING_VISITOR


h5. HousePermissionOptionsCategories
* HOUSE_PERMISSION_OPTIONS_CATEGORIES_BANLIST
* HOUSE_PERMISSION_OPTIONS_CATEGORIES_GENERAL
* HOUSE_PERMISSION_OPTIONS_CATEGORIES_GUILD_BANLIST
* HOUSE_PERMISSION_OPTIONS_CATEGORIES_GUILD_VISITORS
* HOUSE_PERMISSION_OPTIONS_CATEGORIES_SOCIAL_OPTIONS
* HOUSE_PERMISSION_OPTIONS_CATEGORIES_TEMPLATES
* HOUSE_PERMISSION_OPTIONS_CATEGORIES_VISITORS


h5. HousePermissionPresetSetting
* HOUSE_PERMISSION_PRESET_SETTING_DECORATOR
* HOUSE_PERMISSION_PRESET_SETTING_INVALID
* HOUSE_PERMISSION_PRESET_SETTING_VISITOR


h5. HousePermissionResult
* HOUSE_PERMISSION_RESULT_FAILED_TO_ADD
* HOUSE_PERMISSION_RESULT_FAILED_TO_MODIFY
* HOUSE_PERMISSION_RESULT_FAILED_TO_REMOVE
* HOUSE_PERMISSION_RESULT_INIT
* HOUSE_PERMISSION_RESULT_SUCCESS


h5. HousePermissionSetting
* HOUSE_PERMISSION_SETTING_BOOL_SECTION_END
* HOUSE_PERMISSION_SETTING_MOVE_FURNITURE
* HOUSE_PERMISSION_SETTING_PLACE_TEMP_ITEMS
* HOUSE_PERMISSION_SETTING_USE_ASSISTANTS
* HOUSE_PERMISSION_SETTING_USE_CRAFTING_STATIONS
* HOUSE_PERMISSION_SETTING_USE_OBJECTS


h5. HousePermissionUserGroup
* HOUSE_PERMISSION_USER_GROUP_GENERAL
* HOUSE_PERMISSION_USER_GROUP_GUILD
* HOUSE_PERMISSION_USER_GROUP_INDIVIDUAL


h5. HousingEditorMode
* HOUSING_EDITOR_MODE_BROWSE
* HOUSING_EDITOR_MODE_DISABLED
* HOUSING_EDITOR_MODE_PLACEMENT
* HOUSING_EDITOR_MODE_SELECTION


h5. HousingFurnishingLimitType
* HOUSING_FURNISHING_LIMIT_TYPE_HIGH_IMPACT_COLLECTIBLE
* HOUSING_FURNISHING_LIMIT_TYPE_HIGH_IMPACT_ITEM
* HOUSING_FURNISHING_LIMIT_TYPE_LOW_IMPACT_COLLECTIBLE
* HOUSING_FURNISHING_LIMIT_TYPE_LOW_IMPACT_ITEM


h5. HousingLoadPermissionsResult
* HOUSING_LOAD_PERMISSIONS_RESULT_NO_CHANGE
* HOUSING_LOAD_PERMISSIONS_RESULT_SUCCESS


h5. HousingVisitorRole
* HOUSING_VISITOR_ROLE_EDITOR
* HOUSING_VISITOR_ROLE_HOME_SHOW
* HOUSING_VISITOR_ROLE_PREVIEW


h5. Globals


h5. AbilityTooltipTextColors
* ABILITY_TOOLTIP_TEXT_COLOR_ABILITY_INFO
* ABILITY_TOOLTIP_TEXT_COLOR_BODY
* ABILITY_TOOLTIP_TEXT_COLOR_BRONZE_ABILITY
* ABILITY_TOOLTIP_TEXT_COLOR_DEFAULT
* ABILITY_TOOLTIP_TEXT_COLOR_FAILED_REQUIREMENT
* ABILITY_TOOLTIP_TEXT_COLOR_GOLD_ABILITY
* ABILITY_TOOLTIP_TEXT_COLOR_NAME
* ABILITY_TOOLTIP_TEXT_COLOR_NEW_EFFECT
* ABILITY_TOOLTIP_TEXT_COLOR_SILVER_ABILITY
* ABILITY_TOOLTIP_TEXT_COLOR_SPECIAL_HEADER
* ABILITY_TOOLTIP_TEXT_COLOR_UPGRADES
* ABILITY_TOOLTIP_TEXT_COLOR_UPGRADE_TO_ABILITY
* ABILITY_TOOLTIP_TEXT_COLOR_USE_INFO_TYPE1
* ABILITY_TOOLTIP_TEXT_COLOR_USE_INFO_TYPE2
* ABILITY_TOOLTIP_TEXT_COLOR_USE_INFO_TYPE3
* ABILITY_TOOLTIP_TEXT_COLOR_VALID_REQUIREMENT


h5. ActiveCombatTipColors
* ACTIVE_COMBAT_TIP_COLOR_FAILURE
* ACTIVE_COMBAT_TIP_COLOR_NORMAL
* ACTIVE_COMBAT_TIP_COLOR_SUCCESS


h5. AttributeTooltipColors
* ATTRIBUTE_TOOLTIP_COLOR_CURRENT_VALUE
* ATTRIBUTE_TOOLTIP_COLOR_EFFECT
* ATTRIBUTE_TOOLTIP_COLOR_NAME


h5. BuffTypeColors
* BUFF_TYPE_COLOR_BUFF
* BUFF_TYPE_COLOR_DEBUFF


h5. CurrencyColors
* CURRENCY_COLOR_ALLIANCE_POINTS
* CURRENCY_COLOR_GOLD
* CURRENCY_COLOR_INSPIRATION
* CURRENCY_COLOR_RANK_POINTS
* CURRENCY_COLOR_TELVAR_STONES
* CURRENCY_COLOR_WRIT_VOUCHERS


h5. DeathInterfaceColors
* DEATH_INTERFACE_COLORS_RESPAWN_COOLDOWN_BAR
* DEATH_INTERFACE_COLORS_RESPAWN_COOLDOWN_FILL_GAMEPAD
* DEATH_INTERFACE_COLORS_RESPAWN_COOLDOWN_FILL_KEYBOARD


h5. GamepadTooltipColors
* GAMEPAD_TOOLTIP_COLOR_ABILITY_UPGRADE
* GAMEPAD_TOOLTIP_COLOR_ACTIVE
* GAMEPAD_TOOLTIP_COLOR_FAILED
* GAMEPAD_TOOLTIP_COLOR_GENERAL_COLOR_1
* GAMEPAD_TOOLTIP_COLOR_GENERAL_COLOR_2
* GAMEPAD_TOOLTIP_COLOR_GENERAL_COLOR_3
* GAMEPAD_TOOLTIP_COLOR_INACTIVE
* GAMEPAD_TOOLTIP_COLOR_SUCCEEDED


h5. InterfaceColorType
* INTERFACE_COLOR_TYPE_ABILITY_TOOLTIP
* INTERFACE_COLOR_TYPE_ACTIVE_COMBAT_TIP
* INTERFACE_COLOR_TYPE_ALLIANCE
* INTERFACE_COLOR_TYPE_ATTRIBUTE_TOOLTIP
* INTERFACE_COLOR_TYPE_ATTRIBUTE_UPGRADE_PROJECTED
* INTERFACE_COLOR_TYPE_BATTLEGROUND_ALLIANCE
* INTERFACE_COLOR_TYPE_BOOK_MEDIUM
* INTERFACE_COLOR_TYPE_BUFF_TYPE
* INTERFACE_COLOR_TYPE_CAST_BAR_END
* INTERFACE_COLOR_TYPE_CAST_BAR_START
* INTERFACE_COLOR_TYPE_CHAT_CHANNEL_CATEGORY_DEFAULTS
* INTERFACE_COLOR_TYPE_CON_COLORS
* INTERFACE_COLOR_TYPE_CURRENCY
* INTERFACE_COLOR_TYPE_DEATH_INTERFACE_COLORS
* INTERFACE_COLOR_TYPE_DEFAULT_COLOR
* INTERFACE_COLOR_TYPE_FINESSE
* INTERFACE_COLOR_TYPE_GAMEPAD_TOOLTIP
* INTERFACE_COLOR_TYPE_GENERAL
* INTERFACE_COLOR_TYPE_ITEM_QUALITY_COLORS
* INTERFACE_COLOR_TYPE_ITEM_TOOLTIP
* INTERFACE_COLOR_TYPE_KEEP_TOOLTIP
* INTERFACE_COLOR_TYPE_LEADERBOARD_COLORS
* INTERFACE_COLOR_TYPE_LEVEL_UP
* INTERFACE_COLOR_TYPE_LINK
* INTERFACE_COLOR_TYPE_LOADING_SCREEN
* INTERFACE_COLOR_TYPE_MAPPIN_TOOLTIP
* INTERFACE_COLOR_TYPE_MARKET_COLORS
* INTERFACE_COLOR_TYPE_NAME_PLATE
* INTERFACE_COLOR_TYPE_NAME_PLATE_HEALTH_END
* INTERFACE_COLOR_TYPE_NAME_PLATE_HEALTH_START
* INTERFACE_COLOR_TYPE_NAME_PLATE_HIT_INDICATOR
* INTERFACE_COLOR_TYPE_OBJECT_NOTIFICATION
* INTERFACE_COLOR_TYPE_POWER
* INTERFACE_COLOR_TYPE_POWER_END
* INTERFACE_COLOR_TYPE_POWER_FADE_IN
* INTERFACE_COLOR_TYPE_POWER_FADE_OUT
* INTERFACE_COLOR_TYPE_POWER_START
* INTERFACE_COLOR_TYPE_PROGRESSION
* INTERFACE_COLOR_TYPE_SHARED_TOOLTIP
* INTERFACE_COLOR_TYPE_SKILL_LINE_TOOLTIP
* INTERFACE_COLOR_TYPE_STATUS_EFFECT
* INTERFACE_COLOR_TYPE_STAT_VALUE
* INTERFACE_COLOR_TYPE_TEXT_COLORS
* INTERFACE_COLOR_TYPE_ULTIMATE_BAR
* INTERFACE_COLOR_TYPE_UNIT_CLASS
* INTERFACE_COLOR_TYPE_UNIT_HIGHLIGHT_OVERRIDE
* INTERFACE_COLOR_TYPE_UNIT_REACTION_COLOR
* INTERFACE_COLOR_TYPE_VOICE_CHAT_COLORS


h5. InterfaceGeneralColors
* INTERFACE_GENERAL_COLOR_ALERT
* INTERFACE_GENERAL_COLOR_BLACK
* INTERFACE_GENERAL_COLOR_DISABLED
* INTERFACE_GENERAL_COLOR_ENABLED
* INTERFACE_GENERAL_COLOR_ERROR
* INTERFACE_GENERAL_COLOR_STATUS_BAR_END
* INTERFACE_GENERAL_COLOR_STATUS_BAR_START
* INTERFACE_GENERAL_COLOR_WARNING


h5. InterfaceTextColor
* INTERFACE_TEXT_COLOR_BATTLEGROUND_WINNER
* INTERFACE_TEXT_COLOR_BLADE
* INTERFACE_TEXT_COLOR_BLADE_HIGHLIGHT
* INTERFACE_TEXT_COLOR_BODY
* INTERFACE_TEXT_COLOR_CHATTER_NPC
* INTERFACE_TEXT_COLOR_CHATTER_PLAYER_OPTION
* INTERFACE_TEXT_COLOR_CONTEXT_HIGHLIGHT
* INTERFACE_TEXT_COLOR_CONTRAST
* INTERFACE_TEXT_COLOR_CURRENCY_HIGHLIGHT
* INTERFACE_TEXT_COLOR_DEFAULT_TEXT
* INTERFACE_TEXT_COLOR_DISABLED
* INTERFACE_TEXT_COLOR_FAILED
* INTERFACE_TEXT_COLOR_GAMEPAD_CATEGORY_HEADER
* INTERFACE_TEXT_COLOR_GAMEPAD_TERTIARY
* INTERFACE_TEXT_COLOR_GAME_REPRESENTATIVE
* INTERFACE_TEXT_COLOR_HIGHLIGHT
* INTERFACE_TEXT_COLOR_HINT
* INTERFACE_TEXT_COLOR_NORMAL
* INTERFACE_TEXT_COLOR_PERSONALITY_EMOTES
* INTERFACE_TEXT_COLOR_SECOND_CONTRAST
* INTERFACE_TEXT_COLOR_SELECTED
* INTERFACE_TEXT_COLOR_SUBTLE
* INTERFACE_TEXT_COLOR_SUCCEEDED
* INTERFACE_TEXT_COLOR_TOOLTIP_DEFAULT
* INTERFACE_TEXT_COLOR_TOOLTIP_INSTRUCTIONAL
* INTERFACE_TEXT_COLOR_VALUE


h5. ItemTooltipColors
* ITEM_TOOLTIP_COLOR_ACCENT
* ITEM_TOOLTIP_COLOR_CHARGE_BAR_GRADIENT_END
* ITEM_TOOLTIP_COLOR_CHARGE_BAR_GRADIENT_START
* ITEM_TOOLTIP_COLOR_CLICK_TO_UPGRADE
* ITEM_TOOLTIP_COLOR_CONDITION_BAR_GRADIENT_END
* ITEM_TOOLTIP_COLOR_CONDITION_BAR_GRADIENT_START
* ITEM_TOOLTIP_COLOR_CREATOR
* ITEM_TOOLTIP_COLOR_DECONSTRUCTABLE
* ITEM_TOOLTIP_COLOR_EQUIPPED
* ITEM_TOOLTIP_COLOR_FAIL_CHECK
* ITEM_TOOLTIP_COLOR_FLAVOR_TEXT
* ITEM_TOOLTIP_COLOR_GENERAL
* ITEM_TOOLTIP_COLOR_INACTIVE_BONUS
* ITEM_TOOLTIP_COLOR_ITEM_LEVEL
* ITEM_TOOLTIP_COLOR_MISC
* ITEM_TOOLTIP_COLOR_ON_EQUIP
* ITEM_TOOLTIP_COLOR_ON_USE
* ITEM_TOOLTIP_COLOR_PASS_CHECK
* ITEM_TOOLTIP_COLOR_QUEST_ITEM_NAME
* ITEM_TOOLTIP_COLOR_SELLS_FOR
* ITEM_TOOLTIP_COLOR_SHOWING_EQUIPPED_ITEM
* ITEM_TOOLTIP_COLOR_SOCKET_EMPTY
* ITEM_TOOLTIP_COLOR_SOCKET_FULL
* ITEM_TOOLTIP_COLOR_SOCKET_PASS_CHECK
* ITEM_TOOLTIP_COLOR_STYLE
* ITEM_TOOLTIP_COLOR_TRADE_BOP


h5. KeepTooltipColors
* KEEP_TOOLTIP_COLOR_ACCESSIBLE
* KEEP_TOOLTIP_COLOR_ATTACK_LINE
* KEEP_TOOLTIP_COLOR_AT_KEEP
* KEEP_TOOLTIP_COLOR_NAME
* KEEP_TOOLTIP_COLOR_NORMAL_LINE
* KEEP_TOOLTIP_COLOR_NOT_ACCESSIBLE
* KEEP_TOOLTIP_COLOR_OWNER
* KEEP_TOOLTIP_COLOR_UNCLAIMED


h5. LeaderboardColors
* LEADERBOARD_COLORS_NAME
* LEADERBOARD_COLORS_PLAYER_NAME
* LEADERBOARD_COLORS_TOP_100_BANNER_TEXT
* LEADERBOARD_COLORS_TOP_20_BANNER_TEXT
* LEADERBOARD_COLORS_TOP_50_BANNER_TEXT


h5. LevelUpColors
* LEVEL_UP_COLOR_GAINED_TEXT
* LEVEL_UP_COLOR_GENERAL
* LEVEL_UP_COLOR_NEW_LEVEL


h5. LoadingScreenColors
* LOADING_SCREEN_COLOR_BAR_END
* LOADING_SCREEN_COLOR_BAR_START


h5. MapPinTooltipColors
* MAP_PIN_TOOLTIP_COLOR_AVA_OBJECTIVE
* MAP_PIN_TOOLTIP_COLOR_INTERACTABLE
* MAP_PIN_TOOLTIP_COLOR_MAP_PING
* MAP_PIN_TOOLTIP_COLOR_POI
* MAP_PIN_TOOLTIP_COLOR_QUEST_ENDING
* MAP_PIN_TOOLTIP_COLOR_RALLY_POINT


h5. MarketColors
* MARKET_COLORS_CALLOUT_BACKGROUND
* MARKET_COLORS_CALLOUT_BACKGROUND_DIMMED
* MARKET_COLORS_DIMMED
* MARKET_COLORS_INELIGIBLE
* MARKET_COLORS_INELIGIBLE_DIMMED
* MARKET_COLORS_NEW
* MARKET_COLORS_NEW_DIMMED
* MARKET_COLORS_ON_SALE
* MARKET_COLORS_ON_SALE_DIMMED
* MARKET_COLORS_PRODUCT_BACKGROUND_BRIGHTNESS
* MARKET_COLORS_PURCHASED
* MARKET_COLORS_PURCHASED_DIMMED
* MARKET_COLORS_SELECTED
* MARKET_COLORS_UNIVERSAL_ITEM
* MARKET_COLORS_UNIVERSAL_ITEM_SELECTED


h5. ProgressionColors
* PROGRESSION_COLOR_AVA_RANK_END
* PROGRESSION_COLOR_AVA_RANK_START
* PROGRESSION_COLOR_CP_HEALTH_END
* PROGRESSION_COLOR_CP_HEALTH_START
* PROGRESSION_COLOR_CP_MAGICKA_END
* PROGRESSION_COLOR_CP_MAGICKA_START
* PROGRESSION_COLOR_CP_STAMINA_END
* PROGRESSION_COLOR_CP_STAMINA_START
* PROGRESSION_COLOR_EARNED
* PROGRESSION_COLOR_LOCKED
* PROGRESSION_COLOR_PURCHASED
* PROGRESSION_COLOR_PURCHASED_UNSELECTED
* PROGRESSION_COLOR_SKILL_XP_END
* PROGRESSION_COLOR_SKILL_XP_GLOW
* PROGRESSION_COLOR_SKILL_XP_START
* PROGRESSION_COLOR_UNEARNED
* PROGRESSION_COLOR_UNPURCHASED
* PROGRESSION_COLOR_VP_END
* PROGRESSION_COLOR_VP_GLOW
* PROGRESSION_COLOR_VP_START
* PROGRESSION_COLOR_XP_END
* PROGRESSION_COLOR_XP_FULL_END
* PROGRESSION_COLOR_XP_FULL_START
* PROGRESSION_COLOR_XP_GLOW
* PROGRESSION_COLOR_XP_MORPH_END
* PROGRESSION_COLOR_XP_MORPH_START
* PROGRESSION_COLOR_XP_START


h5. SkillLineTooltipTextColors
* SKILL_TOOLTIP_TEXT_COLOR_BODY
* SKILL_TOOLTIP_TEXT_COLOR_NAME


h5. StatValueColors
* STAT_VALUE_COLOR_BATTLE_LEVELED
* STAT_VALUE_COLOR_HIGHER
* STAT_VALUE_COLOR_LOWER


h5. UltimateBarColors
* ULTIMATE_BAR_COLOR_BAR_END
* ULTIMATE_BAR_COLOR_BAR_START
* ULTIMATE_BAR_COLOR_FULL_BAR_END
* ULTIMATE_BAR_COLOR_FULL_BAR_START


h5. VoiceChatColors
* VOICE_CHAT_COLORS_AREA
* VOICE_CHAT_COLORS_GROUP
* VOICE_CHAT_COLORS_GUILD
* VOICE_CHAT_COLORS_MUTED


h5. Globals


h5. ActiveWeaponPair
* ACTIVE_WEAPON_PAIR_BACKUP
* ACTIVE_WEAPON_PAIR_MAIN
* ACTIVE_WEAPON_PAIR_NONE


h5. ArmorType
* ARMORTYPE_HEAVY
* ARMORTYPE_LIGHT
* ARMORTYPE_MEDIUM
* ARMORTYPE_NONE


h5. Bag
* BAG_BACKPACK
* BAG_BANK
* BAG_BUYBACK
* BAG_GUILDBANK
* BAG_SUBSCRIBER_BANK
* BAG_VIRTUAL
* BAG_WORN


h5. BindType
* BIND_TYPE_NONE
* BIND_TYPE_ON_EQUIP
* BIND_TYPE_ON_PICKUP
* BIND_TYPE_ON_PICKUP_BACKPACK
* BIND_TYPE_UNSET


h5. CollectibleItemType
* COLLECTIBLE_ITEM_TYPE_FISH
* COLLECTIBLE_ITEM_TYPE_NONE
* COLLECTIBLE_ITEM_TYPE_TROPHY


h5. EnchantingRuneClassification
* ENCHANTING_RUNE_ASPECT
* ENCHANTING_RUNE_ESSENCE
* ENCHANTING_RUNE_NONE
* ENCHANTING_RUNE_POTENCY


h5. EnchantmentSearchCategoryType
* ENCHANTMENT_SEARCH_CATEGORY_ABSORB_HEALTH
* ENCHANTMENT_SEARCH_CATEGORY_ABSORB_MAGICKA
* ENCHANTMENT_SEARCH_CATEGORY_ABSORB_STAMINA
* ENCHANTMENT_SEARCH_CATEGORY_BEFOULED_WEAPON
* ENCHANTMENT_SEARCH_CATEGORY_BERSERKER
* ENCHANTMENT_SEARCH_CATEGORY_CHARGED_WEAPON
* ENCHANTMENT_SEARCH_CATEGORY_DAMAGE_HEALTH
* ENCHANTMENT_SEARCH_CATEGORY_DAMAGE_SHIELD
* ENCHANTMENT_SEARCH_CATEGORY_DECREASE_PHYSICAL_DAMAGE
* ENCHANTMENT_SEARCH_CATEGORY_DECREASE_SPELL_DAMAGE
* ENCHANTMENT_SEARCH_CATEGORY_DISEASE_RESISTANT
* ENCHANTMENT_SEARCH_CATEGORY_FIERY_WEAPON
* ENCHANTMENT_SEARCH_CATEGORY_FIRE_RESISTANT
* ENCHANTMENT_SEARCH_CATEGORY_FROST_RESISTANT
* ENCHANTMENT_SEARCH_CATEGORY_FROZEN_WEAPON
* ENCHANTMENT_SEARCH_CATEGORY_HEALTH
* ENCHANTMENT_SEARCH_CATEGORY_HEALTH_REGEN
* ENCHANTMENT_SEARCH_CATEGORY_INCREASE_BASH_DAMAGE
* ENCHANTMENT_SEARCH_CATEGORY_INCREASE_PHYSICAL_DAMAGE
* ENCHANTMENT_SEARCH_CATEGORY_INCREASE_POTION_EFFECTIVENESS
* ENCHANTMENT_SEARCH_CATEGORY_INCREASE_SPELL_DAMAGE
* ENCHANTMENT_SEARCH_CATEGORY_MAGICKA
* ENCHANTMENT_SEARCH_CATEGORY_MAGICKA_REGEN
* ENCHANTMENT_SEARCH_CATEGORY_NONE
* ENCHANTMENT_SEARCH_CATEGORY_OTHER
* ENCHANTMENT_SEARCH_CATEGORY_POISONED_WEAPON
* ENCHANTMENT_SEARCH_CATEGORY_POISON_RESISTANT
* ENCHANTMENT_SEARCH_CATEGORY_REDUCE_ARMOR
* ENCHANTMENT_SEARCH_CATEGORY_REDUCE_BLOCK_AND_BASH
* ENCHANTMENT_SEARCH_CATEGORY_REDUCE_FEAT_COST
* ENCHANTMENT_SEARCH_CATEGORY_REDUCE_POTION_COOLDOWN
* ENCHANTMENT_SEARCH_CATEGORY_REDUCE_POWER
* ENCHANTMENT_SEARCH_CATEGORY_REDUCE_SPELL_COST
* ENCHANTMENT_SEARCH_CATEGORY_SHOCK_RESISTANT
* ENCHANTMENT_SEARCH_CATEGORY_STAMINA
* ENCHANTMENT_SEARCH_CATEGORY_STAMINA_REGEN


h5. EquipSlot
* EQUIP_SLOT_BACKUP_MAIN
* EQUIP_SLOT_BACKUP_OFF
* EQUIP_SLOT_BACKUP_POISON
* EQUIP_SLOT_CHEST
* EQUIP_SLOT_CLASS1
* EQUIP_SLOT_CLASS2
* EQUIP_SLOT_CLASS3
* EQUIP_SLOT_COSTUME
* EQUIP_SLOT_FEET
* EQUIP_SLOT_HAND
* EQUIP_SLOT_HEAD
* EQUIP_SLOT_LEGS
* EQUIP_SLOT_MAIN_HAND
* EQUIP_SLOT_NECK
* EQUIP_SLOT_NONE
* EQUIP_SLOT_OFF_HAND
* EQUIP_SLOT_POISON
* EQUIP_SLOT_RANGED
* EQUIP_SLOT_RING1
* EQUIP_SLOT_RING2
* EQUIP_SLOT_SHOULDERS
* EQUIP_SLOT_WAIST
* EQUIP_SLOT_WRIST


h5. EquipSlotVisualCategory
* EQUIP_SLOT_VISUAL_CATEGORY_ACCESSORIES
* EQUIP_SLOT_VISUAL_CATEGORY_APPAREL
* EQUIP_SLOT_VISUAL_CATEGORY_NONE
* EQUIP_SLOT_VISUAL_CATEGORY_WEAPONS


h5. EquipType
* EQUIP_TYPE_CHEST
* EQUIP_TYPE_COSTUME
* EQUIP_TYPE_FEET
* EQUIP_TYPE_HAND
* EQUIP_TYPE_HEAD
* EQUIP_TYPE_INVALID
* EQUIP_TYPE_LEGS
* EQUIP_TYPE_MAIN_HAND
* EQUIP_TYPE_NECK
* EQUIP_TYPE_OFF_HAND
* EQUIP_TYPE_ONE_HAND
* EQUIP_TYPE_POISON
* EQUIP_TYPE_RING
* EQUIP_TYPE_SHOULDERS
* EQUIP_TYPE_TWO_HAND
* EQUIP_TYPE_WAIST


h5. EquipmentBonus
* EQUIPMENT_BONUS_AVERAGE
* EQUIPMENT_BONUS_EXTRAORDINARY
* EQUIPMENT_BONUS_FAIR
* EQUIPMENT_BONUS_HIGH
* EQUIPMENT_BONUS_LOW
* EQUIPMENT_BONUS_SUPERIOR


h5. GamepadItemCategory
* GAMEPAD_ITEM_CATEGORY_ALCHEMY
* GAMEPAD_ITEM_CATEGORY_AMULET
* GAMEPAD_ITEM_CATEGORY_AXE
* GAMEPAD_ITEM_CATEGORY_BAIT
* GAMEPAD_ITEM_CATEGORY_BLACKSMITH
* GAMEPAD_ITEM_CATEGORY_BOW
* GAMEPAD_ITEM_CATEGORY_CHEST
* GAMEPAD_ITEM_CATEGORY_CLOTHIER
* GAMEPAD_ITEM_CATEGORY_CONSUMABLE
* GAMEPAD_ITEM_CATEGORY_COSTUME
* GAMEPAD_ITEM_CATEGORY_DAGGER
* GAMEPAD_ITEM_CATEGORY_ENCHANTING
* GAMEPAD_ITEM_CATEGORY_FEET
* GAMEPAD_ITEM_CATEGORY_GLYPHS
* GAMEPAD_ITEM_CATEGORY_HAMMER
* GAMEPAD_ITEM_CATEGORY_HANDS
* GAMEPAD_ITEM_CATEGORY_HEAD
* GAMEPAD_ITEM_CATEGORY_HEAVY_ARMOR
* GAMEPAD_ITEM_CATEGORY_JEWELRY
* GAMEPAD_ITEM_CATEGORY_LEGS
* GAMEPAD_ITEM_CATEGORY_LIGHT_ARMOR
* GAMEPAD_ITEM_CATEGORY_MEDIUM_ARMOR
* GAMEPAD_ITEM_CATEGORY_POTION
* GAMEPAD_ITEM_CATEGORY_PROVISIONING
* GAMEPAD_ITEM_CATEGORY_RING
* GAMEPAD_ITEM_CATEGORY_SHIELD
* GAMEPAD_ITEM_CATEGORY_SHOULDERS
* GAMEPAD_ITEM_CATEGORY_SIEGE
* GAMEPAD_ITEM_CATEGORY_SOUL_GEM
* GAMEPAD_ITEM_CATEGORY_SPELLCRAFTING
* GAMEPAD_ITEM_CATEGORY_STAFF
* GAMEPAD_ITEM_CATEGORY_STYLE_MATERIAL
* GAMEPAD_ITEM_CATEGORY_SWORD
* GAMEPAD_ITEM_CATEGORY_TOOL
* GAMEPAD_ITEM_CATEGORY_TRAIT_GEM
* GAMEPAD_ITEM_CATEGORY_TROPHY
* GAMEPAD_ITEM_CATEGORY_WAIST
* GAMEPAD_ITEM_CATEGORY_WEAPONS
* GAMEPAD_ITEM_CATEGORY_WOODWORKING


h5. GamepadWeaponCategory
* GAMEPAD_WEAPON_CATEGORY_DESTRUCTION_STAFF
* GAMEPAD_WEAPON_CATEGORY_ONE_HANDED_MELEE
* GAMEPAD_WEAPON_CATEGORY_RESTORATION_STAFF
* GAMEPAD_WEAPON_CATEGORY_TWO_HANDED_BOW
* GAMEPAD_WEAPON_CATEGORY_TWO_HANDED_MELEE
* GAMEPAD_WEAPON_CATEGORY_UNCATEGORIZED


h5. ItemFilterType
* ITEMFILTERTYPE_ALCHEMY
* ITEMFILTERTYPE_ALL
* ITEMFILTERTYPE_ARMOR
* ITEMFILTERTYPE_BLACKSMITHING
* ITEMFILTERTYPE_BUYBACK
* ITEMFILTERTYPE_CLOTHING
* ITEMFILTERTYPE_COLLECTIBLE
* ITEMFILTERTYPE_CONSUMABLE
* ITEMFILTERTYPE_CRAFTING
* ITEMFILTERTYPE_DAMAGED
* ITEMFILTERTYPE_ENCHANTING
* ITEMFILTERTYPE_FURNISHING
* ITEMFILTERTYPE_HOUSE_WITH_TEMPLATE
* ITEMFILTERTYPE_JUNK
* ITEMFILTERTYPE_MISCELLANEOUS
* ITEMFILTERTYPE_PROVISIONING
* ITEMFILTERTYPE_QUEST
* ITEMFILTERTYPE_QUICKSLOT
* ITEMFILTERTYPE_REUSE
* ITEMFILTERTYPE_STYLE_MATERIALS
* ITEMFILTERTYPE_TRAIT_ITEMS
* ITEMFILTERTYPE_WEAPONS
* ITEMFILTERTYPE_WOODWORKING


h5. ItemQuality
* ITEM_QUALITY_ARCANE
* ITEM_QUALITY_ARTIFACT
* ITEM_QUALITY_LEGENDARY
* ITEM_QUALITY_MAGIC
* ITEM_QUALITY_NORMAL
* ITEM_QUALITY_TRASH


h5. ItemStyleChapter
* ITEM_STYLE_CHAPTER_ALL
* ITEM_STYLE_CHAPTER_AXES
* ITEM_STYLE_CHAPTER_BELTS
* ITEM_STYLE_CHAPTER_BOOTS
* ITEM_STYLE_CHAPTER_BOWS
* ITEM_STYLE_CHAPTER_CHESTS
* ITEM_STYLE_CHAPTER_DAGGERS
* ITEM_STYLE_CHAPTER_GLOVES
* ITEM_STYLE_CHAPTER_HELMETS
* ITEM_STYLE_CHAPTER_LEGS
* ITEM_STYLE_CHAPTER_MACES
* ITEM_STYLE_CHAPTER_SHIELDS
* ITEM_STYLE_CHAPTER_SHOULDERS
* ITEM_STYLE_CHAPTER_STAVES
* ITEM_STYLE_CHAPTER_SWORDS


h5. ItemTagCategory
* TAG_CATEGORY_FURNITURE_BEHAVIOR
* TAG_CATEGORY_NONE
* TAG_CATEGORY_TREASURE_TYPE


h5. ItemTraitType
* ITEM_TRAIT_TYPE_ARMOR_DIVINES
* ITEM_TRAIT_TYPE_ARMOR_IMPENETRABLE
* ITEM_TRAIT_TYPE_ARMOR_INFUSED
* ITEM_TRAIT_TYPE_ARMOR_INTRICATE
* ITEM_TRAIT_TYPE_ARMOR_NIRNHONED
* ITEM_TRAIT_TYPE_ARMOR_ORNATE
* ITEM_TRAIT_TYPE_ARMOR_PROSPEROUS
* ITEM_TRAIT_TYPE_ARMOR_REINFORCED
* ITEM_TRAIT_TYPE_ARMOR_STURDY
* ITEM_TRAIT_TYPE_ARMOR_TRAINING
* ITEM_TRAIT_TYPE_ARMOR_WELL_FITTED
* ITEM_TRAIT_TYPE_DEPRECATED
* ITEM_TRAIT_TYPE_JEWELRY_ARCANE
* ITEM_TRAIT_TYPE_JEWELRY_HEALTHY
* ITEM_TRAIT_TYPE_JEWELRY_ORNATE
* ITEM_TRAIT_TYPE_JEWELRY_ROBUST
* ITEM_TRAIT_TYPE_NONE
* ITEM_TRAIT_TYPE_WEAPON_CHARGED
* ITEM_TRAIT_TYPE_WEAPON_DECISIVE
* ITEM_TRAIT_TYPE_WEAPON_DEFENDING
* ITEM_TRAIT_TYPE_WEAPON_INFUSED
* ITEM_TRAIT_TYPE_WEAPON_INTRICATE
* ITEM_TRAIT_TYPE_WEAPON_NIRNHONED
* ITEM_TRAIT_TYPE_WEAPON_ORNATE
* ITEM_TRAIT_TYPE_WEAPON_POWERED
* ITEM_TRAIT_TYPE_WEAPON_PRECISE
* ITEM_TRAIT_TYPE_WEAPON_SHARPENED
* ITEM_TRAIT_TYPE_WEAPON_TRAINING


h5. ItemType
* ITEMTYPE_ADDITIVE
* ITEMTYPE_ARMOR
* ITEMTYPE_ARMOR_BOOSTER
* ITEMTYPE_ARMOR_TRAIT
* ITEMTYPE_AVA_REPAIR
* ITEMTYPE_BLACKSMITHING_BOOSTER
* ITEMTYPE_BLACKSMITHING_MATERIAL
* ITEMTYPE_BLACKSMITHING_RAW_MATERIAL
* ITEMTYPE_CLOTHIER_BOOSTER
* ITEMTYPE_CLOTHIER_MATERIAL
* ITEMTYPE_CLOTHIER_RAW_MATERIAL
* ITEMTYPE_COLLECTIBLE
* ITEMTYPE_CONTAINER
* ITEMTYPE_COSTUME
* ITEMTYPE_CROWN_ITEM
* ITEMTYPE_CROWN_REPAIR
* ITEMTYPE_DEPRECATED
* ITEMTYPE_DISGUISE
* ITEMTYPE_DRINK
* ITEMTYPE_DYE_STAMP
* ITEMTYPE_ENCHANTING_RUNE_ASPECT
* ITEMTYPE_ENCHANTING_RUNE_ESSENCE
* ITEMTYPE_ENCHANTING_RUNE_POTENCY
* ITEMTYPE_ENCHANTMENT_BOOSTER
* ITEMTYPE_FISH
* ITEMTYPE_FLAVORING
* ITEMTYPE_FOOD
* ITEMTYPE_FURNISHING
* ITEMTYPE_FURNISHING_MATERIAL
* ITEMTYPE_GLYPH_ARMOR
* ITEMTYPE_GLYPH_JEWELRY
* ITEMTYPE_GLYPH_WEAPON
* ITEMTYPE_INGREDIENT
* ITEMTYPE_LOCKPICK
* ITEMTYPE_LURE
* ITEMTYPE_MASTER_WRIT
* ITEMTYPE_MOUNT
* ITEMTYPE_NONE
* ITEMTYPE_PLUG
* ITEMTYPE_POISON
* ITEMTYPE_POISON_BASE
* ITEMTYPE_POTION
* ITEMTYPE_POTION_BASE
* ITEMTYPE_RACIAL_STYLE_MOTIF
* ITEMTYPE_RAW_MATERIAL
* ITEMTYPE_REAGENT
* ITEMTYPE_RECIPE
* ITEMTYPE_SIEGE
* ITEMTYPE_SOUL_GEM
* ITEMTYPE_SPELLCRAFTING_TABLET
* ITEMTYPE_SPICE
* ITEMTYPE_STYLE_MATERIAL
* ITEMTYPE_TABARD
* ITEMTYPE_TOOL
* ITEMTYPE_TRASH
* ITEMTYPE_TREASURE
* ITEMTYPE_TROPHY
* ITEMTYPE_WEAPON
* ITEMTYPE_WEAPON_BOOSTER
* ITEMTYPE_WEAPON_TRAIT
* ITEMTYPE_WOODWORKING_BOOSTER
* ITEMTYPE_WOODWORKING_MATERIAL
* ITEMTYPE_WOODWORKING_RAW_MATERIAL


h5. ItemUISoundAction
* ITEM_SOUND_ACTION_ACQUIRE
* ITEM_SOUND_ACTION_CRAFTED
* ITEM_SOUND_ACTION_DESTROY
* ITEM_SOUND_ACTION_EQUIP
* ITEM_SOUND_ACTION_PICKUP
* ITEM_SOUND_ACTION_SLOT
* ITEM_SOUND_ACTION_UNEQUIP
* ITEM_SOUND_ACTION_USE


h5. ItemUISoundCategory
* ITEM_SOUND_CATEGORY_ANIMAL_COMPONENT
* ITEM_SOUND_CATEGORY_BATTLEFLAG
* ITEM_SOUND_CATEGORY_BOOK
* ITEM_SOUND_CATEGORY_BOOSTER
* ITEM_SOUND_CATEGORY_BOW
* ITEM_SOUND_CATEGORY_BREAD
* ITEM_SOUND_CATEGORY_CLOTH_COMPONENT
* ITEM_SOUND_CATEGORY_CUSTOM_SOUND
* ITEM_SOUND_CATEGORY_DAGGER
* ITEM_SOUND_CATEGORY_DEFAULT
* ITEM_SOUND_CATEGORY_DRINK
* ITEM_SOUND_CATEGORY_ENCHANTMENT
* ITEM_SOUND_CATEGORY_FISH
* ITEM_SOUND_CATEGORY_FOOD
* ITEM_SOUND_CATEGORY_FOOTLOCKER
* ITEM_SOUND_CATEGORY_HEAVY_ARMOR
* ITEM_SOUND_CATEGORY_INGREDIENT
* ITEM_SOUND_CATEGORY_LIGHT_ARMOR
* ITEM_SOUND_CATEGORY_LURE
* ITEM_SOUND_CATEGORY_MEAT
* ITEM_SOUND_CATEGORY_MEDIUM_ARMOR
* ITEM_SOUND_CATEGORY_METAL_COMPONENT
* ITEM_SOUND_CATEGORY_MINERAL_COMPONENT
* ITEM_SOUND_CATEGORY_NECKLACE
* ITEM_SOUND_CATEGORY_NONE
* ITEM_SOUND_CATEGORY_ONE_HAND_AX
* ITEM_SOUND_CATEGORY_ONE_HAND_HAMMER
* ITEM_SOUND_CATEGORY_ONE_HAND_SWORD
* ITEM_SOUND_CATEGORY_PLANT_COMPONENT
* ITEM_SOUND_CATEGORY_POTION
* ITEM_SOUND_CATEGORY_REPAIR_KIT
* ITEM_SOUND_CATEGORY_RING
* ITEM_SOUND_CATEGORY_RUNE
* ITEM_SOUND_CATEGORY_SCROLL
* ITEM_SOUND_CATEGORY_SHIELD
* ITEM_SOUND_CATEGORY_SIEGE
* ITEM_SOUND_CATEGORY_SOUL_GEM
* ITEM_SOUND_CATEGORY_STAFF
* ITEM_SOUND_CATEGORY_STEW
* ITEM_SOUND_CATEGORY_TABARD
* ITEM_SOUND_CATEGORY_TRASH_LOOT
* ITEM_SOUND_CATEGORY_TWO_HAND_AX
* ITEM_SOUND_CATEGORY_TWO_HAND_HAMMER
* ITEM_SOUND_CATEGORY_TWO_HAND_SWORD
* ITEM_SOUND_CATEGORY_UNUSED
* ITEM_SOUND_CATEGORY_WOOD_COMPONENT


h5. ItemUseType
* ITEM_USE_TYPE_COSTUME_DYE_STAMP
* ITEM_USE_TYPE_DEPRECATED
* ITEM_USE_TYPE_ITEM_DYE_STAMP
* ITEM_USE_TYPE_NONE
* ITEM_USE_TYPE_PLEDGE_OF_MARA
* ITEM_USE_TYPE_RECIPE
* ITEM_USE_TYPE_VANITY_PET


h5. SocketType
* SOCKET_TYPE_AMMO
* SOCKET_TYPE_ENCHANTMENT
* SOCKET_TYPE_LAUNCH_VELOCITY
* SOCKET_TYPE_NONE
* SOCKET_TYPE_PRECISION
* SOCKET_TYPE_TOUGHNESS


h5. SoulGemType
* SOUL_GEM_TYPE_EMPTY
* SOUL_GEM_TYPE_FILLED


h5. SpecializedItemType
* SPECIALIZED_ITEMTYPE_ADDITIVE
* SPECIALIZED_ITEMTYPE_ARMOR
* SPECIALIZED_ITEMTYPE_ARMOR_BOOSTER
* SPECIALIZED_ITEMTYPE_ARMOR_TRAIT
* SPECIALIZED_ITEMTYPE_AVA_REPAIR
* SPECIALIZED_ITEMTYPE_BLACKSMITHING_BOOSTER
* SPECIALIZED_ITEMTYPE_BLACKSMITHING_MATERIAL
* SPECIALIZED_ITEMTYPE_BLACKSMITHING_RAW_MATERIAL
* SPECIALIZED_ITEMTYPE_CLOTHIER_BOOSTER
* SPECIALIZED_ITEMTYPE_CLOTHIER_MATERIAL
* SPECIALIZED_ITEMTYPE_CLOTHIER_RAW_MATERIAL
* SPECIALIZED_ITEMTYPE_COLLECTIBLE_MONSTER_TROPHY
* SPECIALIZED_ITEMTYPE_COLLECTIBLE_RARE_FISH
* SPECIALIZED_ITEMTYPE_CONTAINER
* SPECIALIZED_ITEMTYPE_CONTAINER_EVENT
* SPECIALIZED_ITEMTYPE_COSTUME
* SPECIALIZED_ITEMTYPE_CROWN_ITEM
* SPECIALIZED_ITEMTYPE_CROWN_REPAIR
* SPECIALIZED_ITEMTYPE_DISGUISE
* SPECIALIZED_ITEMTYPE_DRINK_ALCOHOLIC
* SPECIALIZED_ITEMTYPE_DRINK_CORDIAL_TEA
* SPECIALIZED_ITEMTYPE_DRINK_DISTILLATE
* SPECIALIZED_ITEMTYPE_DRINK_LIQUEUR
* SPECIALIZED_ITEMTYPE_DRINK_TEA
* SPECIALIZED_ITEMTYPE_DRINK_TINCTURE
* SPECIALIZED_ITEMTYPE_DRINK_TONIC
* SPECIALIZED_ITEMTYPE_DRINK_UNIQUE
* SPECIALIZED_ITEMTYPE_DYE_STAMP
* SPECIALIZED_ITEMTYPE_ENCHANTING_RUNE_ASPECT
* SPECIALIZED_ITEMTYPE_ENCHANTING_RUNE_ESSENCE
* SPECIALIZED_ITEMTYPE_ENCHANTING_RUNE_POTENCY
* SPECIALIZED_ITEMTYPE_ENCHANTMENT_BOOSTER
* SPECIALIZED_ITEMTYPE_FISH
* SPECIALIZED_ITEMTYPE_FLAVORING
* SPECIALIZED_ITEMTYPE_FOOD_ENTREMET
* SPECIALIZED_ITEMTYPE_FOOD_FRUIT
* SPECIALIZED_ITEMTYPE_FOOD_GOURMET
* SPECIALIZED_ITEMTYPE_FOOD_MEAT
* SPECIALIZED_ITEMTYPE_FOOD_RAGOUT
* SPECIALIZED_ITEMTYPE_FOOD_SAVOURY
* SPECIALIZED_ITEMTYPE_FOOD_UNIQUE
* SPECIALIZED_ITEMTYPE_FOOD_VEGETABLE
* SPECIALIZED_ITEMTYPE_FURNISHING_CRAFTING_STATION
* SPECIALIZED_ITEMTYPE_FURNISHING_LIGHT
* SPECIALIZED_ITEMTYPE_FURNISHING_MATERIAL_ALCHEMY
* SPECIALIZED_ITEMTYPE_FURNISHING_MATERIAL_BLACKSMITHING
* SPECIALIZED_ITEMTYPE_FURNISHING_MATERIAL_CLOTHIER
* SPECIALIZED_ITEMTYPE_FURNISHING_MATERIAL_ENCHANTING
* SPECIALIZED_ITEMTYPE_FURNISHING_MATERIAL_PROVISIONING
* SPECIALIZED_ITEMTYPE_FURNISHING_MATERIAL_WOODWORKING
* SPECIALIZED_ITEMTYPE_FURNISHING_ORNAMENTAL
* SPECIALIZED_ITEMTYPE_FURNISHING_SEATING
* SPECIALIZED_ITEMTYPE_FURNISHING_TARGET_DUMMY
* SPECIALIZED_ITEMTYPE_GLYPH_ARMOR
* SPECIALIZED_ITEMTYPE_GLYPH_JEWELRY
* SPECIALIZED_ITEMTYPE_GLYPH_WEAPON
* SPECIALIZED_ITEMTYPE_INGREDIENT_ALCOHOL
* SPECIALIZED_ITEMTYPE_INGREDIENT_DRINK_ADDITIVE
* SPECIALIZED_ITEMTYPE_INGREDIENT_FOOD_ADDITIVE
* SPECIALIZED_ITEMTYPE_INGREDIENT_FRUIT
* SPECIALIZED_ITEMTYPE_INGREDIENT_MEAT
* SPECIALIZED_ITEMTYPE_INGREDIENT_RARE
* SPECIALIZED_ITEMTYPE_INGREDIENT_TEA
* SPECIALIZED_ITEMTYPE_INGREDIENT_TONIC
* SPECIALIZED_ITEMTYPE_INGREDIENT_VEGETABLE
* SPECIALIZED_ITEMTYPE_LOCKPICK
* SPECIALIZED_ITEMTYPE_LURE
* SPECIALIZED_ITEMTYPE_MASTER_WRIT
* SPECIALIZED_ITEMTYPE_MOUNT
* SPECIALIZED_ITEMTYPE_NONE
* SPECIALIZED_ITEMTYPE_PLUG
* SPECIALIZED_ITEMTYPE_POISON
* SPECIALIZED_ITEMTYPE_POISON_BASE
* SPECIALIZED_ITEMTYPE_POTION
* SPECIALIZED_ITEMTYPE_POTION_BASE
* SPECIALIZED_ITEMTYPE_RACIAL_STYLE_MOTIF_BOOK
* SPECIALIZED_ITEMTYPE_RACIAL_STYLE_MOTIF_CHAPTER
* SPECIALIZED_ITEMTYPE_RAW_MATERIAL
* SPECIALIZED_ITEMTYPE_REAGENT_ANIMAL_PART
* SPECIALIZED_ITEMTYPE_REAGENT_FUNGUS
* SPECIALIZED_ITEMTYPE_REAGENT_HERB
* SPECIALIZED_ITEMTYPE_RECIPE_ALCHEMY_FORMULA_FURNISHING
* SPECIALIZED_ITEMTYPE_RECIPE_BLACKSMITHING_DIAGRAM_FURNISHING
* SPECIALIZED_ITEMTYPE_RECIPE_CLOTHIER_PATTERN_FURNISHING
* SPECIALIZED_ITEMTYPE_RECIPE_ENCHANTING_SCHEMATIC_FURNISHING
* SPECIALIZED_ITEMTYPE_RECIPE_PROVISIONING_DESIGN_FURNISHING
* SPECIALIZED_ITEMTYPE_RECIPE_PROVISIONING_STANDARD_DRINK
* SPECIALIZED_ITEMTYPE_RECIPE_PROVISIONING_STANDARD_FOOD
* SPECIALIZED_ITEMTYPE_RECIPE_WOODWORKING_BLUEPRINT_FURNISHING
* SPECIALIZED_ITEMTYPE_SIEGE_BALLISTA
* SPECIALIZED_ITEMTYPE_SIEGE_BATTLE_STANDARD
* SPECIALIZED_ITEMTYPE_SIEGE_CATAPULT
* SPECIALIZED_ITEMTYPE_SIEGE_GRAVEYARD
* SPECIALIZED_ITEMTYPE_SIEGE_MONSTER
* SPECIALIZED_ITEMTYPE_SIEGE_OIL
* SPECIALIZED_ITEMTYPE_SIEGE_RAM
* SPECIALIZED_ITEMTYPE_SIEGE_TREBUCHET
* SPECIALIZED_ITEMTYPE_SIEGE_UNIVERSAL
* SPECIALIZED_ITEMTYPE_SOUL_GEM
* SPECIALIZED_ITEMTYPE_SPELLCRAFTING_TABLET
* SPECIALIZED_ITEMTYPE_SPICE
* SPECIALIZED_ITEMTYPE_STYLE_MATERIAL
* SPECIALIZED_ITEMTYPE_TABARD
* SPECIALIZED_ITEMTYPE_TOOL
* SPECIALIZED_ITEMTYPE_TRASH
* SPECIALIZED_ITEMTYPE_TREASURE
* SPECIALIZED_ITEMTYPE_TROPHY_KEY
* SPECIALIZED_ITEMTYPE_TROPHY_KEY_FRAGMENT
* SPECIALIZED_ITEMTYPE_TROPHY_MATERIAL_UPGRADER
* SPECIALIZED_ITEMTYPE_TROPHY_MUSEUM_PIECE
* SPECIALIZED_ITEMTYPE_TROPHY_RECIPE_FRAGMENT
* SPECIALIZED_ITEMTYPE_TROPHY_RUNEBOX_FRAGMENT
* SPECIALIZED_ITEMTYPE_TROPHY_SCROLL
* SPECIALIZED_ITEMTYPE_TROPHY_SURVEY_REPORT
* SPECIALIZED_ITEMTYPE_TROPHY_TREASURE_MAP
* SPECIALIZED_ITEMTYPE_WEAPON
* SPECIALIZED_ITEMTYPE_WEAPON_BOOSTER
* SPECIALIZED_ITEMTYPE_WEAPON_TRAIT
* SPECIALIZED_ITEMTYPE_WOODWORKING_BOOSTER
* SPECIALIZED_ITEMTYPE_WOODWORKING_MATERIAL
* SPECIALIZED_ITEMTYPE_WOODWORKING_RAW_MATERIAL


h5. VisualLayer
* VISUAL_LAYER_COSTUME
* VISUAL_LAYER_DISGUISE
* VISUAL_LAYER_EQUIPMENT
* VISUAL_LAYER_HEADWEAR
* VISUAL_LAYER_HIDE_HELM_OPTION
* VISUAL_LAYER_NONE
* VISUAL_LAYER_POLYMORPH
* VISUAL_LAYER_SKIN
* VISUAL_LAYER_WEREWOLF


h5. VisualSlot
* VISUAL_SLOT_CHEST
* VISUAL_SLOT_COSTUME
* VISUAL_SLOT_FEET
* VISUAL_SLOT_HAND
* VISUAL_SLOT_HEAD_ADORNMENTS
* VISUAL_SLOT_HELM
* VISUAL_SLOT_LEGS
* VISUAL_SLOT_NONE
* VISUAL_SLOT_SHOULDERS
* VISUAL_SLOT_SKIN
* VISUAL_SLOT_WAIST
* VISUAL_SLOT_WEAPON
* VISUAL_SLOT_WRIST


h5. WeaponConfigType
* WEAPON_CONFIG_TYPE_BOW
* WEAPON_CONFIG_TYPE_DESTRO_STAFF
* WEAPON_CONFIG_TYPE_DUAL_WIELD
* WEAPON_CONFIG_TYPE_FIRE_STAFF
* WEAPON_CONFIG_TYPE_FROST_STAFF
* WEAPON_CONFIG_TYPE_LIGHTNING_STAFF
* WEAPON_CONFIG_TYPE_NONE
* WEAPON_CONFIG_TYPE_ONE_HANDED
* WEAPON_CONFIG_TYPE_ONE_HAND_AND_SHIELD
* WEAPON_CONFIG_TYPE_RESTO_STAFF
* WEAPON_CONFIG_TYPE_TWO_HANDED
* WEAPON_CONFIG_TYPE_UNARMED


h5. WeaponType
* WEAPONTYPE_AXE
* WEAPONTYPE_BOW
* WEAPONTYPE_DAGGER
* WEAPONTYPE_FIRE_STAFF
* WEAPONTYPE_FROST_STAFF
* WEAPONTYPE_HAMMER
* WEAPONTYPE_HEALING_STAFF
* WEAPONTYPE_LIGHTNING_STAFF
* WEAPONTYPE_NONE
* WEAPONTYPE_RUNE
* WEAPONTYPE_SHIELD
* WEAPONTYPE_SWORD
* WEAPONTYPE_TWO_HANDED_AXE
* WEAPONTYPE_TWO_HANDED_HAMMER
* WEAPONTYPE_TWO_HANDED_SWORD


h5. Globals


h5. QuestRemovedType
* QUEST_REMOVED_TYPE_ABANDONED
* QUEST_REMOVED_TYPE_COMPLETED


h5. QuestRepeatableType
* QUEST_REPEAT_DAILY
* QUEST_REPEAT_NOT_REPEATABLE
* QUEST_REPEAT_REPEATABLE


h5. QuestStepComparisonType
* QUEST_STEP_TYPE_AND
* QUEST_STEP_TYPE_BRANCH
* QUEST_STEP_TYPE_END
* QUEST_STEP_TYPE_OR


h5. QuestStepVisibility
* QUEST_STEP_VISIBILITY_HIDDEN
* QUEST_STEP_VISIBILITY_HINT
* QUEST_STEP_VISIBILITY_OPTIONAL


h5. QuestType
* QUEST_TYPE_AVA
* QUEST_TYPE_AVA_GRAND
* QUEST_TYPE_AVA_GROUP
* QUEST_TYPE_BATTLEGROUND
* QUEST_TYPE_CLASS
* QUEST_TYPE_CRAFTING
* QUEST_TYPE_DUNGEON
* QUEST_TYPE_GROUP
* QUEST_TYPE_GUILD
* QUEST_TYPE_HOLIDAY_EVENT
* QUEST_TYPE_MAIN_STORY
* QUEST_TYPE_NONE
* QUEST_TYPE_RAID


h5. TrackedDataType
* TRACK_TYPE_INVALID
* TRACK_TYPE_QUEST


h5. Globals
* INVALID_TRACKER_INDEX
* MAX_JOURNAL_QUESTS
* TRACKER_MAX_TRACKED


h5. Globals


h5. ActionBarSetting
* ACTION_BAR_SETTING_LOCK_ACTION_BARS


h5. ActionBarSettingChoice
* ACTION_BAR_SETTING_CHOICE_AUTOMATIC
* ACTION_BAR_SETTING_CHOICE_OFF
* ACTION_BAR_SETTING_CHOICE_ON


h5. AudioSetting
* AUDIO_SETTING_AMBIENT_ENABLED
* AUDIO_SETTING_AMBIENT_VOLUME
* AUDIO_SETTING_AUDIO_ENABLED
* AUDIO_SETTING_AUDIO_VOLUME
* AUDIO_SETTING_BACKGROUND_AUDIO
* AUDIO_SETTING_FOOTSTEPS_ENABLED
* AUDIO_SETTING_FOOTSTEPS_VOLUME
* AUDIO_SETTING_MUSIC_ENABLED
* AUDIO_SETTING_MUSIC_VOLUME
* AUDIO_SETTING_SFX_ENABLED
* AUDIO_SETTING_SFX_VOLUME
* AUDIO_SETTING_SOUND_ENABLED
* AUDIO_SETTING_SPEAKER_SETUP
* AUDIO_SETTING_UI_ENABLED
* AUDIO_SETTING_UI_VOLUME
* AUDIO_SETTING_VOICE_CHAT_VOLUME
* AUDIO_SETTING_VO_ENABLED
* AUDIO_SETTING_VO_VOLUME


h5. BuffDebuffEnabledChoice
* BUFF_DEBUFF_ENABLED_CHOICE_ALWAYS_SHOW
* BUFF_DEBUFF_ENABLED_CHOICE_AUTOMATIC
* BUFF_DEBUFF_ENABLED_CHOICE_DONT_SHOW


h5. BuffsSettings
* BUFFS_SETTING_ALL_ENABLED
* BUFFS_SETTING_BUFFS_ENABLED
* BUFFS_SETTING_BUFFS_ENABLED_FOR_SELF
* BUFFS_SETTING_BUFFS_ENABLED_FOR_TARGET
* BUFFS_SETTING_DEBUFFS_ENABLED
* BUFFS_SETTING_DEBUFFS_ENABLED_FOR_SELF
* BUFFS_SETTING_DEBUFFS_ENABLED_FOR_TARGET
* BUFFS_SETTING_DEBUFFS_ENABLED_FOR_TARGET_FROM_OTHERS
* BUFFS_SETTING_LONG_EFFECTS
* BUFFS_SETTING_PERMANENT_EFFECTS


h5. CameraOptionsPreview
* CAMERA_OPTIONS_PREVIEW_FORCE_FIRST_PERSON
* CAMERA_OPTIONS_PREVIEW_FORCE_THIRD_PERSON
* CAMERA_OPTIONS_PREVIEW_NONE


h5. CameraSetting
* CAMERA_SETTING_ASSASSINATION_CAMERA
* CAMERA_SETTING_DISTANCE
* CAMERA_SETTING_DISTANCE_SYNCED
* CAMERA_SETTING_DISTANCE_UNSHEATHED
* CAMERA_SETTING_FIRST_PERSON_FIELD_OF_VIEW
* CAMERA_SETTING_FIRST_PERSON_HEAD_BOB
* CAMERA_SETTING_FOV_CHANGES_ALLOWED
* CAMERA_SETTING_INVERT_Y
* CAMERA_SETTING_SENSITIVITY_FIRST_PERSON
* CAMERA_SETTING_SENSITIVITY_THIRD_PERSON
* CAMERA_SETTING_SMOOTHING
* CAMERA_SETTING_THIRD_PERSON_FIELD_OF_VIEW
* CAMERA_SETTING_THIRD_PERSON_HORIZONTAL_OFFSET
* CAMERA_SETTING_THIRD_PERSON_HORIZONTAL_POSITION_MULTIPLIER
* CAMERA_SETTING_THIRD_PERSON_SIEGE_WEAPONRY
* CAMERA_SETTING_THIRD_PERSON_VERTICAL_OFFSET


h5. ChatBubbleSetting
* CHAT_BUBBLE_SETTING_ENABLED
* CHAT_BUBBLE_SETTING_ENABLED_FOR_LOCAL_PLAYER
* CHAT_BUBBLE_SETTING_ENABLED_ONLY_FROM_CONTACTS
* CHAT_BUBBLE_SETTING_SPEED_MODIFIER


h5. CombatSetting
* COMBAT_SETTING_CLAMP_GROUND_TARGET_ENABLED
* COMBAT_SETTING_MONSTER_TELLS_COLOR_SWAP_ENABLED
* COMBAT_SETTING_MONSTER_TELLS_ENABLED
* COMBAT_SETTING_MONSTER_TELLS_ENEMY_BRIGHTNESS
* COMBAT_SETTING_MONSTER_TELLS_ENEMY_COLOR
* COMBAT_SETTING_MONSTER_TELLS_FRIENDLY_BRIGHTNESS
* COMBAT_SETTING_MONSTER_TELLS_FRIENDLY_COLOR
* COMBAT_SETTING_PREVENT_ATTACKING_INNOCENTS
* COMBAT_SETTING_QUICK_CAST_GROUND_ABILITIES
* COMBAT_SETTING_ROLL_DODGE_DOUBLE_TAP
* COMBAT_SETTING_ROLL_DODGE_WINDOW
* COMBAT_SETTING_SCROLLING_COMBAT_TEXT_ENABLED
* COMBAT_SETTING_SCT_INCOMING_DAMAGE_ENABLED
* COMBAT_SETTING_SCT_INCOMING_DOT_ENABLED
* COMBAT_SETTING_SCT_INCOMING_ENABLED
* COMBAT_SETTING_SCT_INCOMING_HEALING_ENABLED
* COMBAT_SETTING_SCT_INCOMING_HOT_ENABLED
* COMBAT_SETTING_SCT_INCOMING_PET_DAMAGE_ENABLED
* COMBAT_SETTING_SCT_INCOMING_PET_DOT_ENABLED
* COMBAT_SETTING_SCT_INCOMING_POINT_GAINS_ENABLED
* COMBAT_SETTING_SCT_INCOMING_STATUS_EFFECTS_ENABLED
* COMBAT_SETTING_SCT_OUTGOING_DAMAGE_ENABLED
* COMBAT_SETTING_SCT_OUTGOING_DOT_ENABLED
* COMBAT_SETTING_SCT_OUTGOING_ENABLED
* COMBAT_SETTING_SCT_OUTGOING_HEALING_ENABLED
* COMBAT_SETTING_SCT_OUTGOING_HOT_ENABLED
* COMBAT_SETTING_SCT_OUTGOING_PET_DAMAGE_ENABLED
* COMBAT_SETTING_SCT_OUTGOING_PET_DOT_ENABLED
* COMBAT_SETTING_SCT_OUTGOING_PET_HEALING_ENABLED
* COMBAT_SETTING_SCT_OUTGOING_PET_HOT_ENABLED
* COMBAT_SETTING_SCT_OUTGOING_STATUS_EFFECTS_ENABLED
* COMBAT_SETTING_USE_BATTLE_LEVEL


h5. CompassActiveQuestsChoice
* COMPASS_ACTIVE_QUESTS_CHOICE_FOCUSED
* COMPASS_ACTIVE_QUESTS_CHOICE_OFF
* COMPASS_ACTIVE_QUESTS_CHOICE_ON


h5. DefaultSoulGemChoice
* DEFAULT_SOUL_GEM_CHOICE_CROWN
* DEFAULT_SOUL_GEM_CHOICE_GOLD


h5. GamepadChatTextSizeSetting
* GAMEPAD_CHAT_TEXT_SIZE_SETTING_LARGE
* GAMEPAD_CHAT_TEXT_SIZE_SETTING_MEDIUM
* GAMEPAD_CHAT_TEXT_SIZE_SETTING_SMALL


h5. GamepadSetting
* GAMEPAD_SETTING_CAMERA_SENSITIVITY
* GAMEPAD_SETTING_GAMEPAD_PREFERRED
* GAMEPAD_SETTING_GAMEPAD_TEMPLATE
* GAMEPAD_SETTING_INVERT_X
* GAMEPAD_SETTING_INVERT_Y
* GAMEPAD_SETTING_VIBRATION


h5. InWorldUISetting
* IN_WORLD_UI_SETTING_DEFAULT_SOUL_GEM
* IN_WORLD_UI_SETTING_FOOT_INVERSE_KINEMATICS
* IN_WORLD_UI_SETTING_GLOW_THICKNESS
* IN_WORLD_UI_SETTING_HIDE_HELM
* IN_WORLD_UI_SETTING_HIDE_LOIN_CLOTH
* IN_WORLD_UI_SETTING_HIDE_MOUNT_INVENTORY_UPGRADE
* IN_WORLD_UI_SETTING_HIDE_MOUNT_SPEED_UPGRADE
* IN_WORLD_UI_SETTING_HIDE_MOUNT_STAMINA_UPGRADE
* IN_WORLD_UI_SETTING_HIDE_TASSETS
* IN_WORLD_UI_SETTING_INTERACTABLE_GLOW_ENABLED
* IN_WORLD_UI_SETTING_INTERACTABLE_GLOW_INTENSITY
* IN_WORLD_UI_SETTING_TARGET_GLOW_ENABLED
* IN_WORLD_UI_SETTING_TARGET_GLOW_INTENSITY


h5. LanguageSetting
* LANGUAGE_SETTING_USE_PROFANITY_FILTER


h5. LootSetting
* LOOT_SETTING_AOE_LOOT
* LOOT_SETTING_AUTO_ADD_TO_CRAFT_BAG
* LOOT_SETTING_AUTO_LOOT
* LOOT_SETTING_AUTO_LOOT_STOLEN
* LOOT_SETTING_LOOT_HISTORY


h5. NameplateDisplayChoice
* NAMEPLATE_CHOICE_ALL
* NAMEPLATE_CHOICE_ALLY
* NAMEPLATE_CHOICE_ALWAYS
* NAMEPLATE_CHOICE_CENTER
* NAMEPLATE_CHOICE_ENEMY
* NAMEPLATE_CHOICE_INJURED
* NAMEPLATE_CHOICE_INJURED_OR_TARGETED
* NAMEPLATE_CHOICE_INVALID
* NAMEPLATE_CHOICE_LEFT
* NAMEPLATE_CHOICE_NEVER
* NAMEPLATE_CHOICE_NONE
* NAMEPLATE_CHOICE_TARGETED


h5. NameplateDisplayType
* NAMEPLATE_TYPE_ALLIANCE_INDICATORS
* NAMEPLATE_TYPE_ALL_HEALTHBARS
* NAMEPLATE_TYPE_ALL_NAMEPLATES
* NAMEPLATE_TYPE_DEFUNCT_DONT_REMOVE_1
* NAMEPLATE_TYPE_DEFUNCT_DONT_REMOVE_2
* NAMEPLATE_TYPE_ENEMY_NPC_HEALTHBARS
* NAMEPLATE_TYPE_ENEMY_NPC_HEALTHBARS_HIGHLIGHT
* NAMEPLATE_TYPE_ENEMY_NPC_NAMEPLATES
* NAMEPLATE_TYPE_ENEMY_NPC_NAMEPLATES_HIGHLIGHT
* NAMEPLATE_TYPE_ENEMY_PLAYER_HEALTHBARS
* NAMEPLATE_TYPE_ENEMY_PLAYER_HEALTHBARS_HIGHLIGHT
* NAMEPLATE_TYPE_ENEMY_PLAYER_NAMEPLATES
* NAMEPLATE_TYPE_ENEMY_PLAYER_NAMEPLATES_HIGHLIGHT
* NAMEPLATE_TYPE_FOLLOWER_INDICATORS
* NAMEPLATE_TYPE_FRIENDLY_NPC_HEALTHBARS
* NAMEPLATE_TYPE_FRIENDLY_NPC_HEALTHBARS_HIGHLIGHT
* NAMEPLATE_TYPE_FRIENDLY_NPC_NAMEPLATES
* NAMEPLATE_TYPE_FRIENDLY_NPC_NAMEPLATES_HIGHLIGHT
* NAMEPLATE_TYPE_FRIENDLY_PLAYER_HEALTHBARS
* NAMEPLATE_TYPE_FRIENDLY_PLAYER_HEALTHBARS_HIGHLIGHT
* NAMEPLATE_TYPE_FRIENDLY_PLAYER_NAMEPLATES
* NAMEPLATE_TYPE_FRIENDLY_PLAYER_NAMEPLATES_HIGHLIGHT
* NAMEPLATE_TYPE_GROUP_INDICATORS
* NAMEPLATE_TYPE_GROUP_MEMBER_HEALTHBARS
* NAMEPLATE_TYPE_GROUP_MEMBER_HEALTHBARS_HIGHLIGHT
* NAMEPLATE_TYPE_GROUP_MEMBER_NAMEPLATES
* NAMEPLATE_TYPE_GROUP_MEMBER_NAMEPLATES_HIGHLIGHT
* NAMEPLATE_TYPE_HEALTHBAR_ALIGNMENT
* NAMEPLATE_TYPE_HEALTHBAR_CHASE_BAR
* NAMEPLATE_TYPE_HEALTHBAR_FRAME_BORDER
* NAMEPLATE_TYPE_NEUTRAL_NPC_HEALTHBARS
* NAMEPLATE_TYPE_NEUTRAL_NPC_HEALTHBARS_HIGHLIGHT
* NAMEPLATE_TYPE_NEUTRAL_NPC_NAMEPLATES
* NAMEPLATE_TYPE_NEUTRAL_NPC_NAMEPLATES_HIGHLIGHT
* NAMEPLATE_TYPE_PLAYER_HEALTHBAR
* NAMEPLATE_TYPE_PLAYER_HEALTHBAR_HIGHLIGHT
* NAMEPLATE_TYPE_PLAYER_NAMEPLATE
* NAMEPLATE_TYPE_PLAYER_NAMEPLATE_HIGHLIGHT
* NAMEPLATE_TYPE_RESURRECT_INDICATORS
* NAMEPLATE_TYPE_SHOW_PLAYER_GUILDS
* NAMEPLATE_TYPE_SHOW_PLAYER_TITLES


h5. OptionsCustomSetting
* OPTIONS_CUSTOM_SETTING_CHAT_BUBBLE_EMOTE_ENABLED
* OPTIONS_CUSTOM_SETTING_CHAT_BUBBLE_GROUP_ENABLED
* OPTIONS_CUSTOM_SETTING_CHAT_BUBBLE_SAY_ENABLED
* OPTIONS_CUSTOM_SETTING_CHAT_BUBBLE_WHISPER_ENABLED
* OPTIONS_CUSTOM_SETTING_CHAT_BUBBLE_YELL_ENABLED
* OPTIONS_CUSTOM_SETTING_GAMEPAD_PREGAME_PLAY_CINEMATIC
* OPTIONS_CUSTOM_SETTING_GAMEPAD_PREGAME_SERVER_SELECT
* OPTIONS_CUSTOM_SETTING_GAMEPAD_PREGAME_VIEW_CREDITS
* OPTIONS_CUSTOM_SETTING_GAMMA_ADJUST
* OPTIONS_CUSTOM_SETTING_MONSTER_TELLS_ENEMY_TEST
* OPTIONS_CUSTOM_SETTING_MONSTER_TELLS_FRIENDLY_TEST
* OPTIONS_CUSTOM_SETTING_RESET_TUTORIALS
* OPTIONS_CUSTOM_SETTING_SCREEN_ADJUST
* OPTIONS_CUSTOM_SETTING_SOCIAL_CHAT_COLOR_EMOTE
* OPTIONS_CUSTOM_SETTING_SOCIAL_CHAT_COLOR_GROUP
* OPTIONS_CUSTOM_SETTING_SOCIAL_CHAT_COLOR_GUILD1
* OPTIONS_CUSTOM_SETTING_SOCIAL_CHAT_COLOR_GUILD2
* OPTIONS_CUSTOM_SETTING_SOCIAL_CHAT_COLOR_GUILD3
* OPTIONS_CUSTOM_SETTING_SOCIAL_CHAT_COLOR_GUILD4
* OPTIONS_CUSTOM_SETTING_SOCIAL_CHAT_COLOR_GUILD5
* OPTIONS_CUSTOM_SETTING_SOCIAL_CHAT_COLOR_NPC
* OPTIONS_CUSTOM_SETTING_SOCIAL_CHAT_COLOR_OFFICER1
* OPTIONS_CUSTOM_SETTING_SOCIAL_CHAT_COLOR_OFFICER2
* OPTIONS_CUSTOM_SETTING_SOCIAL_CHAT_COLOR_OFFICER3
* OPTIONS_CUSTOM_SETTING_SOCIAL_CHAT_COLOR_OFFICER4
* OPTIONS_CUSTOM_SETTING_SOCIAL_CHAT_COLOR_OFFICER5
* OPTIONS_CUSTOM_SETTING_SOCIAL_CHAT_COLOR_SAY
* OPTIONS_CUSTOM_SETTING_SOCIAL_CHAT_COLOR_SYSTEM
* OPTIONS_CUSTOM_SETTING_SOCIAL_CHAT_COLOR_WHISPER_INC
* OPTIONS_CUSTOM_SETTING_SOCIAL_CHAT_COLOR_WHISPER_OUT
* OPTIONS_CUSTOM_SETTING_SOCIAL_CHAT_COLOR_YELL
* OPTIONS_CUSTOM_SETTING_SOCIAL_CHAT_COLOR_ZONE
* OPTIONS_CUSTOM_SETTING_SOCIAL_CHAT_COLOR_ZONE_ENG
* OPTIONS_CUSTOM_SETTING_SOCIAL_CHAT_COLOR_ZONE_FRA
* OPTIONS_CUSTOM_SETTING_SOCIAL_CHAT_COLOR_ZONE_GER
* OPTIONS_CUSTOM_SETTING_SOCIAL_CHAT_COLOR_ZONE_JPN
* OPTIONS_CUSTOM_SETTING_SOCIAL_CHAT_TITLE_GUILD1
* OPTIONS_CUSTOM_SETTING_SOCIAL_CHAT_TITLE_GUILD2
* OPTIONS_CUSTOM_SETTING_SOCIAL_CHAT_TITLE_GUILD3
* OPTIONS_CUSTOM_SETTING_SOCIAL_CHAT_TITLE_GUILD4
* OPTIONS_CUSTOM_SETTING_SOCIAL_CHAT_TITLE_GUILD5
* OPTIONS_CUSTOM_SETTING_SOCIAL_GAMEPAD_TEXT_SIZE
* OPTIONS_CUSTOM_SETTING_SOCIAL_MIN_ALPHA
* OPTIONS_CUSTOM_SETTING_SOCIAL_TEXT_SIZE


h5. PrimaryPlayerNameSetting
* PRIMARY_PLAYER_NAME_SETTING_PREFER_CHARACTER
* PRIMARY_PLAYER_NAME_SETTING_PREFER_USERID


h5. QuickCastGroundAbilitiesChoice
* QUICK_CAST_GROUND_ABILITIES_CHOICE_AUTOMATIC
* QUICK_CAST_GROUND_ABILITIES_CHOICE_OFF
* QUICK_CAST_GROUND_ABILITIES_CHOICE_ON


h5. RaidLifeVisibilityChoice
* RAID_LIFE_VISIBILITY_CHOICE_AUTOMATIC
* RAID_LIFE_VISIBILITY_CHOICE_OFF
* RAID_LIFE_VISIBILITY_CHOICE_ON


h5. RealmSelectMethod
* REALM_SELECT_METHOD_DEFAULT_REALM
* REALM_SELECT_METHOD_LAST_REALM
* REALM_SELECT_METHOD_USER_SELECTS


h5. ReflectionQuality
* REFLECTION_QUALITY_HIGH
* REFLECTION_QUALITY_LOW
* REFLECTION_QUALITY_MEDIUM
* REFLECTION_QUALITY_OFF


h5. ResourceBarsSettingChoice
* RESOURCE_BARS_SETTING_CHOICE_ALWAYS_SHOW
* RESOURCE_BARS_SETTING_CHOICE_AUTOMATIC
* RESOURCE_BARS_SETTING_CHOICE_DONT_SHOW


h5. ResourceNumbersSetting
* RESOURCE_NUMBERS_SETTING_NUMBER_AND_PERCENT
* RESOURCE_NUMBERS_SETTING_NUMBER_ONLY
* RESOURCE_NUMBERS_SETTING_OFF
* RESOURCE_NUMBERS_SETTING_PERCENT_ONLY


h5. SettingSystemPanel
* SETTING_PANEL_AUDIO
* SETTING_PANEL_CAMERA
* SETTING_PANEL_CINEMATIC
* SETTING_PANEL_COMBAT
* SETTING_PANEL_DEBUG
* SETTING_PANEL_GAMEPLAY
* SETTING_PANEL_INTERFACE
* SETTING_PANEL_NAMEPLATES
* SETTING_PANEL_SOCIAL
* SETTING_PANEL_VIDEO


h5. SettingSystemType
* SETTING_TYPE_ACTION_BARS
* SETTING_TYPE_ACTIVE_COMBAT_TIP
* SETTING_TYPE_AUDIO
* SETTING_TYPE_BUFFS
* SETTING_TYPE_CAMERA
* SETTING_TYPE_CHAT_BUBBLE
* SETTING_TYPE_CHAT_GLOBALS
* SETTING_TYPE_CHAT_TABS
* SETTING_TYPE_COMBAT
* SETTING_TYPE_DEPRECATED_1
* SETTING_TYPE_DEVELOPER_DEBUG
* SETTING_TYPE_GAMEPAD
* SETTING_TYPE_GRAPHICS
* SETTING_TYPE_IN_WORLD
* SETTING_TYPE_LANGUAGE
* SETTING_TYPE_LOOT
* SETTING_TYPE_NAMEPLATES
* SETTING_TYPE_SUBTITLES
* SETTING_TYPE_TUTORIAL
* SETTING_TYPE_UI
* SETTING_TYPE_VOICE


h5. ShadowsChoice
* SHADOWS_CHOICE_HIGH
* SHADOWS_CHOICE_LOW
* SHADOWS_CHOICE_MEDIUM
* SHADOWS_CHOICE_OFF
* SHADOWS_CHOICE_PS4
* SHADOWS_CHOICE_ULTRA
* SHADOWS_CHOICE_XB1


h5. SiegeCameraChoice
* SIEGE_CAMERA_CHOICE_CONSTRAINED
* SIEGE_CAMERA_CHOICE_FREE


h5. SubtitleSetting
* SUBTITLE_SETTING_ENABLED


h5. TextureResolutionChoice
* TEX_RES_CHOICE_HIGH
* TEX_RES_CHOICE_LOW
* TEX_RES_CHOICE_MEDIUM


h5. UISetting
* UI_SETTING_ALWAYS_SHOW_STATUS_TEXT
* UI_SETTING_AUTO_DECLINE_DUEL_INVITES
* UI_SETTING_COMPASS_ACTIVE_QUESTS
* UI_SETTING_COMPASS_GROUP_LEADER
* UI_SETTING_COMPASS_GROUP_MEMBER_AVA
* UI_SETTING_COMPASS_GROUP_MEMBER_BATTLEGROUND
* UI_SETTING_COMPASS_GROUP_MEMBER_DELVE
* UI_SETTING_COMPASS_GROUP_MEMBER_DUNGEON
* UI_SETTING_COMPASS_GROUP_MEMBER_GENERAL
* UI_SETTING_COMPASS_GROUP_MEMBER_RAID
* UI_SETTING_COMPASS_QUEST_GIVERS
* UI_SETTING_CUSTOM_SCALE
* UI_SETTING_DEPRECATED3
* UI_SETTING_FADE_PLAYER_BARS
* UI_SETTING_FRAMERATE_LATENCY_LOCK
* UI_SETTING_GAMEPAD_CHAT_HUD_ENABLED
* UI_SETTING_PRIMARY_PLAYER_NAME_GAMEPAD
* UI_SETTING_PRIMARY_PLAYER_NAME_KEYBOARD
* UI_SETTING_RESOURCE_NUMBERS
* UI_SETTING_RETURN_CURSOR_ON_CHAT_FOCUS
* UI_SETTING_SHOW_ACTION_BAR
* UI_SETTING_SHOW_ARMOR_INDICATOR
* UI_SETTING_SHOW_FRAMERATE
* UI_SETTING_SHOW_LATENCY
* UI_SETTING_SHOW_LEADERBOARD_NOTIFICATIONS
* UI_SETTING_SHOW_QUEST_BESTOWER_INDICATORS
* UI_SETTING_SHOW_QUEST_TRACKER
* UI_SETTING_SHOW_RAID_LIVES
* UI_SETTING_SHOW_RESOURCE_BARS
* UI_SETTING_SHOW_WEAPON_INDICATOR
* UI_SETTING_SOCIAL_LIST_HIDE_OFFLINE
* UI_SETTING_ULTIMATE_NUMBER
* UI_SETTING_USE_CUSTOM_SCALE


h5. Globals


h5. Globals


h5. TimeFormatDirectionCode
* TIME_FORMAT_DIRECTION_ASCENDING
* TIME_FORMAT_DIRECTION_DESCENDING
* TIME_FORMAT_DIRECTION_NONE


h5. TimeFormatPrecisionCode
* TIME_FORMAT_PRECISION_MILLISECONDS
* TIME_FORMAT_PRECISION_MILLISECONDS_NO_HOURS_OR_DAYS
* TIME_FORMAT_PRECISION_SECONDS
* TIME_FORMAT_PRECISION_TENTHS
* TIME_FORMAT_PRECISION_TENTHS_RELEVANT
* TIME_FORMAT_PRECISION_TWELVE_HOUR
* TIME_FORMAT_PRECISION_TWENTY_FOUR_HOUR


h5. TimeFormatStyleCode
* TIME_FORMAT_STYLE_CAST_TIME
* TIME_FORMAT_STYLE_CHANNEL_TIME
* TIME_FORMAT_STYLE_CLOCK_TIME
* TIME_FORMAT_STYLE_COLONS
* TIME_FORMAT_STYLE_COOLDOWN_TIME
* TIME_FORMAT_STYLE_DESCRIPTIVE
* TIME_FORMAT_STYLE_DESCRIPTIVE_MINIMAL
* TIME_FORMAT_STYLE_DESCRIPTIVE_MINIMAL_HIDE_ZEROES
* TIME_FORMAT_STYLE_DESCRIPTIVE_MINIMAL_SHOW_TENTHS_SECS
* TIME_FORMAT_STYLE_DESCRIPTIVE_SHORT
* TIME_FORMAT_STYLE_DESCRIPTIVE_SHORT_SHOW_ZERO_SECS
* TIME_FORMAT_STYLE_DURATION
* TIME_FORMAT_STYLE_RELATIVE_TIMESTAMP
* TIME_FORMAT_STYLE_SHOW_LARGEST_TWO_UNITS
* TIME_FORMAT_STYLE_SHOW_LARGEST_UNIT
* TIME_FORMAT_STYLE_SHOW_LARGEST_UNIT_DESCRIPTIVE
* TIME_FORMAT_STYLE_SHOW_LARGEST_UNIT_DESCRIPTIVE_COLOR
* TIME_FORMAT_STYLE_SHOW_LARGEST_UNIT_DESCRIPTIVE_SHORT


h5. Globals


h5. TradeConfirmation
* TRADE_CONFIRM_ACCEPT
* TRADE_CONFIRM_EDIT


h5. TradeParticipant
* TRADE_ME
* TRADE_THEM


h5. TradeState
* TRADE_STATE_IDLE
* TRADE_STATE_INVITE_CONSIDERING
* TRADE_STATE_INVITE_WAITING
* TRADE_STATE_TRADING


h5. Globals


h5. AbilityProgressionResult
* ABILITY_PROGRESSION_RESULT_ABILITY_NOT_KNOWN
* ABILITY_PROGRESSION_RESULT_INVALID_LINE
* ABILITY_PROGRESSION_RESULT_MORPH_CHOSEN
* ABILITY_PROGRESSION_RESULT_MORPH_NOT_CHOSEN
* ABILITY_PROGRESSION_RESULT_NOT_ENOUGH_MONEY
* ABILITY_PROGRESSION_RESULT_NOT_HIGH_ENOUGH_LEVEL
* ABILITY_PROGRESSION_RESULT_NO_MORE_UPGRADES
* ABILITY_PROGRESSION_RESULT_NO_SKILL_POINTS
* ABILITY_PROGRESSION_RESULT_NO_VALID_UPGRADE
* ABILITY_PROGRESSION_RESULT_SUCCESS
* ABILITY_PROGRESSION_RESULT_TOO_LOW_LEVEL


h5. AccountNamingError
* ACCOUNT_NAME_RULE_INCORRECT_LENGTH
* ACCOUNT_NAME_RULE_INVALID_CHARACTERS
* ACCOUNT_NAME_RULE_MUST_END_WITH_NUMBER_OR_LETTER
* ACCOUNT_NAME_RULE_MUST_START_WITH_LETTER
* ACCOUNT_NAME_RULE_NO_ERROR
* ACCOUNT_NAME_RULE_NO_SPACES
* ACCOUNT_NAME_RULE_TOO_MANY_IDENTICAL_ADJACENT_CHARACTERS
* ACCOUNT_NAME_RULE_TOO_MANY_PUNCTUATION_CHARACTERS


h5. ActionResult
* ACTION_RESULT_ABILITY_ON_COOLDOWN
* ACTION_RESULT_ABSORBED
* ACTION_RESULT_BAD_TARGET
* ACTION_RESULT_BATTLE_STANDARDS_DISABLED
* ACTION_RESULT_BATTLE_STANDARD_ALREADY_EXISTS_FOR_GUILD
* ACTION_RESULT_BATTLE_STANDARD_LIMIT
* ACTION_RESULT_BATTLE_STANDARD_NO_PERMISSION
* ACTION_RESULT_BATTLE_STANDARD_TABARD_MISMATCH
* ACTION_RESULT_BATTLE_STANDARD_TOO_CLOSE_TO_CAPTURABLE
* ACTION_RESULT_BLADETURN
* ACTION_RESULT_BLOCKED
* ACTION_RESULT_BLOCKED_DAMAGE
* ACTION_RESULT_BUSY
* ACTION_RESULT_CANNOT_USE
* ACTION_RESULT_CANT_SEE_TARGET
* ACTION_RESULT_CANT_SWAP_WHILE_CHANGING_GEAR
* ACTION_RESULT_CASTER_DEAD
* ACTION_RESULT_CRITICAL_DAMAGE
* ACTION_RESULT_CRITICAL_HEAL
* ACTION_RESULT_DAMAGE
* ACTION_RESULT_DAMAGE_SHIELDED
* ACTION_RESULT_DEFENDED
* ACTION_RESULT_DIED
* ACTION_RESULT_DIED_XP
* ACTION_RESULT_DISARMED
* ACTION_RESULT_DISORIENTED
* ACTION_RESULT_DODGED
* ACTION_RESULT_DOT_TICK
* ACTION_RESULT_DOT_TICK_CRITICAL
* ACTION_RESULT_FAILED
* ACTION_RESULT_FAILED_REQUIREMENTS
* ACTION_RESULT_FAILED_SIEGE_CREATION_REQUIREMENTS
* ACTION_RESULT_FALLING
* ACTION_RESULT_FALL_DAMAGE
* ACTION_RESULT_FEARED
* ACTION_RESULT_FORWARD_CAMP_ALREADY_EXISTS_FOR_GUILD
* ACTION_RESULT_FORWARD_CAMP_NO_PERMISSION
* ACTION_RESULT_FORWARD_CAMP_TABARD_MISMATCH
* ACTION_RESULT_GRAVEYARD_DISALLOWED_IN_INSTANCE
* ACTION_RESULT_GRAVEYARD_TOO_CLOSE
* ACTION_RESULT_HEAL
* ACTION_RESULT_HOT_TICK
* ACTION_RESULT_HOT_TICK_CRITICAL
* ACTION_RESULT_IMMUNE
* ACTION_RESULT_INSUFFICIENT_RESOURCE
* ACTION_RESULT_INTERCEPTED
* ACTION_RESULT_INTERRUPT
* ACTION_RESULT_INVALID
* ACTION_RESULT_INVALID_FIXTURE
* ACTION_RESULT_INVALID_JUSTICE_TARGET
* ACTION_RESULT_INVALID_TERRAIN
* ACTION_RESULT_IN_AIR
* ACTION_RESULT_IN_COMBAT
* ACTION_RESULT_IN_ENEMY_KEEP
* ACTION_RESULT_IN_ENEMY_OUTPOST
* ACTION_RESULT_IN_ENEMY_RESOURCE
* ACTION_RESULT_IN_ENEMY_TOWN
* ACTION_RESULT_IN_HIDEYHOLE
* ACTION_RESULT_KILLED_BY_SUBZONE
* ACTION_RESULT_KILLING_BLOW
* ACTION_RESULT_KNOCKBACK
* ACTION_RESULT_LEVITATED
* ACTION_RESULT_MERCENARY_LIMIT
* ACTION_RESULT_MISS
* ACTION_RESULT_MISSING_EMPTY_SOUL_GEM
* ACTION_RESULT_MISSING_FILLED_SOUL_GEM
* ACTION_RESULT_MOBILE_GRAVEYARD_LIMIT
* ACTION_RESULT_MOUNTED
* ACTION_RESULT_MUST_BE_IN_OWN_KEEP
* ACTION_RESULT_NOT_ENOUGH_INVENTORY_SPACE
* ACTION_RESULT_NOT_ENOUGH_INVENTORY_SPACE_SOUL_GEM
* ACTION_RESULT_NOT_ENOUGH_SPACE_FOR_SIEGE
* ACTION_RESULT_NO_LOCATION_FOUND
* ACTION_RESULT_NO_RAM_ATTACKABLE_TARGET_WITHIN_RANGE
* ACTION_RESULT_NO_WEAPONS_TO_SWAP_TO
* ACTION_RESULT_NPC_TOO_CLOSE
* ACTION_RESULT_OFFBALANCE
* ACTION_RESULT_PACIFIED
* ACTION_RESULT_PARRIED
* ACTION_RESULT_PARTIAL_RESIST
* ACTION_RESULT_POWER_DRAIN
* ACTION_RESULT_POWER_ENERGIZE
* ACTION_RESULT_PRECISE_DAMAGE
* ACTION_RESULT_QUEUED
* ACTION_RESULT_RAM_ATTACKABLE_TARGETS_ALL_DESTROYED
* ACTION_RESULT_RAM_ATTACKABLE_TARGETS_ALL_OCCUPIED
* ACTION_RESULT_RECALLING
* ACTION_RESULT_REFLECTED
* ACTION_RESULT_REINCARNATING
* ACTION_RESULT_RESIST
* ACTION_RESULT_RESURRECT
* ACTION_RESULT_ROOTED
* ACTION_RESULT_SIEGE_LIMIT
* ACTION_RESULT_SIEGE_NOT_ALLOWED_IN_ZONE
* ACTION_RESULT_SIEGE_TOO_CLOSE
* ACTION_RESULT_SILENCED
* ACTION_RESULT_SNARED
* ACTION_RESULT_SPRINTING
* ACTION_RESULT_STAGGERED
* ACTION_RESULT_STUNNED
* ACTION_RESULT_SWIMMING
* ACTION_RESULT_TARGET_DEAD
* ACTION_RESULT_TARGET_NOT_IN_VIEW
* ACTION_RESULT_TARGET_NOT_PVP_FLAGGED
* ACTION_RESULT_TARGET_OUT_OF_RANGE
* ACTION_RESULT_TARGET_TOO_CLOSE
* ACTION_RESULT_UNEVEN_TERRAIN
* ACTION_RESULT_WEAPONSWAP
* ACTION_RESULT_WRECKING_DAMAGE
* ACTION_RESULT_WRONG_WEAPON


h5. CampaignQueueRequestStateType
* CAMPAIGN_QUEUE_REQUEST_STATE_CONFIRMING
* CAMPAIGN_QUEUE_REQUEST_STATE_FINISHED
* CAMPAIGN_QUEUE_REQUEST_STATE_PENDING_ACCEPT
* CAMPAIGN_QUEUE_REQUEST_STATE_PENDING_JOIN
* CAMPAIGN_QUEUE_REQUEST_STATE_PENDING_LEAVE
* CAMPAIGN_QUEUE_REQUEST_STATE_WAITING


h5. CampaignReassignmentErrorReason
* CAMPAIGN_REASSIGN_ERROR_CAMPAIGNS_DISABLED
* CAMPAIGN_REASSIGN_ERROR_DESTINATION_CAMPAIGN_DISABLED
* CAMPAIGN_REASSIGN_ERROR_DESTINATION_CAMPAIGN_IN_CONFLICT
* CAMPAIGN_REASSIGN_ERROR_GUESTING_NOT_CURRENTLY_ALLOWED
* CAMPAIGN_REASSIGN_ERROR_GUEST_AND_ASSIGNED_EQUAL
* CAMPAIGN_REASSIGN_ERROR_INITIALIZATION_ERROR
* CAMPAIGN_REASSIGN_ERROR_INSUFFICIENT_FUNDS
* CAMPAIGN_REASSIGN_ERROR_INVALID_DB_STATE
* CAMPAIGN_REASSIGN_ERROR_INVALID_DESTINATION_CAMPAIGN
* CAMPAIGN_REASSIGN_ERROR_LEVEL_REQUIREMENT_NOT_MET
* CAMPAIGN_REASSIGN_ERROR_NONE
* CAMPAIGN_REASSIGN_ERROR_REASSIGNMENT_IN_PROGRESS
* CAMPAIGN_REASSIGN_ERROR_REASSIGNMENT_ON_COOLDOWN
* CAMPAIGN_REASSIGN_ERROR_REASSIGN_ON_END_INVALID
* CAMPAIGN_REASSIGN_ERROR_REQUIREMENTS_NOT_MET
* CAMPAIGN_REASSIGN_ERROR_UNCHANGED_DESTINATION_CAMPAIGN
* CAMPAIGN_REASSIGN_ERROR_UNCHANGED_DESTINATION_PENDING_CAMPAIGN


h5. ChampionPurchaseResult
* CHAMPION_PURCHASE_ALL_BUYS_INVALID
* CHAMPION_PURCHASE_RESPEC_FAILED
* CHAMPION_PURCHASE_SOME_BUYS_INVALID
* CHAMPION_PURCHASE_SUCCESS


h5. ClaimKeepResultType
* CLAIM_KEEP_RESULT_TYPE_CAMPAIGN_NOT_READY
* CLAIM_KEEP_RESULT_TYPE_DUPLICATE_CLAIM_IN_PROGRESS
* CLAIM_KEEP_RESULT_TYPE_GUILD_ALREADY_HAS_KEEP
* CLAIM_KEEP_RESULT_TYPE_INSUFFICIENT_PERMISSION
* CLAIM_KEEP_RESULT_TYPE_INTERNAL_ERROR
* CLAIM_KEEP_RESULT_TYPE_INVALID_WORLD
* CLAIM_KEEP_RESULT_TYPE_KEEP_ALREADY_CLAIMED
* CLAIM_KEEP_RESULT_TYPE_KEEP_DOES_NOT_EXIST
* CLAIM_KEEP_RESULT_TYPE_KEEP_NOT_CLAIMABLE
* CLAIM_KEEP_RESULT_TYPE_KEEP_NOT_OWNED_BY_ALLIANCE
* CLAIM_KEEP_RESULT_TYPE_KEEP_NOT_OWNED_BY_GUILD_ALLIANCE
* CLAIM_KEEP_RESULT_TYPE_NOT_IN_CAMPAIGN
* CLAIM_KEEP_RESULT_TYPE_NOT_IN_GUILD
* CLAIM_KEEP_RESULT_TYPE_SOCIAL_DISABLED
* CLAIM_KEEP_RESULT_TYPE_STILL_ON_COOLDOWN
* CLAIM_KEEP_RESULT_TYPE_SUCCESS


h5. CustomerServiceTicketCategory
* TICKET_CATEGORY_CHARACTER_ISSUE
* TICKET_CATEGORY_ITEM_CANT_ACQUIRE
* TICKET_CATEGORY_ITEM_FROM_CROWN_STORE
* TICKET_CATEGORY_ITEM_LOST
* TICKET_CATEGORY_ITEM_MISSING_CROWNS
* TICKET_CATEGORY_OTHER
* TICKET_CATEGORY_QUEST_ITEM_MISSING
* TICKET_CATEGORY_QUEST_NPC_MOBS
* TICKET_CATEGORY_REPORT_BAD_NAME
* TICKET_CATEGORY_REPORT_CHEATING
* TICKET_CATEGORY_REPORT_DEFAULT
* TICKET_CATEGORY_REPORT_HARASSMENT
* TICKET_CATEGORY_REPORT_OTHER
* TICKET_CATEGORY_REPORT_SPAM


h5. DuelInviteFailReason
* DUEL_INVITE_FAIL_REASON_INELIGIBLE_AREA
* DUEL_INVITE_FAIL_REASON_NONE
* DUEL_INVITE_FAIL_REASON_NOT_FULL_HEALTH
* DUEL_INVITE_FAIL_REASON_RECENTLY_DECLINED
* DUEL_INVITE_FAIL_REASON_SELF_ACTIVE_DUEL
* DUEL_INVITE_FAIL_REASON_SELF_CONSIDERING_INVITE
* DUEL_INVITE_FAIL_REASON_SELF_CRAFTING
* DUEL_INVITE_FAIL_REASON_SELF_DEAD
* DUEL_INVITE_FAIL_REASON_SELF_IN_COMBAT
* DUEL_INVITE_FAIL_REASON_SELF_PENDING_REQUEST
* DUEL_INVITE_FAIL_REASON_SELF_SWIMMING
* DUEL_INVITE_FAIL_REASON_TARGET_ACTIVE_DUEL
* DUEL_INVITE_FAIL_REASON_TARGET_CONSIDERING_INVITE
* DUEL_INVITE_FAIL_REASON_TARGET_CRAFTING
* DUEL_INVITE_FAIL_REASON_TARGET_DEAD
* DUEL_INVITE_FAIL_REASON_TARGET_INVALID
* DUEL_INVITE_FAIL_REASON_TARGET_IN_COMBAT
* DUEL_INVITE_FAIL_REASON_TARGET_PENDING_REQUEST
* DUEL_INVITE_FAIL_REASON_TARGET_SELF
* DUEL_INVITE_FAIL_REASON_TARGET_SWIMMING
* DUEL_INVITE_FAIL_REASON_TARGET_UNAVAILABLE
* DUEL_INVITE_FAIL_REASON_TOO_FAR
* DUEL_INVITE_FAIL_REASON_TOO_MANY_NEARBY


h5. FastTravelKeepResult
* FAST_TRAVEL_KEEP_RESULT_FAILED
* FAST_TRAVEL_KEEP_RESULT_FAILED_DESTINATION_KEEP_ALLIANCE
* FAST_TRAVEL_KEEP_RESULT_FAILED_DESTINATION_KEEP_ALLIED_RESOURCE
* FAST_TRAVEL_KEEP_RESULT_FAILED_DESTINATION_KEEP_UNDER_ATTACK
* FAST_TRAVEL_KEEP_RESULT_FAILED_INTERACT_REQUIREMENT
* FAST_TRAVEL_KEEP_RESULT_FAILED_INVALID_DESTINATION_WAYPOINT
* FAST_TRAVEL_KEEP_RESULT_FAILED_NO_VALID_PATH
* FAST_TRAVEL_KEEP_RESULT_FAILED_ORIGIN_KEEP_ALLIANCE
* FAST_TRAVEL_KEEP_RESULT_FAILED_ORIGIN_KEEP_ALLIED_RESOURCE
* FAST_TRAVEL_KEEP_RESULT_FAILED_ORIGIN_KEEP_UNDER_ATTACK
* FAST_TRAVEL_KEEP_RESULT_FAILED_PLAYER_CARRYING_ARTIFACT
* FAST_TRAVEL_KEEP_RESULT_FAILED_PLAYER_IN_COMBAT
* FAST_TRAVEL_KEEP_RESULT_FAILED_PLAYER_TOO_FAR_AWAY_FROM_ORIGIN_KEEP
* FAST_TRAVEL_KEEP_RESULT_PENDING_REMOTE_JUMP_REPSONSE
* FAST_TRAVEL_KEEP_RESULT_SUCCESS


h5. GroupInviteResponse
* GROUP_INVITE_RESPONSE_ACCEPTED
* GROUP_INVITE_RESPONSE_ALREADY_GROUPED
* GROUP_INVITE_RESPONSE_CANNOT_CREATE_GROUPS
* GROUP_INVITE_RESPONSE_CONSIDERING_OTHER
* GROUP_INVITE_RESPONSE_DECLINED
* GROUP_INVITE_RESPONSE_GENERIC_JOIN_FAILURE
* GROUP_INVITE_RESPONSE_GROUP_FULL
* GROUP_INVITE_RESPONSE_IGNORED
* GROUP_INVITE_RESPONSE_INVITED
* GROUP_INVITE_RESPONSE_IN_BATTLEGROUND
* GROUP_INVITE_RESPONSE_ONLY_LEADER_CAN_INVITE
* GROUP_INVITE_RESPONSE_OTHER_ALLIANCE
* GROUP_INVITE_RESPONSE_PLAYER_NOT_FOUND
* GROUP_INVITE_RESPONSE_REQUEST_FAIL_ALREADY_GROUPED
* GROUP_INVITE_RESPONSE_REQUEST_FAIL_GROUP_FULL
* GROUP_INVITE_RESPONSE_SELF_INVITE


h5. GuildBankResult
* GUILD_BANK_BAD_ITEM
* GUILD_BANK_CANT_BE_STORED
* GUILD_BANK_GUILD_TOO_SMALL
* GUILD_BANK_ITEM_NOT_FOUND
* GUILD_BANK_NOT_A_MEMBER
* GUILD_BANK_NOT_ENOUGH_BANK_SPACE_FOR_GOLD
* GUILD_BANK_NOT_ENOUGH_GOLD
* GUILD_BANK_NOT_ENOUGH_GOLD_IN_BANK
* GUILD_BANK_NOT_IN_A_GUILD
* GUILD_BANK_NOT_OPEN
* GUILD_BANK_NO_DEPOSIT_PERMISSION
* GUILD_BANK_NO_DEPOSIT_STOLEN_ITEM
* GUILD_BANK_NO_SPACE_LEFT
* GUILD_BANK_NO_WITHDRAW_PERMISSION
* GUILD_BANK_PARTIAL_SUCCESS
* GUILD_BANK_SUCCESS
* GUILD_BANK_TRANSFER_PENDING
* GUILD_BANK_UNAVAILABLE


h5. GuildKioskResult
* GUILD_KIOSK_BID_EXISTS_ON_ANOTHER_KIOSK
* GUILD_KIOSK_BID_INSUFFICIENT
* GUILD_KIOSK_BID_SUCCESSFUL
* GUILD_KIOSK_BID_WINDOW_CLOSED
* GUILD_KIOSK_GUILD_OWNS_OTHER_KIOSK
* GUILD_KIOSK_GUILD_TOO_SMALL
* GUILD_KIOSK_INFO_REQUEST_SUCCESSFUL
* GUILD_KIOSK_KIOSK_OWNED
* GUILD_KIOSK_NOT_A_MEMBER
* GUILD_KIOSK_NOT_ENOUGH_GOLD_IN_BANK
* GUILD_KIOSK_NOT_IN_A_GUILD
* GUILD_KIOSK_NO_BID_PERMISSION
* GUILD_KIOSK_PURCHASE_SUCCESSFUL
* GUILD_KIOSK_UNAVAILABLE


h5. HotBarResult
* HOT_BAR_RESULT_ABILITY_NOT_ACTIVE
* HOT_BAR_RESULT_ABILITY_NOT_KNOWN
* HOT_BAR_RESULT_BAD_SLOT
* HOT_BAR_RESULT_CANNOT_USE_WHILE_WEREWOLF
* HOT_BAR_RESULT_COLLECTIBLE_NOT_UNLOCKED
* HOT_BAR_RESULT_INVALID_SLOT_NUMBER
* HOT_BAR_RESULT_ITEM_IN_WEAPON_SLOT
* HOT_BAR_RESULT_ITEM_NOT_FOUND
* HOT_BAR_RESULT_NO_COMBAT_SWAP
* HOT_BAR_RESULT_SUCCESS


h5. HousingRequestResult
* HOUSING_REQUEST_RESULT_ALREADY_APPLYING_TEMPLATE
* HOUSING_REQUEST_RESULT_ALREADY_BEING_MOVED
* HOUSING_REQUEST_RESULT_ALREADY_SET_TO_MODE
* HOUSING_REQUEST_RESULT_FURNITURE_ALREADY_SELECTED
* HOUSING_REQUEST_RESULT_HIGH_IMPACT_COLLECTIBLE_PLACE_LIMIT
* HOUSING_REQUEST_RESULT_HIGH_IMPACT_ITEM_PLACE_LIMIT
* HOUSING_REQUEST_RESULT_HOME_SHOW_NOT_ENOUGH_PLACED
* HOUSING_REQUEST_RESULT_INCORRECT_MODE
* HOUSING_REQUEST_RESULT_INVALID_TEMPLATE
* HOUSING_REQUEST_RESULT_INVENTORY_REMOVE_FAILED
* HOUSING_REQUEST_RESULT_IN_COMBAT
* HOUSING_REQUEST_RESULT_IN_SAFE_ZONE
* HOUSING_REQUEST_RESULT_IS_DEAD
* HOUSING_REQUEST_RESULT_ITEM_REMOVE_FAILED
* HOUSING_REQUEST_RESULT_ITEM_REMOVE_FAILED_INVENTORY_FULL
* HOUSING_REQUEST_RESULT_ITEM_STOLEN
* HOUSING_REQUEST_RESULT_LISTED
* HOUSING_REQUEST_RESULT_LOW_IMPACT_COLLECTIBLE_PLACE_LIMIT
* HOUSING_REQUEST_RESULT_LOW_IMPACT_ITEM_PLACE_LIMIT
* HOUSING_REQUEST_RESULT_MOVE_FAILED
* HOUSING_REQUEST_RESULT_NOT_HOME_SHOW
* HOUSING_REQUEST_RESULT_NOT_IN_HOUSE
* HOUSING_REQUEST_RESULT_NO_DUPLICATES
* HOUSING_REQUEST_RESULT_NO_SUCH_FURNITURE
* HOUSING_REQUEST_RESULT_PERMISSION_FAILED
* HOUSING_REQUEST_RESULT_PERSONAL_TEMP_ITEM_PLACE_LIMIT
* HOUSING_REQUEST_RESULT_PLACE_FAILED
* HOUSING_REQUEST_RESULT_REMOVE_FAILED
* HOUSING_REQUEST_RESULT_REQUEST_IN_PROGRESS
* HOUSING_REQUEST_RESULT_SET_STATE_FAILED
* HOUSING_REQUEST_RESULT_SUCCESS
* HOUSING_REQUEST_RESULT_TOTAL_TEMP_ITEM_PLACE_LIMIT
* HOUSING_REQUEST_RESULT_UNKNOWN_FAILURE


h5. InteractTargetType
* INTERACT_TARGET_TYPE_AOE_LOOT
* INTERACT_TARGET_TYPE_CLIENT_CHARACTER
* INTERACT_TARGET_TYPE_FIXTURE
* INTERACT_TARGET_TYPE_ITEM
* INTERACT_TARGET_TYPE_NONE
* INTERACT_TARGET_TYPE_OBJECT
* INTERACT_TARGET_TYPE_QUEST_ITEM


h5. InventoryUpdateReason
* INVENTORY_UPDATE_REASON_DEFAULT
* INVENTORY_UPDATE_REASON_DURABILITY_CHANGE
* INVENTORY_UPDATE_REASON_DYE_CHANGE
* INVENTORY_UPDATE_REASON_ITEM_CHARGE
* INVENTORY_UPDATE_REASON_PLAYER_LOCKED


h5. ItemLaunderResult
* ITEM_LAUNDER_RESULT_AT_LIMIT
* ITEM_LAUNDER_RESULT_CANT_AFFORD_LAUNDER
* ITEM_LAUNDER_RESULT_INVALID
* ITEM_LAUNDER_RESULT_INVENTORY_FULL
* ITEM_LAUNDER_RESULT_ITEM_NOT_LAUNDERABLE
* ITEM_LAUNDER_RESULT_NONE
* ITEM_LAUNDER_RESULT_NOT_STOLEN
* ITEM_LAUNDER_RESULT_SUCCESS


h5. ItemRepairReason
* ITEM_REPAIR_ALREADY_REPAIRED
* ITEM_REPAIR_CANT_AFFORD_REPAIR
* ITEM_REPAIR_NO_REPAIR_KIT


h5. JumpResult
* JUMP_RESULT_JUMP_FAILED
* JUMP_RESULT_JUMP_FAILED_ALREADY_JUMPING
* JUMP_RESULT_JUMP_FAILED_BATTLEGROUND_ENTRY
* JUMP_RESULT_JUMP_FAILED_CHAMPION_RANK
* JUMP_RESULT_JUMP_FAILED_DISABLED_CAMPAIGN
* JUMP_RESULT_JUMP_FAILED_DONT_OWN_HOUSE
* JUMP_RESULT_JUMP_FAILED_HEROIC_INSTANCE
* JUMP_RESULT_JUMP_FAILED_INSTANCE_CAP_REACHED
* JUMP_RESULT_JUMP_FAILED_INSTANCE_FULL
* JUMP_RESULT_JUMP_FAILED_INVALID_HOUSE
* JUMP_RESULT_JUMP_FAILED_INVALID_WORLD
* JUMP_RESULT_JUMP_FAILED_NO_CAMPAIGN
* JUMP_RESULT_JUMP_FAILED_NO_DETECTION_CELL
* JUMP_RESULT_JUMP_FAILED_NO_HOUSE_PERMISSION
* JUMP_RESULT_JUMP_FAILED_NO_SOCIAL
* JUMP_RESULT_JUMP_FAILED_QUEUING
* JUMP_RESULT_JUMP_FAILED_RECALL_BLOCKED
* JUMP_RESULT_JUMP_FAILED_TOO_DIFFICULT
* JUMP_RESULT_JUMP_FAILED_ZONE_COLLECTIBLE
* JUMP_RESULT_JUMP_FAILED_ZONE_REQUIREMENT
* JUMP_RESULT_LOCAL_JUMP_SUCCESSFUL
* JUMP_RESULT_NO_JUMP_PERMISSION
* JUMP_RESULT_REMOTE_JUMP_INITIATED


h5. LeaveCampaignQueueResponseType
* LEAVE_CAMPAIGN_QUEUE_ERROR_INTERNAL_ERROR
* LEAVE_CAMPAIGN_QUEUE_ERROR_INVALID_CAMPAIGN
* LEAVE_CAMPAIGN_QUEUE_ERROR_NONE
* LEAVE_CAMPAIGN_QUEUE_ERROR_NOT_GROUP_LEADER
* LEAVE_CAMPAIGN_QUEUE_ERROR_NOT_QUEUED_FOR_ANYTHING
* LEAVE_CAMPAIGN_QUEUE_ERROR_NOT_QUEUED_FOR_CAMPAIGN


h5. LoginStatus
* LOGIN_STATUS_AUTH_FAILURE
* LOGIN_STATUS_AUTH_LOCKED
* LOGIN_STATUS_AUTH_SUCCESS
* LOGIN_STATUS_AUTH_WAITING
* LOGIN_STATUS_CANCELLED
* LOGIN_STATUS_CONNECTED
* LOGIN_STATUS_DISCONNECTED
* LOGIN_STATUS_INVALID_STATE
* LOGIN_STATUS_LEGAL_DOC_ACCEPTANCE_FAILED
* LOGIN_STATUS_LEGAL_DOC_ACCEPTANCE_PENDING
* LOGIN_STATUS_LEGAL_DOC_ACCEPTANCE_SUCCESS
* LOGIN_STATUS_LEGAL_DOC_NOT_ACCEPTED
* LOGIN_STATUS_LINK_ACCOUNT_FAILED
* LOGIN_STATUS_LINK_ACCOUNT_PENDING
* LOGIN_STATUS_LINK_ACCOUNT_SUCCESS
* LOGIN_STATUS_MASTER_ACCOUNT_CREATE_FAILED
* LOGIN_STATUS_MASTER_ACCOUNT_CREATE_PENDING
* LOGIN_STATUS_MASTER_ACCOUNT_CREATE_SUCCESS
* LOGIN_STATUS_MASTER_ACCOUNT_NOT_CREATED
* LOGIN_STATUS_OTP_FAILED
* LOGIN_STATUS_OTP_LOCKED
* LOGIN_STATUS_OTP_PENDING
* LOGIN_STATUS_OTP_SUCCESS
* LOGIN_STATUS_OVERFLOW_KICK_WAITING
* LOGIN_STATUS_OVERFLOW_WAITING
* LOGIN_STATUS_RESERVATION_FAILURE
* LOGIN_STATUS_RESERVATION_SUCCESS
* LOGIN_STATUS_RESERVATION_WAITING


h5. LogoutResult
* LOGOUT_RESULT_ALLOWED
* LOGOUT_RESULT_DEFER
* LOGOUT_RESULT_DISALLOWED


h5. LogoutType
* LOGOUT_TYPE_CANCEL
* LOGOUT_TYPE_FORCED
* LOGOUT_TYPE_NORMAL


h5. LootItemResult
* LOOT_ITEM_RESULT_INVENTORY_FULL
* LOOT_ITEM_RESULT_INVENTORY_FULL_LOOT_ALL
* LOOT_ITEM_RESULT_IS_UNIQUE
* LOOT_ITEM_RESULT_IS_UNIQUE_LOOT_ALL
* LOOT_ITEM_RESULT_NOT_AVAILABLE
* LOOT_ITEM_RESULT_QUEST_RESTRICTED
* LOOT_ITEM_RESULT_SUCCESS


h5. MarketOpenOperation
* MARKET_OPEN_OPERATION_ANNOUNCEMENT
* MARKET_OPEN_OPERATION_COLLECTIONS_DLC
* MARKET_OPEN_OPERATION_CROWN_CRATES
* MARKET_OPEN_OPERATION_DIRECT
* MARKET_OPEN_OPERATION_DLC_FAILURE_TELEPORT_TO_GROUP
* MARKET_OPEN_OPERATION_DLC_FAILURE_TELEPORT_TO_ZONE
* MARKET_OPEN_OPERATION_DLC_FAILURE_WORLD_MAP
* MARKET_OPEN_OPERATION_NOTIFICATION
* MARKET_OPEN_OPERATION_UNIVERSAL_STYLE_ITEM


h5. MountFailureReason
* MOUNT_FAILURE_REASON_BUSY
* MOUNT_FAILURE_REASON_INVALID_LOCATION
* MOUNT_FAILURE_REASON_INVENTORY_BUSY
* MOUNT_FAILURE_REASON_INVENTORY_TOO_FULL
* MOUNT_FAILURE_REASON_NO_ACTIVE_MOUNT


h5. MsgChannelType
* CHAT_CHANNEL_EMOTE
* CHAT_CHANNEL_GUILD_1
* CHAT_CHANNEL_GUILD_2
* CHAT_CHANNEL_GUILD_3
* CHAT_CHANNEL_GUILD_4
* CHAT_CHANNEL_GUILD_5
* CHAT_CHANNEL_MONSTER_EMOTE
* CHAT_CHANNEL_MONSTER_SAY
* CHAT_CHANNEL_MONSTER_WHISPER
* CHAT_CHANNEL_MONSTER_YELL
* CHAT_CHANNEL_OFFICER_1
* CHAT_CHANNEL_OFFICER_2
* CHAT_CHANNEL_OFFICER_3
* CHAT_CHANNEL_OFFICER_4
* CHAT_CHANNEL_OFFICER_5
* CHAT_CHANNEL_PARTY
* CHAT_CHANNEL_SAY
* CHAT_CHANNEL_SYSTEM
* CHAT_CHANNEL_UNUSED_1
* CHAT_CHANNEL_USER_CHANNEL_1
* CHAT_CHANNEL_USER_CHANNEL_2
* CHAT_CHANNEL_USER_CHANNEL_3
* CHAT_CHANNEL_USER_CHANNEL_4
* CHAT_CHANNEL_USER_CHANNEL_5
* CHAT_CHANNEL_USER_CHANNEL_6
* CHAT_CHANNEL_USER_CHANNEL_7
* CHAT_CHANNEL_USER_CHANNEL_8
* CHAT_CHANNEL_USER_CHANNEL_9
* CHAT_CHANNEL_WHISPER
* CHAT_CHANNEL_WHISPER_SENT
* CHAT_CHANNEL_YELL
* CHAT_CHANNEL_ZONE
* CHAT_CHANNEL_ZONE_LANGUAGE_1
* CHAT_CHANNEL_ZONE_LANGUAGE_2
* CHAT_CHANNEL_ZONE_LANGUAGE_3
* CHAT_CHANNEL_ZONE_LANGUAGE_4


h5. MsgEffectResult
* EFFECT_RESULT_FADED
* EFFECT_RESULT_FULL_REFRESH
* EFFECT_RESULT_GAINED
* EFFECT_RESULT_TRANSFER
* EFFECT_RESULT_UPDATED


h5. MsgInteractType
* CHATTER_ACCEPT_QUEST_BESTOWAL
* CHATTER_ADVANCE_COMPLETABLE_QUEST_CONDITIONS_COMPLETE
* CHATTER_BEGIN
* CHATTER_BEGIN_INTERACT_NODE
* CHATTER_COMPLETE_QUEST_CONFIRM
* CHATTER_COMPLETE_QUEST_DIALOG
* CHATTER_CONFIRM_BUY_BAG_SPACE
* CHATTER_CONFIRM_BUY_BANK_SPACE
* CHATTER_CONFIRM_MAKE_TABLET
* CHATTER_CONTROL_SIEGE
* CHATTER_CRAFT_ITEM
* CHATTER_DECONSTRUCT_ITEM
* CHATTER_DESTROY_SIEGE
* CHATTER_DO_KEEP_GUILD_CLAIM
* CHATTER_DO_KEEP_GUILD_RELEASE
* CHATTER_END_ADVANCE_COMPLETABLE_QUEST_CONDITIONS
* CHATTER_END_BANK
* CHATTER_END_BOOK
* CHATTER_END_BUY_BAG_SPACE
* CHATTER_END_COMPLETE_QUEST
* CHATTER_END_CRAFT
* CHATTER_END_DOOR
* CHATTER_END_DYE_STATION
* CHATTER_END_FISH
* CHATTER_END_GIVE_ITEM
* CHATTER_END_GRAVEYARD_TRAVEL
* CHATTER_END_GUILDBANK
* CHATTER_END_GUILDKIOSK_BID
* CHATTER_END_GUILDKIOSK_PURCHASE
* CHATTER_END_HARVEST
* CHATTER_END_HIDDEN_THING
* CHATTER_END_HIDEYHOLE
* CHATTER_END_KEEP
* CHATTER_END_KEEP_GUILD_CLAIM
* CHATTER_END_KEEP_GUILD_RELEASE
* CHATTER_END_KEEP_PIECE
* CHATTER_END_KEEP_TRAVEL
* CHATTER_END_LEARN_TABLET
* CHATTER_END_LOCK
* CHATTER_END_LOOT
* CHATTER_END_MAIL
* CHATTER_END_NEW_QUEST_BESTOWAL
* CHATTER_END_PAY_BOUNTY
* CHATTER_END_PICKPOCKET
* CHATTER_END_REPAIR_ALL
* CHATTER_END_SHOP
* CHATTER_END_SIEGE
* CHATTER_END_STABLE
* CHATTER_END_STONE_MASON
* CHATTER_END_TALK
* CHATTER_END_TRADINGHOUSE
* CHATTER_END_USE_CLEMENCY
* CHATTER_END_USE_FURNITURE
* CHATTER_END_USE_SHADOWY_CONNECTIONS
* CHATTER_EXIT_HIDEYHOLE
* CHATTER_FEED_MOUNT
* CHATTER_FISH_BITE
* CHATTER_FISH_NIBBLE
* CHATTER_FISH_REEL_IN
* CHATTER_FORCE_LOCK
* CHATTER_GIVE_ITEM_COMPLETE
* CHATTER_GOODBYE
* CHATTER_GUILDKIOSK_IN_TRANSITION
* CHATTER_IMPROVE_ITEM
* CHATTER_INVALID
* CHATTER_LOCK_PICK_BROKEN
* CHATTER_LOOT_ADD_RADIUS_TARGET
* CHATTER_LOOT_ALL
* CHATTER_LOOT_ALL_NON_STOLEN
* CHATTER_LOOT_ITEM
* CHATTER_LOOT_REMOVE_RADIUS_TARGET
* CHATTER_LOOT_UPDATE
* CHATTER_OFFER_QUEST_BESTOWAL
* CHATTER_OPEN_GUILDBANK
* CHATTER_OPEN_HOOKPOINT_STORE
* CHATTER_OPEN_MAIL
* CHATTER_OPEN_TRADINGHOUSE
* CHATTER_PACKUP_SIEGE
* CHATTER_PICK_LOCK
* CHATTER_PLACE_GUILDKIOSK_BID
* CHATTER_PROMPT_BUY_BAG_SPACE
* CHATTER_PROMPT_CRAFT
* CHATTER_PROMPT_DYE_STATION
* CHATTER_PROMPT_LOCK
* CHATTER_PURCHASE_GUILDKIOSK
* CHATTER_REPAIR_SIEGE
* CHATTER_RESEARCH_ITEM
* CHATTER_RESET
* CHATTER_RESET_DURATION
* CHATTER_SHOW_BOOK
* CHATTER_SHOW_GRAVEYARD_TRAVEL
* CHATTER_SHOW_KEEP_GUILD_CLAIM
* CHATTER_SHOW_KEEP_GUILD_RELEASE
* CHATTER_SHOW_KEEP_TRAVEL
* CHATTER_SHOW_STONE_MASON
* CHATTER_START_ADVANCE_COMPLETABLE_QUEST_CONDITIONS
* CHATTER_START_BANK
* CHATTER_START_BOOK
* CHATTER_START_BUY_BAG_SPACE
* CHATTER_START_COMPLETE_QUEST
* CHATTER_START_CRAFT
* CHATTER_START_DOOR
* CHATTER_START_DYE_STATION
* CHATTER_START_FISH
* CHATTER_START_GIVE_ITEM
* CHATTER_START_GRAVEYARD_TRAVEL
* CHATTER_START_GUILDBANK
* CHATTER_START_GUILDKIOSK_BID
* CHATTER_START_GUILDKIOSK_PURCHASE
* CHATTER_START_HARVEST
* CHATTER_START_HIDDEN_THING
* CHATTER_START_HIDEYHOLE
* CHATTER_START_KEEP
* CHATTER_START_KEEP_GUILD_CLAIM
* CHATTER_START_KEEP_GUILD_RELEASE
* CHATTER_START_KEEP_PIECE
* CHATTER_START_KEEP_TRAVEL
* CHATTER_START_LEARN_TABLET
* CHATTER_START_LOCK
* CHATTER_START_LOOT
* CHATTER_START_MAIL
* CHATTER_START_NEW_QUEST_BESTOWAL
* CHATTER_START_PAY_BOUNTY
* CHATTER_START_PICKPOCKET
* CHATTER_START_REPAIR_ALL
* CHATTER_START_SHOP
* CHATTER_START_SIEGE
* CHATTER_START_STABLE
* CHATTER_START_STONE_MASON
* CHATTER_START_TALK
* CHATTER_START_TRADINGHOUSE
* CHATTER_START_USE_CLEMENCY
* CHATTER_START_USE_FURNITURE
* CHATTER_START_USE_SHADOWY_CONNECTIONS
* CHATTER_TALK_CHOICE
* CHATTER_TALK_CHOICE_CLEMENCY_COOLDOWN
* CHATTER_TALK_CHOICE_CLEMENCY_DISABLED
* CHATTER_TALK_CHOICE_INTIMIDATE_DISABLED
* CHATTER_TALK_CHOICE_MONEY
* CHATTER_TALK_CHOICE_PAY_BOUNTY
* CHATTER_TALK_CHOICE_PERSUADE_DISABLED
* CHATTER_TALK_CHOICE_SHADOWY_CONNECTIONS_UNAVAILABLE
* CHATTER_TALK_CHOICE_USE_CLEMENCY
* CHATTER_TALK_CHOICE_USE_SHADOWY_CONNECTIONS


h5. NamingError
* NAME_RULE_CANNOT_RENAME
* NAME_RULE_CANNOT_START_WITH_SPACE
* NAME_RULE_DUPLICATE_NAME
* NAME_RULE_INVALID_CHARACTERS
* NAME_RULE_INVALID_NAME
* NAME_RULE_MUST_END_WITH_LETTER
* NAME_RULE_NO_ADJACENT_PUNCTUATION_CHARACTERS
* NAME_RULE_NO_ERROR
* NAME_RULE_NO_NUMBERS
* NAME_RULE_SYSTEM_ERROR
* NAME_RULE_TOO_LONG
* NAME_RULE_TOO_MANY_IDENTICAL_ADJACENT_CHARACTERS
* NAME_RULE_TOO_MANY_PUNCTUATION_CHARACTERS
* NAME_RULE_TOO_SHORT


h5. OTPType
* OTP_TYPE_AUTHENTICATOR
* OTP_TYPE_EMAIL


h5. ObjectiveControlEvent
* OBJECTIVE_CONTROL_EVENT_AREA_INFLUENCE_CHANGED
* OBJECTIVE_CONTROL_EVENT_AREA_NEUTRAL
* OBJECTIVE_CONTROL_EVENT_ASSAULTED
* OBJECTIVE_CONTROL_EVENT_CAPTURED
* OBJECTIVE_CONTROL_EVENT_FLAG_DROPPED
* OBJECTIVE_CONTROL_EVENT_FLAG_RETURNED
* OBJECTIVE_CONTROL_EVENT_FLAG_RETURNED_BY_TIMER
* OBJECTIVE_CONTROL_EVENT_FLAG_SPAWNED
* OBJECTIVE_CONTROL_EVENT_FLAG_TAKEN
* OBJECTIVE_CONTROL_EVENT_FULLY_HELD
* OBJECTIVE_CONTROL_EVENT_LOST
* OBJECTIVE_CONTROL_EVENT_NONE
* OBJECTIVE_CONTROL_EVENT_RECAPTURED
* OBJECTIVE_CONTROL_EVENT_UNDER_ATTACK


h5. ObjectiveControlState
* OBJECTIVE_CONTROL_STATE_AREA_ABOVE_CONTROL_THRESHOLD
* OBJECTIVE_CONTROL_STATE_AREA_BELOW_CONTROL_THRESHOLD
* OBJECTIVE_CONTROL_STATE_AREA_MAX_CONTROL
* OBJECTIVE_CONTROL_STATE_AREA_NO_CONTROL
* OBJECTIVE_CONTROL_STATE_FLAG_AT_BASE
* OBJECTIVE_CONTROL_STATE_FLAG_AT_ENEMY_BASE
* OBJECTIVE_CONTROL_STATE_FLAG_DROPPED
* OBJECTIVE_CONTROL_STATE_FLAG_HELD
* OBJECTIVE_CONTROL_STATE_POINT_CONTROLLED
* OBJECTIVE_CONTROL_STATE_POINT_TRANSITIONING
* OBJECTIVE_CONTROL_STATE_UNKNOWN


h5. OnlineStatus
* ONLINE_STATUS_ACTIVE
* ONLINE_STATUS_AFK
* ONLINE_STATUS_OFFLINE


h5. PledgeOfMaraResult
* PLEDGE_OF_MARA_RESULT_BEGIN_PLEDGE
* PLEDGE_OF_MARA_RESULT_DEAD
* PLEDGE_OF_MARA_RESULT_OUT_OF_RANGE
* PLEDGE_OF_MARA_RESULT_PLEDGED
* PLEDGE_OF_MARA_RESULT_PLEDGE_CANCELLED
* PLEDGE_OF_MARA_RESULT_PLEDGE_DECLINED
* PLEDGE_OF_MARA_RESULT_PLEDGE_INELIGIBLE
* PLEDGE_OF_MARA_RESULT_TOO_BUSY


h5. ProgressReason
* PROGRESS_REASON_ACHIEVEMENT
* PROGRESS_REASON_ACTION
* PROGRESS_REASON_ALLIANCE_POINTS
* PROGRESS_REASON_AVA
* PROGRESS_REASON_BATTLEGROUND
* PROGRESS_REASON_BOOK_COLLECTION_COMPLETE
* PROGRESS_REASON_BOSS_KILL
* PROGRESS_REASON_COLLECT_BOOK
* PROGRESS_REASON_COMMAND
* PROGRESS_REASON_COMPLETE_POI
* PROGRESS_REASON_DARK_ANCHOR_CLOSED
* PROGRESS_REASON_DARK_FISSURE_CLOSED
* PROGRESS_REASON_DISCOVER_POI
* PROGRESS_REASON_DUNGEON_CHALLENGE
* PROGRESS_REASON_EVENT
* PROGRESS_REASON_FINESSE
* PROGRESS_REASON_GRANT_REPUTATION
* PROGRESS_REASON_GUILD_REP
* PROGRESS_REASON_JUSTICE_SKILL_EVENT
* PROGRESS_REASON_KEEP_REWARD
* PROGRESS_REASON_KILL
* PROGRESS_REASON_LFG_REWARD
* PROGRESS_REASON_LOCK_PICK
* PROGRESS_REASON_MEDAL
* PROGRESS_REASON_NONE
* PROGRESS_REASON_OTHER
* PROGRESS_REASON_OVERLAND_BOSS_KILL
* PROGRESS_REASON_PVP_EMPEROR
* PROGRESS_REASON_QUEST
* PROGRESS_REASON_REWARD
* PROGRESS_REASON_SCRIPTED_EVENT
* PROGRESS_REASON_SKILL_BOOK
* PROGRESS_REASON_TRADESKILL
* PROGRESS_REASON_TRADESKILL_ACHIEVEMENT
* PROGRESS_REASON_TRADESKILL_CONSUME
* PROGRESS_REASON_TRADESKILL_HARVEST
* PROGRESS_REASON_TRADESKILL_QUEST
* PROGRESS_REASON_TRADESKILL_RECIPE
* PROGRESS_REASON_TRADESKILL_TRAIT


h5. QueueForCampaignResponseType
* QUEUE_FOR_CAMPAIGN_RESULT_ALREADY_IN_CAMPAIGN
* QUEUE_FOR_CAMPAIGN_RESULT_ALREADY_QUEUED
* QUEUE_FOR_CAMPAIGN_RESULT_CAMPAIGNS_DISABLED
* QUEUE_FOR_CAMPAIGN_RESULT_CAMPAIGN_FULL
* QUEUE_FOR_CAMPAIGN_RESULT_CANNOT_QUEUE_FROM_BATTLEGROUND
* QUEUE_FOR_CAMPAIGN_RESULT_CANNOT_QUEUE_FROM_LOCATION
* QUEUE_FOR_CAMPAIGN_RESULT_DESTINATION_NOT_UP
* QUEUE_FOR_CAMPAIGN_RESULT_DESTINATION_WORLD_FULL
* QUEUE_FOR_CAMPAIGN_RESULT_GROUP_ALREADY_IN_CAMPAIGN
* QUEUE_FOR_CAMPAIGN_RESULT_GROUP_MEMBER_WITH_INSUFFICIENT_LEVEL
* QUEUE_FOR_CAMPAIGN_RESULT_GROUP_NOT_ASSIGNED_TO_CAMPAIGN
* QUEUE_FOR_CAMPAIGN_RESULT_IMPERIAL_CITY_NOT_CONTROLLED
* QUEUE_FOR_CAMPAIGN_RESULT_INSUFFICIENT_LEVEL
* QUEUE_FOR_CAMPAIGN_RESULT_INTERNAL_ERROR
* QUEUE_FOR_CAMPAIGN_RESULT_INVALID_CAMPAIGN
* QUEUE_FOR_CAMPAIGN_RESULT_INVALID_GROUP
* QUEUE_FOR_CAMPAIGN_RESULT_INVALID_LOGIN_STATE
* QUEUE_FOR_CAMPAIGN_RESULT_INVALID_WORLD
* QUEUE_FOR_CAMPAIGN_RESULT_NOT_GROUP_LEADER
* QUEUE_FOR_CAMPAIGN_RESULT_NOT_ONLINE
* QUEUE_FOR_CAMPAIGN_RESULT_NO_PERMISSION
* QUEUE_FOR_CAMPAIGN_RESULT_SUCCESS


h5. ResurrectResult
* RESURRECT_RESULT_ALREADY_CONSIDERING
* RESURRECT_RESULT_DECLINED
* RESURRECT_RESULT_IN_KILLZONE
* RESURRECT_RESULT_NO_SOUL_GEM
* RESURRECT_RESULT_SOUL_GEM_IN_USE
* RESURRECT_RESULT_SUCCESS


h5. SendMailResult
* MAIL_SEND_RESULT_CANCELED
* MAIL_SEND_RESULT_CANT_SEND_CASH_COD
* MAIL_SEND_RESULT_CANT_SEND_TO_SELF
* MAIL_SEND_RESULT_FAIL_BLANK_MAIL
* MAIL_SEND_RESULT_FAIL_DB_ERROR
* MAIL_SEND_RESULT_FAIL_IGNORED
* MAIL_SEND_RESULT_FAIL_INVALID_NAME
* MAIL_SEND_RESULT_FAIL_IN_PROGRESS
* MAIL_SEND_RESULT_FAIL_MAILBOX_FULL
* MAIL_SEND_RESULT_INVALID_ITEM
* MAIL_SEND_RESULT_MAILBOX_NOT_OPEN
* MAIL_SEND_RESULT_MAIL_DISABLED
* MAIL_SEND_RESULT_NOT_ENOUGH_ITEMS_FOR_COD
* MAIL_SEND_RESULT_NOT_ENOUGH_MONEY
* MAIL_SEND_RESULT_RECIPIENT_NOT_FOUND
* MAIL_SEND_RESULT_SUCCESS
* MAIL_SEND_RESULT_TOO_MANY_ATTACHMENTS


h5. SocialActionResult
* SOCIAL_RESULT_ACCOUNT_ALREADY_FRIENDS
* SOCIAL_RESULT_ACCOUNT_ALREADY_IGNORED
* SOCIAL_RESULT_ACCOUNT_ALREADY_INVITED
* SOCIAL_RESULT_ACCOUNT_IGNORING_YOU
* SOCIAL_RESULT_ACCOUNT_NOT_FOUND
* SOCIAL_RESULT_ACCOUNT_OFFLINE
* SOCIAL_RESULT_ACCOUNT_TOO_MANY_FRIENDS
* SOCIAL_RESULT_ACCOUNT_TOO_MANY_IGNORES
* SOCIAL_RESULT_ALREADY_IN_GUILD
* SOCIAL_RESULT_ALREADY_IN_MAX_GUILDS
* SOCIAL_RESULT_ALREADY_IN_MAX_GUILDS_CANT_INVITE
* SOCIAL_RESULT_AT_MAX_LEADERSHIP_ROLES
* SOCIAL_RESULT_BEING_ARRESTED
* SOCIAL_RESULT_CANNOT_DELETE_A_GUILD_RANK_THAT_IS_NOT_EMPTY
* SOCIAL_RESULT_CANT_DEMOTE
* SOCIAL_RESULT_CANT_FRIEND_SELF
* SOCIAL_RESULT_CANT_IGNORE_SELF
* SOCIAL_RESULT_CANT_JUMP_INVALID_TARGET
* SOCIAL_RESULT_CANT_JUMP_SELF
* SOCIAL_RESULT_CANT_JUMP_TARGET_IN_HOMESHOW
* SOCIAL_RESULT_CANT_JUMP_TARGET_PREVIEWING_HOUSE
* SOCIAL_RESULT_CANT_KICK_LEADER
* SOCIAL_RESULT_CANT_PROMOTE
* SOCIAL_RESULT_CANT_PROMOTE_LEADING_ANOTHER_GUILD
* SOCIAL_RESULT_CHARACTER_NOT_FOUND
* SOCIAL_RESULT_DESTINATION_FULL
* SOCIAL_RESULT_DISABLED
* SOCIAL_RESULT_EDIT_HERALDRY_GUILD_LEADER_ONLY
* SOCIAL_RESULT_EDIT_PERMISSIONS_GUILD_LEADER_ONLY
* SOCIAL_RESULT_GUILD_LEADER_PERMISSIONS_NOT_EDITABLE
* SOCIAL_RESULT_GUILD_NOT_FOUND
* SOCIAL_RESULT_HERALDRY_DISABLED
* SOCIAL_RESULT_HERALDRY_EDITED_TOO_RECENTLY
* SOCIAL_RESULT_HERALDRY_GUILD_BANK_DISABLED
* SOCIAL_RESULT_HERALDRY_NOT_SET_YET
* SOCIAL_RESULT_INSUFFICIENT_ALLIANCE_POINTS_FOR_CAMP
* SOCIAL_RESULT_INSUFFICIENT_HERALDRY_FUNDS
* SOCIAL_RESULT_INSUFFICIENT_STANDARD_FUNDS
* SOCIAL_RESULT_INSUFFICIENT_TABARD_FUNDS
* SOCIAL_RESULT_INVALID_GUILD_NAME
* SOCIAL_RESULT_INVALID_GUILD_RANK
* SOCIAL_RESULT_INVALID_HERALDRY_DATA
* SOCIAL_RESULT_JUMPS_EXIT_DISABLED
* SOCIAL_RESULT_JUMP_ENTRY_DISABLED
* SOCIAL_RESULT_NAME_ALREADY_TAKEN
* SOCIAL_RESULT_NOT_A_MEMBER
* SOCIAL_RESULT_NOT_GROUPED
* SOCIAL_RESULT_NOT_GUILD_LEADER
* SOCIAL_RESULT_NOT_INVITED
* SOCIAL_RESULT_NOT_IN_SAME_GROUP
* SOCIAL_RESULT_NOT_SAME_GROUP
* SOCIAL_RESULT_NO_BATTLE_STANDARD_PERMISSION
* SOCIAL_RESULT_NO_CAMPAIGN_PERMISSION
* SOCIAL_RESULT_NO_DEMOTE_PERMISSION
* SOCIAL_RESULT_NO_DESCRIPTION_EDIT_PREMISSION
* SOCIAL_RESULT_NO_ERROR
* SOCIAL_RESULT_NO_GUILD_BANK_PERMISSION
* SOCIAL_RESULT_NO_GUILD_LEADER_RANK_DEFINED
* SOCIAL_RESULT_NO_HERALDRY_EDIT_PERMISSION
* SOCIAL_RESULT_NO_HOUSE_PERMISSION
* SOCIAL_RESULT_NO_INTRA_CAMPAIGN_JUMPS_ALLOWED
* SOCIAL_RESULT_NO_INVITE_PERMISSION
* SOCIAL_RESULT_NO_JUMP_CHAMPION_RANK
* SOCIAL_RESULT_NO_JUMP_IN_COMBAT
* SOCIAL_RESULT_NO_KEEP_CLAIM_PERMISSION
* SOCIAL_RESULT_NO_KICK_PERMISSION
* SOCIAL_RESULT_NO_LOCATION
* SOCIAL_RESULT_NO_NOTE_EDIT_PERMISSION
* SOCIAL_RESULT_NO_PROMOTE_PERMISSION
* SOCIAL_RESULT_NO_RECRUITMENT_EDIT_PERMISSION
* SOCIAL_RESULT_NO_RECRUIT_RANK_DEFINED
* SOCIAL_RESULT_NO_ROOM
* SOCIAL_RESULT_NO_ROOM_FOR_CAMP
* SOCIAL_RESULT_NO_ROOM_FOR_STANDARD
* SOCIAL_RESULT_NO_ROOM_FOR_TABARD
* SOCIAL_RESULT_NO_SET_MOTD_PERMISSION
* SOCIAL_RESULT_NO_STORE_BUY_PERMISSION
* SOCIAL_RESULT_NO_STORE_SELL_PERMISSION
* SOCIAL_RESULT_NO_STRUCTURE_EDIT_PERMISSION
* SOCIAL_RESULT_OTHER_ACCOUNT_TOO_MANY_FRIENDS
* SOCIAL_RESULT_PERMISSION_SAVE_FAILURE
* SOCIAL_RESULT_RATE_LIMIT_EXCEEDED
* SOCIAL_RESULT_REQUEST_NOT_FOUND
* SOCIAL_RESULT_SOCIAL_DATA_UNAVAILABLE
* SOCIAL_RESULT_SOCIAL_ERROR
* SOCIAL_RESULT_TOO_FEW_GUILD_RANKS
* SOCIAL_RESULT_TOO_MANY_GUILD_RANKS
* SOCIAL_RESULT_UNABLE_TO_RELEASE_KEEP_CLAIM
* SOCIAL_RESULT_WRONG_ALLIANCE


h5. SoulGemItemChargingReason
* SOUL_GEM_ITEM_CHARGING_ALREADY_CHARGED
* SOUL_GEM_ITEM_CHARGING_NO_SOUL_GEM


h5. StoreFailure
* STORE_FAILURE_ALREADY_HAVE_COLLECTIBLE
* STORE_FAILURE_AT_FENCE_LIMIT
* STORE_FAILURE_BUY_ITEM_FAILED_REQS
* STORE_FAILURE_CANT_BE_SOLD
* STORE_FAILURE_CANT_BUY_MULTIPLES
* STORE_FAILURE_HOOKPOINT_NOT_ACTIVE
* STORE_FAILURE_ITEM_BUY_UNIQUE
* STORE_FAILURE_NOT_ENOUGH_ALLIANCE_POINTS
* STORE_FAILURE_NOT_ENOUGH_HIDDEN_THING
* STORE_FAILURE_NOT_ENOUGH_ITEM
* STORE_FAILURE_NOT_ENOUGH_STABLE_SPACE
* STORE_FAILURE_NOT_ENOUGH_TELVAR_STONES
* STORE_FAILURE_NOT_ENOUGH_WRIT_VOUCHERS
* STORE_FAILURE_NOT_STOLEN
* STORE_FAILURE_NO_NEED_FOR_QUEST_ITEM
* STORE_FAILURE_NO_NEED_FOR_THAT_MANY_QUEST_ITEM
* STORE_FAILURE_SELL_FAILED_MONEY_CAP
* STORE_FAILURE_STOLEN
* STORE_FAILURE_WORTHLESS_TO_FENCE


h5. TradeActionResult
* TRADE_ACTION_RESULT_ADD_ITEM_DUPLICATE
* TRADE_ACTION_RESULT_DISABLED
* TRADE_ACTION_RESULT_IGNORING_YOU
* TRADE_ACTION_RESULT_INVALID_TRADE_SLOT
* TRADE_ACTION_RESULT_ITEM_ADD_LOCKED
* TRADE_ACTION_RESULT_ITEM_IS_BOUND
* TRADE_ACTION_RESULT_ITEM_IS_STOLEN
* TRADE_ACTION_RESULT_ITEM_UNIQUE_FROM_OTHER
* TRADE_ACTION_RESULT_NEED_ALLIANCE_FOR_TRADE
* TRADE_ACTION_RESULT_NEED_PLAYER_FOR_TRADE
* TRADE_ACTION_RESULT_NOT_CONSIDERING_TRADE_INVITE
* TRADE_ACTION_RESULT_NOT_ENOUGH_EMPTY_SLOTS
* TRADE_ACTION_RESULT_NOT_ENOUGH_SLOTS
* TRADE_ACTION_RESULT_NOT_TRADING
* TRADE_ACTION_RESULT_NOT_WAITING_TRADE_INVITE
* TRADE_ACTION_RESULT_OTHER_HAS_TOO_MUCH_MONEY
* TRADE_ACTION_RESULT_OTHER_IS_MISSING_MONEY
* TRADE_ACTION_RESULT_OTHER_PLAYER_MISSING
* TRADE_ACTION_RESULT_PARTICIPANT_IS_DEAD
* TRADE_ACTION_RESULT_SUCCESS
* TRADE_ACTION_RESULT_TARGET_IS_TRADING
* TRADE_ACTION_RESULT_TOO_FAR_TO_TRADE
* TRADE_ACTION_RESULT_TRADE_INVITE_ALREADY_SENT
* TRADE_ACTION_RESULT_TRADE_INVITE_FAILED
* TRADE_ACTION_RESULT_TRADE_INVITE_PENDING
* TRADE_ACTION_RESULT_TRADE_INVITE_WHEN_ACTIVE
* TRADE_ACTION_RESULT_TRADE_SELF_ERROR
* TRADE_ACTION_RESULT_TRADE_TARGET_REQUIRED
* TRADE_ACTION_RESULT_UKNOWN_ITEM
* TRADE_ACTION_RESULT_YOU_ARE_BUSY
* TRADE_ACTION_RESULT_YOU_ARE_MISSING_MONEY
* TRADE_ACTION_RESULT_YOU_HAVE_TOO_MUCH_MONEY


h5. TradeskillResult
* CRAFTING_RESULT_ALREADY_RESEARCHING
* CRAFTING_RESULT_BUSY
* CRAFTING_RESULT_CANT_DECONSTRUCT_WORN
* CRAFTING_RESULT_CRAFT_SUCCESS
* CRAFTING_RESULT_DECONSTRUCT_BAD_QUANTITY
* CRAFTING_RESULT_DECONSTRUCT_SUCCESS
* CRAFTING_RESULT_FAIL_PATTERN_REQUIREMENTS
* CRAFTING_RESULT_IMPROVE_FAILED
* CRAFTING_RESULT_INTERRUPTED
* CRAFTING_RESULT_INVALID_BASE
* CRAFTING_RESULT_INVALID_MATERIAL
* CRAFTING_RESULT_INVALID_PATTERN
* CRAFTING_RESULT_INVALID_REAGENT
* CRAFTING_RESULT_INVALID_RESEARCH
* CRAFTING_RESULT_INVALID_RESEARCH_TRADESKILL
* CRAFTING_RESULT_INVALID_RUNE
* CRAFTING_RESULT_INVALID_STYLE_MATERIAL
* CRAFTING_RESULT_INVALID_STYLE_REFORGE
* CRAFTING_RESULT_INVALID_TRAIT_MATERIAL
* CRAFTING_RESULT_ITEM_CRAFT_UNIQUE
* CRAFTING_RESULT_ITEM_NOT_DECONSTRUCTABLE
* CRAFTING_RESULT_ITEM_NOT_IMPROVABLE
* CRAFTING_RESULT_ITEM_NOT_REFINEABLE
* CRAFTING_RESULT_MUST_LEARN_TRAIT
* CRAFTING_RESULT_NEED_BASE_RANK
* CRAFTING_RESULT_NEED_COMPONENTS_FOR_CRAFT
* CRAFTING_RESULT_NEED_COMPONENTS_FOR_REFORGE
* CRAFTING_RESULT_NEED_DECONSTRUCT_RANK
* CRAFTING_RESULT_NEED_ENCHANTING_QUALITY_RANK
* CRAFTING_RESULT_NEED_ENCHANTING_RANK
* CRAFTING_RESULT_NEED_ITEM_TO_RESEARCH
* CRAFTING_RESULT_NEED_RANK_FOR_CRAFT
* CRAFTING_RESULT_NEED_RANK_FOR_REFORGE
* CRAFTING_RESULT_NEED_RECIPE_QUALITY_RANK
* CRAFTING_RESULT_NEED_RECIPE_RANK
* CRAFTING_RESULT_NEED_REFINE_RANK
* CRAFTING_RESULT_NEED_REQUIREMENTS_FOR_CRAFT
* CRAFTING_RESULT_NEED_SPACE_TO_CRAFT
* CRAFTING_RESULT_NEED_SPACE_TO_DECONSTRUCT
* CRAFTING_RESULT_NEED_SPACE_TO_REFINE
* CRAFTING_RESULT_NEED_UNLOCK_TO_DECONSTRUCT
* CRAFTING_RESULT_NEED_UNLOCK_TO_REFORGE
* CRAFTING_RESULT_NEED_VALID_DECONSTRUCTION
* CRAFTING_RESULT_NO_ITEM_TO_DECONSTRUCT
* CRAFTING_RESULT_NO_ITEM_TO_REFINE
* CRAFTING_RESULT_NO_MATCH
* CRAFTING_RESULT_NO_MONEY
* CRAFTING_RESULT_NO_MONEY_REFORGE
* CRAFTING_RESULT_REFINE_SUCCESS
* CRAFTING_RESULT_REFORGE_SUCCESS
* CRAFTING_RESULT_SAME_STYLE_REFORGE
* CRAFTING_RESULT_TOO_FEW_REAGENTS
* CRAFTING_RESULT_TOO_MANY_REAGENTS
* CRAFTING_RESULT_TOO_MANY_RESEARCH
* CRAFTING_RESULT_UNKNOWN_RECIPE
* CRAFTING_RESULT_UNKNOWN_SKILL_DECONSTRUCT
* CRAFTING_RESULT_UNKNOWN_SKILL_REFINE
* CRAFTING_RESULT_WRONG_ADDITIVE_CATEGORY
* CRAFTING_RESULT_WRONG_BOOSTER
* CRAFTING_RESULT_WRONG_STYLE_CRAFT
* CRAFTING_RESULT_WRONG_STYLE_REFORGE
* CRAFTING_RESULT_WRONG_TARGET_CRAFT
* CRAFTING_RESULT_WRONG_TARGET_DECONSTRUCT
* CRAFTING_RESULT_WRONG_TARGET_REFINE
* CRAFTING_RESULT_WRONG_TARGET_REFORGE
* CRAFTING_RESULT_WRONG_TRADESKILL_FOR_CRAFT
* CRAFTING_RESULT_WRONG_TRADESKILL_FOR_REFORGE


h5. TradingHouseFilterType
* TRADING_HOUSE_FILTER_TYPE_ALL_LEVEL
* TRADING_HOUSE_FILTER_TYPE_ARMOR
* TRADING_HOUSE_FILTER_TYPE_CHAMPION_POINTS
* TRADING_HOUSE_FILTER_TYPE_ENCHANTMENT
* TRADING_HOUSE_FILTER_TYPE_EQUIP
* TRADING_HOUSE_FILTER_TYPE_FURNITURE_CATEGORY
* TRADING_HOUSE_FILTER_TYPE_FURNITURE_SUBCATEGORY
* TRADING_HOUSE_FILTER_TYPE_ITEM
* TRADING_HOUSE_FILTER_TYPE_LEVEL
* TRADING_HOUSE_FILTER_TYPE_PRICE
* TRADING_HOUSE_FILTER_TYPE_QUALITY
* TRADING_HOUSE_FILTER_TYPE_SPECIALIZED_ITEM
* TRADING_HOUSE_FILTER_TYPE_TRAIT
* TRADING_HOUSE_FILTER_TYPE_WEAPON


h5. TradingHouseResult
* TRADING_HOUSE_RESULT_AWAITING_INITIAL_STATUS
* TRADING_HOUSE_RESULT_CANCEL_SALE_PENDING
* TRADING_HOUSE_RESULT_CANT_AFFORD_BUYPRICE
* TRADING_HOUSE_RESULT_CANT_AFFORD_POST_FEE
* TRADING_HOUSE_RESULT_CANT_BUY_YOUR_OWN_POSTS
* TRADING_HOUSE_RESULT_CANT_POST_BOUND
* TRADING_HOUSE_RESULT_CANT_POST_LOCKED
* TRADING_HOUSE_RESULT_CANT_POST_STOLEN
* TRADING_HOUSE_RESULT_CANT_SELL_FOR_FREE
* TRADING_HOUSE_RESULT_CANT_SELL_FOR_OVER_MAX_AMOUNT
* TRADING_HOUSE_RESULT_CANT_SWITCH_GUILDS_WHILE_AWAITING_RESPONSE
* TRADING_HOUSE_RESULT_CAN_ONLY_POST_FROM_BACKPACK
* TRADING_HOUSE_RESULT_GUILD_TOO_SMALL
* TRADING_HOUSE_RESULT_INVALID_GUILD_ID
* TRADING_HOUSE_RESULT_ITEM_NOT_FOUND
* TRADING_HOUSE_RESULT_LISTINGS_PENDING
* TRADING_HOUSE_RESULT_NOT_A_MEMBER
* TRADING_HOUSE_RESULT_NOT_IN_A_GUILD
* TRADING_HOUSE_RESULT_NOT_OPEN
* TRADING_HOUSE_RESULT_NO_PERMISSION
* TRADING_HOUSE_RESULT_POST_PENDING
* TRADING_HOUSE_RESULT_PURCHASE_PENDING
* TRADING_HOUSE_RESULT_SEARCH_PENDING
* TRADING_HOUSE_RESULT_SEARCH_RATE_EXCEEDED
* TRADING_HOUSE_RESULT_SUCCESS
* TRADING_HOUSE_RESULT_TOO_MANY_POSTS


h5. TradingHouseSortField
* TRADING_HOUSE_SORT_EXPIRY_TIME
* TRADING_HOUSE_SORT_REQUIRED_LEVEL
* TRADING_HOUSE_SORT_SALE_PRICE


h5. TrialAccountRestrictionType
* TRIAL_RESTRICTION_CANNOT_USE_GUILDS
* TRIAL_RESTRICTION_CANNOT_WHISPER
* TRIAL_RESTRICTION_CANNOT_ZONE_YELL
* TRIAL_RESTRICTION_NO_RESTRICTION
* TRIAL_RESTRICTION_WHISPER_FRIENDS_ONLY


h5. UnassignCampaignResult
* UNASSIGN_CAMPAIGN_RESULT_FAILED_INSUFFICIENT_AP
* UNASSIGN_CAMPAIGN_RESULT_FAILED_INSUFFICIENT_GOLD
* UNASSIGN_CAMPAIGN_RESULT_FAILED_NOT_ASSIGNED_TO_CAMPAIGN
* UNASSIGN_CAMPAIGN_RESULT_FAILED_PLAYER_IN_CAMPAIGN
* UNASSIGN_CAMPAIGN_RESULT_FAILED_UNASSIGN
* UNASSIGN_CAMPAIGN_RESULT_FAILED_UNASSIGN_COOLDOWN
* UNASSIGN_CAMPAIGN_RESULT_SUCCESS


h5. Globals
* MAX_EMAIL_LENGTH
* ACCOUNT_NAME_MIN_LENGTH
* CHARNAME_MIN_LENGTH
* COLLECTIBLE_NAME_MIN_LENGTH
* MAX_DEVICE_ID_LENGTH
* MAX_GUILD_MEMBERS
* MAX_GUILDS
* MAIL_MAX_BODY_CHARACTERS
* MAX_LOCAL_MAILS
* MAIL_MAX_SUBJECT_CHARACTERS
* MAX_TEXT_CHAT_INPUT_CHARACTERS
* NUM_BUG_CATEGORIES
* MAX_PASSWORD_LENGTH
* SYSTEM_MAIL_MAX_PARAMETER_CHARACTERS


h5. AddOnLoadState
* ADDON_STATE_DEPENDENCIES_DISABLED
* ADDON_STATE_DISABLED
* ADDON_STATE_ENABLED
* ADDON_STATE_ERROR_STATE_UNABLE_TO_LOAD
* ADDON_STATE_NO_STATE
* ADDON_STATE_TOC_LOADED
* ADDON_STATE_VERSION_MISMATCH


h5. AnchorConstrains
* ANCHOR_CONSTRAINS_X
* ANCHOR_CONSTRAINS_XY
* ANCHOR_CONSTRAINS_Y


h5. AnchorPosition
* BOTTOM
* BOTTOMLEFT
* BOTTOMRIGHT
* CENTER
* LEFT
* NONE
* RIGHT
* TOP
* TOPLEFT
* TOPRIGHT


h5. AnimationPlayback
* ANIMATION_PLAYBACK_INVALID
* ANIMATION_PLAYBACK_LOOP
* ANIMATION_PLAYBACK_ONE_SHOT
* ANIMATION_PLAYBACK_PING_PONG


h5. AnimationType
* ANIMATION_ALPHA
* ANIMATION_COLOR
* ANIMATION_CUSTOM
* ANIMATION_INVALID
* ANIMATION_ROTATE3D
* ANIMATION_SCALE
* ANIMATION_SCROLL
* ANIMATION_SIZE
* ANIMATION_TEXTURE
* ANIMATION_TEXTUREROTATE
* ANIMATION_TEXTURESLIDE
* ANIMATION_TRANSLATE
* ANIMATION_TRANSLATE3D


h5. BarAlignment
* BAR_ALIGNMENT_CENTER
* BAR_ALIGNMENT_NORMAL
* BAR_ALIGNMENT_REVERSE


h5. ButtonState
* BSTATE_DISABLED
* BSTATE_DISABLED_PRESSED
* BSTATE_NORMAL
* BSTATE_PRESSED


h5. CardinalDirection
* CARDINAL_DIRECTION_EAST
* CARDINAL_DIRECTION_NORTH
* CARDINAL_DIRECTION_SOUTH
* CARDINAL_DIRECTION_WEST


h5. ControlAccessControl
* CONTROL_ACCESS_PRIVATE
* CONTROL_ACCESS_PUBLIC


h5. ControlOrientation
* ORIENTATION_HORIZONTAL
* ORIENTATION_VERTICAL


h5. ControlType
* CT_BACKDROP
* CT_BUTTON
* CT_COLORSELECT
* CT_COMPASS
* CT_CONTROL
* CT_COOLDOWN
* CT_DEBUGTEXT
* CT_EDITBOX
* CT_INVALID_TYPE
* CT_LABEL
* CT_LINE
* CT_MAPDISPLAY
* CT_ROOT_WINDOW
* CT_SCROLL
* CT_SLIDER
* CT_STATUSBAR
* CT_TEXTBUFFER
* CT_TEXTURE
* CT_TEXTURECOMPOSITE
* CT_TOOLTIP
* CT_TOPLEVELCONTROL


h5. CooldownDisplayType
* CD_TYPE_RADIAL
* CD_TYPE_VERTICAL
* CD_TYPE_VERTICAL_REVEAL


h5. CooldownTimeType
* CD_TIME_TYPE_TIME_REMAINING
* CD_TIME_TYPE_TIME_UNTIL


h5. DrawLayer
* DL_BACKGROUND
* DL_CONTROLS
* DL_OVERLAY
* DL_TEXT


h5. DrawTier
* DT_HIGH
* DT_LOW
* DT_MEDIUM
* DT_PARENT


h5. EventReasonType
* EVENT_REASON_HARDWARE
* EVENT_REASON_SOFTWARE


h5. FontStyle
* FONT_STYLE_NORMAL
* FONT_STYLE_OUTLINE
* FONT_STYLE_OUTLINE_THICK
* FONT_STYLE_SHADOW
* FONT_STYLE_SOFT_SHADOW_THICK
* FONT_STYLE_SOFT_SHADOW_THIN


h5. GuiRender3DSpaceSystem
* GUI_RENDER_3D_SPACE_SYSTEM_CAMERA
* GUI_RENDER_3D_SPACE_SYSTEM_WORLD


h5. InputDeviceType
* INPUT_DEVICE_TYPE_KEYBOARD
* INPUT_DEVICE_TYPE_MOUSE


h5. KeyCode
* KEY_0
* KEY_1
* KEY_2
* KEY_3
* KEY_4
* KEY_5
* KEY_6
* KEY_7
* KEY_8
* KEY_9
* KEY_A
* KEY_ALT
* KEY_B
* KEY_BACKSPACE
* KEY_C
* KEY_CAPSLOCK
* KEY_COMMAND
* KEY_CTRL
* KEY_D
* KEY_DELETE
* KEY_DOWNARROW
* KEY_E
* KEY_END
* KEY_ENTER
* KEY_ESCAPE
* KEY_F
* KEY_F1
* KEY_F10
* KEY_F11
* KEY_F12
* KEY_F13
* KEY_F14
* KEY_F15
* KEY_F16
* KEY_F17
* KEY_F18
* KEY_F19
* KEY_F2
* KEY_F20
* KEY_F21
* KEY_F22
* KEY_F23
* KEY_F24
* KEY_F3
* KEY_F4
* KEY_F5
* KEY_F6
* KEY_F7
* KEY_F8
* KEY_F9
* KEY_G
* KEY_GAMEPAD_BACK
* KEY_GAMEPAD_BACK_HOLD
* KEY_GAMEPAD_BOTH_BACK_START
* KEY_GAMEPAD_BOTH_BUTTON_1_BUTTON_4
* KEY_GAMEPAD_BOTH_BUTTON_2_BUTTON_3
* KEY_GAMEPAD_BOTH_BUTTON_2_BUTTON_4
* KEY_GAMEPAD_BOTH_DPAD_RIGHT_BUTTON_2
* KEY_GAMEPAD_BOTH_LEFT_SHOULDER_BUTTON_1
* KEY_GAMEPAD_BOTH_LEFT_SHOULDER_BUTTON_2
* KEY_GAMEPAD_BOTH_LEFT_SHOULDER_BUTTON_3
* KEY_GAMEPAD_BOTH_LEFT_SHOULDER_BUTTON_4
* KEY_GAMEPAD_BOTH_LEFT_SHOULDER_DPAD_LEFT
* KEY_GAMEPAD_BOTH_LEFT_SHOULDER_LEFT_STICK
* KEY_GAMEPAD_BOTH_LEFT_SHOULDER_RIGHT_STICK
* KEY_GAMEPAD_BOTH_LEFT_TRIGGER_BUTTON_1
* KEY_GAMEPAD_BOTH_RIGHT_SHOULDER_BUTTON_1
* KEY_GAMEPAD_BOTH_RIGHT_SHOULDER_BUTTON_2
* KEY_GAMEPAD_BOTH_RIGHT_SHOULDER_BUTTON_3
* KEY_GAMEPAD_BOTH_RIGHT_SHOULDER_BUTTON_4
* KEY_GAMEPAD_BOTH_SHOULDERS
* KEY_GAMEPAD_BOTH_STICKS
* KEY_GAMEPAD_BOTH_TOUCHPAD_START
* KEY_GAMEPAD_BOTH_TRIGGERS
* KEY_GAMEPAD_BUTTON_1
* KEY_GAMEPAD_BUTTON_1_HOLD
* KEY_GAMEPAD_BUTTON_2
* KEY_GAMEPAD_BUTTON_2_HOLD
* KEY_GAMEPAD_BUTTON_3
* KEY_GAMEPAD_BUTTON_3_HOLD
* KEY_GAMEPAD_BUTTON_4
* KEY_GAMEPAD_BUTTON_4_HOLD
* KEY_GAMEPAD_DPAD_DOWN
* KEY_GAMEPAD_DPAD_DOWN_HOLD
* KEY_GAMEPAD_DPAD_LEFT
* KEY_GAMEPAD_DPAD_LEFT_HOLD
* KEY_GAMEPAD_DPAD_RIGHT
* KEY_GAMEPAD_DPAD_RIGHT_HOLD
* KEY_GAMEPAD_DPAD_UP
* KEY_GAMEPAD_DPAD_UP_HOLD
* KEY_GAMEPAD_LEFT_SHOULDER
* KEY_GAMEPAD_LEFT_SHOULDER_HOLD
* KEY_GAMEPAD_LEFT_STICK
* KEY_GAMEPAD_LEFT_STICK_HOLD
* KEY_GAMEPAD_LEFT_TRIGGER
* KEY_GAMEPAD_LEFT_TRIGGER_HOLD
* KEY_GAMEPAD_LSTICK_DOWN
* KEY_GAMEPAD_LSTICK_LEFT
* KEY_GAMEPAD_LSTICK_RIGHT
* KEY_GAMEPAD_LSTICK_UP
* KEY_GAMEPAD_RIGHT_SHOULDER
* KEY_GAMEPAD_RIGHT_SHOULDER_HOLD
* KEY_GAMEPAD_RIGHT_STICK
* KEY_GAMEPAD_RIGHT_STICK_HOLD
* KEY_GAMEPAD_RIGHT_TRIGGER
* KEY_GAMEPAD_RIGHT_TRIGGER_HOLD
* KEY_GAMEPAD_RSTICK_DOWN
* KEY_GAMEPAD_RSTICK_LEFT
* KEY_GAMEPAD_RSTICK_RIGHT
* KEY_GAMEPAD_RSTICK_UP
* KEY_GAMEPAD_START
* KEY_GAMEPAD_START_HOLD
* KEY_GAMEPAD_TOUCHPAD_HOLD
* KEY_GAMEPAD_TOUCHPAD_PRESSED
* KEY_GAMEPAD_TOUCHPAD_SWIPE_DOWN
* KEY_GAMEPAD_TOUCHPAD_SWIPE_LEFT
* KEY_GAMEPAD_TOUCHPAD_SWIPE_RIGHT
* KEY_GAMEPAD_TOUCHPAD_SWIPE_UP
* KEY_GAMEPAD_TOUCHPAD_TOUCHED
* KEY_H
* KEY_HOME
* KEY_I
* KEY_INSERT
* KEY_INVALID
* KEY_J
* KEY_K
* KEY_L
* KEY_LEFTARROW
* KEY_LWINDOWS
* KEY_M
* KEY_MOUSEWHEEL_DOWN
* KEY_MOUSEWHEEL_UP
* KEY_MOUSE_4
* KEY_MOUSE_5
* KEY_MOUSE_LEFT
* KEY_MOUSE_LEFTRIGHT
* KEY_MOUSE_MIDDLE
* KEY_MOUSE_RIGHT
* KEY_N
* KEY_NUMLOCK
* KEY_NUMPAD0
* KEY_NUMPAD1
* KEY_NUMPAD2
* KEY_NUMPAD3
* KEY_NUMPAD4
* KEY_NUMPAD5
* KEY_NUMPAD6
* KEY_NUMPAD7
* KEY_NUMPAD8
* KEY_NUMPAD9
* KEY_NUMPAD_ADD
* KEY_NUMPAD_DOT
* KEY_NUMPAD_ENTER
* KEY_NUMPAD_MINUS
* KEY_NUMPAD_SLASH
* KEY_NUMPAD_STAR
* KEY_O
* KEY_OEM_102_GERMAN_LESS_THAN
* KEY_OEM_1_SEMICOLON
* KEY_OEM_2_FORWARD_SLASH
* KEY_OEM_3_TICK
* KEY_OEM_4_LEFT_SQUARE_BRACKET
* KEY_OEM_5_BACK_SLASH
* KEY_OEM_6_RIGHT_SQUARE_BRACKET
* KEY_OEM_7_SINGLE_QUOTE
* KEY_OEM_COMMA
* KEY_OEM_MINUS
* KEY_OEM_PERIOD
* KEY_OEM_PLUS
* KEY_P
* KEY_PAGEDOWN
* KEY_PAGEUP
* KEY_PAUSE
* KEY_PRINTSCREEN
* KEY_Q
* KEY_R
* KEY_RIGHTARROW
* KEY_RWINDOWS
* KEY_S
* KEY_SCROLLLOCK
* KEY_SHIFT
* KEY_SPACEBAR
* KEY_T
* KEY_TAB
* KEY_U
* KEY_UPARROW
* KEY_V
* KEY_W
* KEY_X
* KEY_Y
* KEY_Z


h5. LabelLineAnchor
* LABEL_LINE_ANCHOR_BASELINE
* LABEL_LINE_ANCHOR_BOTTOM
* LABEL_LINE_ANCHOR_TOP


h5. LabelLineOrder
* LABEL_LINE_ORDER_OVER
* LABEL_LINE_ORDER_UNDER


h5. LabelLineStyle
* LABEL_LINE_STYLE_SOLID
* LABEL_LINE_STYLE_WAVY


h5. MapDisplayPinType
* MAP_PIN_TYPE_AGGRO
* MAP_PIN_TYPE_ALDMERI_VS_DAGGERFALL_LARGE
* MAP_PIN_TYPE_ALDMERI_VS_DAGGERFALL_MEDIUM
* MAP_PIN_TYPE_ALDMERI_VS_DAGGERFALL_SMALL
* MAP_PIN_TYPE_ALDMERI_VS_EBONHEART_LARGE
* MAP_PIN_TYPE_ALDMERI_VS_EBONHEART_MEDIUM
* MAP_PIN_TYPE_ALDMERI_VS_EBONHEART_SMALL
* MAP_PIN_TYPE_ARTIFACT_ALDMERI_DEFENSIVE
* MAP_PIN_TYPE_ARTIFACT_ALDMERI_OFFENSIVE
* MAP_PIN_TYPE_ARTIFACT_DAGGERFALL_DEFENSIVE
* MAP_PIN_TYPE_ARTIFACT_DAGGERFALL_OFFENSIVE
* MAP_PIN_TYPE_ARTIFACT_EBONHEART_DEFENSIVE
* MAP_PIN_TYPE_ARTIFACT_EBONHEART_OFFENSIVE
* MAP_PIN_TYPE_ARTIFACT_GATE_CLOSED_ALDMERI_DOMINION
* MAP_PIN_TYPE_ARTIFACT_GATE_CLOSED_DAGGERFALL_COVENANT
* MAP_PIN_TYPE_ARTIFACT_GATE_CLOSED_EBONHEART_PACT
* MAP_PIN_TYPE_ARTIFACT_GATE_OPEN_ALDMERI_DOMINION
* MAP_PIN_TYPE_ARTIFACT_GATE_OPEN_DAGGERFALL_COVENANT
* MAP_PIN_TYPE_ARTIFACT_GATE_OPEN_EBONHEART_PACT
* MAP_PIN_TYPE_ARTIFACT_KEEP_ALDMERI_DOMINION
* MAP_PIN_TYPE_ARTIFACT_KEEP_DAGGERFALL_COVENANT
* MAP_PIN_TYPE_ARTIFACT_KEEP_EBONHEART_PACT
* MAP_PIN_TYPE_ARTIFACT_RETURN_ALDMERI
* MAP_PIN_TYPE_ARTIFACT_RETURN_DAGGERFALL
* MAP_PIN_TYPE_ARTIFACT_RETURN_EBONHEART
* MAP_PIN_TYPE_ASSISTED_QUEST_CONDITION
* MAP_PIN_TYPE_ASSISTED_QUEST_ENDING
* MAP_PIN_TYPE_ASSISTED_QUEST_OPTIONAL_CONDITION
* MAP_PIN_TYPE_ASSISTED_QUEST_REPEATABLE_CONDITION
* MAP_PIN_TYPE_ASSISTED_QUEST_REPEATABLE_ENDING
* MAP_PIN_TYPE_ASSISTED_QUEST_REPEATABLE_OPTIONAL_CONDITION
* MAP_PIN_TYPE_AVA_CAPTURE_AREA_ALDMERI
* MAP_PIN_TYPE_AVA_CAPTURE_AREA_AURA
* MAP_PIN_TYPE_AVA_CAPTURE_AREA_DAGGERFALL
* MAP_PIN_TYPE_AVA_CAPTURE_AREA_EBONHEART
* MAP_PIN_TYPE_AVA_CAPTURE_AREA_NEUTRAL
* MAP_PIN_TYPE_AVA_TOWN_ALDMERI_DOMINION
* MAP_PIN_TYPE_AVA_TOWN_DAGGERFALL_COVENANT
* MAP_PIN_TYPE_AVA_TOWN_EBONHEART_PACT
* MAP_PIN_TYPE_AVA_TOWN_GRAVEYARD_ACCESSIBLE
* MAP_PIN_TYPE_AVA_TOWN_NEUTRAL
* MAP_PIN_TYPE_BGPIN_CAPTURE_AREA_AURA
* MAP_PIN_TYPE_BGPIN_CAPTURE_AREA_FIRE_DRAKES
* MAP_PIN_TYPE_BGPIN_CAPTURE_AREA_NEUTRAL
* MAP_PIN_TYPE_BGPIN_CAPTURE_AREA_PIT_DAEMONS
* MAP_PIN_TYPE_BGPIN_CAPTURE_AREA_STORM_LORDS
* MAP_PIN_TYPE_BGPIN_FLAG_FIRE_DRAKES
* MAP_PIN_TYPE_BGPIN_FLAG_FIRE_DRAKES_AURA
* MAP_PIN_TYPE_BGPIN_FLAG_NEUTRAL
* MAP_PIN_TYPE_BGPIN_FLAG_NEUTRAL_AURA
* MAP_PIN_TYPE_BGPIN_FLAG_PIT_DAEMONS
* MAP_PIN_TYPE_BGPIN_FLAG_PIT_DAEMONS_AURA
* MAP_PIN_TYPE_BGPIN_FLAG_RETURN_FIRE_DRAKES
* MAP_PIN_TYPE_BGPIN_FLAG_RETURN_PIT_DAEMONS
* MAP_PIN_TYPE_BGPIN_FLAG_RETURN_STORM_LORDS
* MAP_PIN_TYPE_BGPIN_FLAG_SPAWN_FIRE_DRAKES
* MAP_PIN_TYPE_BGPIN_FLAG_SPAWN_NEUTRAL
* MAP_PIN_TYPE_BGPIN_FLAG_SPAWN_PIT_DAEMONS
* MAP_PIN_TYPE_BGPIN_FLAG_SPAWN_STORM_LORDS
* MAP_PIN_TYPE_BGPIN_FLAG_STORM_LORDS
* MAP_PIN_TYPE_BGPIN_FLAG_STORM_LORDS_AURA
* MAP_PIN_TYPE_BGPIN_MOBILE_CAPTURE_AREA_AURA
* MAP_PIN_TYPE_BGPIN_MOBILE_CAPTURE_AREA_FIRE_DRAKES
* MAP_PIN_TYPE_BGPIN_MOBILE_CAPTURE_AREA_NEUTRAL
* MAP_PIN_TYPE_BGPIN_MOBILE_CAPTURE_AREA_PIT_DAEMONS
* MAP_PIN_TYPE_BGPIN_MOBILE_CAPTURE_AREA_STORM_LORDS
* MAP_PIN_TYPE_BGPIN_MULTI_CAPTURE_AREA_AURA
* MAP_PIN_TYPE_BGPIN_MULTI_CAPTURE_AREA_A_FIRE_DRAKES
* MAP_PIN_TYPE_BGPIN_MULTI_CAPTURE_AREA_A_NEUTRAL
* MAP_PIN_TYPE_BGPIN_MULTI_CAPTURE_AREA_A_PIT_DAEMONS
* MAP_PIN_TYPE_BGPIN_MULTI_CAPTURE_AREA_A_STORM_LORDS
* MAP_PIN_TYPE_BGPIN_MULTI_CAPTURE_AREA_B_FIRE_DRAKES
* MAP_PIN_TYPE_BGPIN_MULTI_CAPTURE_AREA_B_NEUTRAL
* MAP_PIN_TYPE_BGPIN_MULTI_CAPTURE_AREA_B_PIT_DAEMONS
* MAP_PIN_TYPE_BGPIN_MULTI_CAPTURE_AREA_B_STORM_LORDS
* MAP_PIN_TYPE_BGPIN_MULTI_CAPTURE_AREA_C_FIRE_DRAKES
* MAP_PIN_TYPE_BGPIN_MULTI_CAPTURE_AREA_C_NEUTRAL
* MAP_PIN_TYPE_BGPIN_MULTI_CAPTURE_AREA_C_PIT_DAEMONS
* MAP_PIN_TYPE_BGPIN_MULTI_CAPTURE_AREA_C_STORM_LORDS
* MAP_PIN_TYPE_BGPIN_MULTI_CAPTURE_AREA_D_FIRE_DRAKES
* MAP_PIN_TYPE_BGPIN_MULTI_CAPTURE_AREA_D_NEUTRAL
* MAP_PIN_TYPE_BGPIN_MULTI_CAPTURE_AREA_D_PIT_DAEMONS
* MAP_PIN_TYPE_BGPIN_MULTI_CAPTURE_AREA_D_STORM_LORDS
* MAP_PIN_TYPE_BGPIN_MURDERBALL_FIRE_DRAKES
* MAP_PIN_TYPE_BGPIN_MURDERBALL_NEUTRAL
* MAP_PIN_TYPE_BGPIN_MURDERBALL_PIT_DAEMONS
* MAP_PIN_TYPE_BGPIN_MURDERBALL_SPAWN_NEUTRAL
* MAP_PIN_TYPE_BGPIN_MURDERBALL_STORM_LORDS
* MAP_PIN_TYPE_BORDER_KEEP_ALDMERI_DOMINION
* MAP_PIN_TYPE_BORDER_KEEP_DAGGERFALL_COVENANT
* MAP_PIN_TYPE_BORDER_KEEP_EBONHEART_PACT
* MAP_PIN_TYPE_DARK_BROTHERHOOD_TARGET
* MAP_PIN_TYPE_EBONHEART_VS_DAGGERFALL_LARGE
* MAP_PIN_TYPE_EBONHEART_VS_DAGGERFALL_MEDIUM
* MAP_PIN_TYPE_EBONHEART_VS_DAGGERFALL_SMALL
* MAP_PIN_TYPE_FARM_ALDMERI_DOMINION
* MAP_PIN_TYPE_FARM_DAGGERFALL_COVENANT
* MAP_PIN_TYPE_FARM_EBONHEART_PACT
* MAP_PIN_TYPE_FARM_NEUTRAL
* MAP_PIN_TYPE_FAST_TRAVEL_BORDER_KEEP_ACCESSIBLE
* MAP_PIN_TYPE_FAST_TRAVEL_KEEP_ACCESSIBLE
* MAP_PIN_TYPE_FAST_TRAVEL_OUTPOST_ACCESSIBLE
* MAP_PIN_TYPE_FAST_TRAVEL_WAYSHRINE
* MAP_PIN_TYPE_FAST_TRAVEL_WAYSHRINE_CURRENT_LOC
* MAP_PIN_TYPE_FAST_TRAVEL_WAYSHRINE_UNDISCOVERED
* MAP_PIN_TYPE_FORWARD_CAMP_ACCESSIBLE
* MAP_PIN_TYPE_FORWARD_CAMP_ALDMERI_DOMINION
* MAP_PIN_TYPE_FORWARD_CAMP_DAGGERFALL_COVENANT
* MAP_PIN_TYPE_FORWARD_CAMP_EBONHEART_PACT
* MAP_PIN_TYPE_GROUP
* MAP_PIN_TYPE_GROUP_LEADER
* MAP_PIN_TYPE_HARVEST_NODE
* MAP_PIN_TYPE_IMPERIAL_CITY_CLOSED
* MAP_PIN_TYPE_IMPERIAL_CITY_OPEN
* MAP_PIN_TYPE_IMPERIAL_DISTRICT_ALDMERI_DOMINION
* MAP_PIN_TYPE_IMPERIAL_DISTRICT_DAGGERFALL_COVENANT
* MAP_PIN_TYPE_IMPERIAL_DISTRICT_EBONHEART_PACT
* MAP_PIN_TYPE_IMPERIAL_DISTRICT_GRAVEYARD_ACCESSIBLE
* MAP_PIN_TYPE_IMPERIAL_DISTRICT_NEUTRAL
* MAP_PIN_TYPE_INVALID
* MAP_PIN_TYPE_KEEP_ALDMERI_DOMINION
* MAP_PIN_TYPE_KEEP_ATTACKED_LARGE
* MAP_PIN_TYPE_KEEP_ATTACKED_SMALL
* MAP_PIN_TYPE_KEEP_DAGGERFALL_COVENANT
* MAP_PIN_TYPE_KEEP_EBONHEART_PACT
* MAP_PIN_TYPE_KEEP_GRAVEYARD_ACCESSIBLE
* MAP_PIN_TYPE_KEEP_NEUTRAL
* MAP_PIN_TYPE_LOCATION
* MAP_PIN_TYPE_MILL_ALDMERI_DOMINION
* MAP_PIN_TYPE_MILL_DAGGERFALL_COVENANT
* MAP_PIN_TYPE_MILL_EBONHEART_PACT
* MAP_PIN_TYPE_MILL_NEUTRAL
* MAP_PIN_TYPE_MINE_ALDMERI_DOMINION
* MAP_PIN_TYPE_MINE_DAGGERFALL_COVENANT
* MAP_PIN_TYPE_MINE_EBONHEART_PACT
* MAP_PIN_TYPE_MINE_NEUTRAL
* MAP_PIN_TYPE_NPC_FOLLOWER
* MAP_PIN_TYPE_OUTPOST_ALDMERI_DOMINION
* MAP_PIN_TYPE_OUTPOST_DAGGERFALL_COVENANT
* MAP_PIN_TYPE_OUTPOST_EBONHEART_PACT
* MAP_PIN_TYPE_OUTPOST_NEUTRAL
* MAP_PIN_TYPE_PING
* MAP_PIN_TYPE_PLAYER
* MAP_PIN_TYPE_PLAYER_CAMERA
* MAP_PIN_TYPE_PLAYER_WAYPOINT
* MAP_PIN_TYPE_POI_COMPLETE
* MAP_PIN_TYPE_POI_SEEN
* MAP_PIN_TYPE_QUEST_COMPLETE
* MAP_PIN_TYPE_QUEST_GIVE_ITEM
* MAP_PIN_TYPE_QUEST_INTERACT
* MAP_PIN_TYPE_QUEST_OFFER
* MAP_PIN_TYPE_QUEST_OFFER_REPEATABLE
* MAP_PIN_TYPE_QUEST_TALK_TO
* MAP_PIN_TYPE_RALLY_POINT
* MAP_PIN_TYPE_RESPAWN_BORDER_KEEP_ACCESSIBLE
* MAP_PIN_TYPE_RESTRICTED_LINK_ALDMERI_DOMINION
* MAP_PIN_TYPE_RESTRICTED_LINK_DAGGERFALL_COVENANT
* MAP_PIN_TYPE_RESTRICTED_LINK_EBONHEART_PACT
* MAP_PIN_TYPE_RETURN_ALDMERI_DOMINION
* MAP_PIN_TYPE_RETURN_DAGGERFALL_COVENANT
* MAP_PIN_TYPE_RETURN_EBONHEART_PACT
* MAP_PIN_TYPE_RETURN_NEUTRAL
* MAP_PIN_TYPE_TIMELY_ESCAPE_NPC
* MAP_PIN_TYPE_TRACKED_QUEST_CONDITION
* MAP_PIN_TYPE_TRACKED_QUEST_ENDING
* MAP_PIN_TYPE_TRACKED_QUEST_OPTIONAL_CONDITION
* MAP_PIN_TYPE_TRACKED_QUEST_REPEATABLE_CONDITION
* MAP_PIN_TYPE_TRACKED_QUEST_REPEATABLE_ENDING
* MAP_PIN_TYPE_TRACKED_QUEST_REPEATABLE_OPTIONAL_CONDITION
* MAP_PIN_TYPE_TRAINER
* MAP_PIN_TYPE_TRI_BATTLE_LARGE
* MAP_PIN_TYPE_TRI_BATTLE_MEDIUM
* MAP_PIN_TYPE_TRI_BATTLE_SMALL
* MAP_PIN_TYPE_VENDOR


h5. MapDisplayType
* MAP_TYPE_COUNT
* MAP_TYPE_LOCATION_CENTERED
* MAP_TYPE_PLAYER_CENTERED


h5. MapPinAnimationTarget
* PIN_ANIMATION_TARGET_MAP_AND_GUTTER
* PIN_ANIMATION_TARGET_MAP_ONLY


h5. ModifyTextType
* MODIFY_TEXT_TYPE_NONE
* MODIFY_TEXT_TYPE_UPPERCASE


h5. MouseButtonIndex
* MOUSE_BUTTON_INDEX_4
* MOUSE_BUTTON_INDEX_5
* MOUSE_BUTTON_INDEX_INVALID
* MOUSE_BUTTON_INDEX_LEFT
* MOUSE_BUTTON_INDEX_LEFT_AND_RIGHT
* MOUSE_BUTTON_INDEX_MIDDLE
* MOUSE_BUTTON_INDEX_RIGHT


h5. MouseCursorType
* MOUSE_CURSOR_DEFAULT_CURSOR
* MOUSE_CURSOR_DO_NOT_CARE
* MOUSE_CURSOR_ERASE
* MOUSE_CURSOR_FILL
* MOUSE_CURSOR_FILL_MULTIPLE
* MOUSE_CURSOR_ICON
* MOUSE_CURSOR_MAX
* MOUSE_CURSOR_NEXT_LEFT
* MOUSE_CURSOR_NEXT_RIGHT
* MOUSE_CURSOR_PAINT
* MOUSE_CURSOR_PAN
* MOUSE_CURSOR_PREVIEW
* MOUSE_CURSOR_RESIZE_EW
* MOUSE_CURSOR_RESIZE_NESW
* MOUSE_CURSOR_RESIZE_NS
* MOUSE_CURSOR_RESIZE_NWSE
* MOUSE_CURSOR_ROTATE
* MOUSE_CURSOR_SAMPLE
* MOUSE_CURSOR_UI_HAND


h5. ReleaseReferenceOptions
* KEEP_TEXTURE_AT_ZERO_REFERENCES
* RELEASE_TEXTURE_AT_ZERO_REFERENCES


h5. SCTEventTextType
* SCT_EVENT_TEXT_TYPE_EXTRA
* SCT_EVENT_TEXT_TYPE_MAIN


h5. SCTUnitAnchorType
* SCT_UNIT_ANCHOR_HEAD
* SCT_UNIT_ANCHOR_LEFT_MIDDLE
* SCT_UNIT_ANCHOR_LEFT_TOP
* SCT_UNIT_ANCHOR_RIGHT_MIDDLE
* SCT_UNIT_ANCHOR_RIGHT_TOP


h5. SCTUnitType
* SCT_UNIT_TYPE_ALL
* SCT_UNIT_TYPE_ALL_PLAYERS
* SCT_UNIT_TYPE_LOCAL_PLAYER
* SCT_UNIT_TYPE_LOCAL_PLAYER_FOLLOWER
* SCT_UNIT_TYPE_MONSTERS
* SCT_UNIT_TYPE_NONE
* SCT_UNIT_TYPE_OTHER_PLAYERS


h5. ScrollBounding
* SCROLL_BOUNDING_BOUND
* SCROLL_BOUNDING_CONTAINED
* SCROLL_BOUNDING_DEFAULT
* SCROLL_BOUNDING_UNBOUND


h5. SetMapResultCode
* SET_MAP_RESULT_CURRENT_MAP_UNCHANGED
* SET_MAP_RESULT_FAILED
* SET_MAP_RESULT_MAP_CHANGED


h5. ShapeType
* SHAPE_BOX
* SHAPE_CIRCLE


h5. TextAlignment
* TEXT_ALIGN_BOTTOM
* TEXT_ALIGN_CENTER
* TEXT_ALIGN_LEFT
* TEXT_ALIGN_RIGHT
* TEXT_ALIGN_TOP


h5. TextType
* TEXT_TYPE_ALL
* TEXT_TYPE_ALPHABETIC
* TEXT_TYPE_ALPHABETIC_NO_FULLWIDTH_LATIN
* TEXT_TYPE_NUMERIC
* TEXT_TYPE_NUMERIC_UNSIGNED_INT
* TEXT_TYPE_PASSWORD


h5. TextWrapMode
* TEXT_WRAP_MODE_ELLIPSIS
* TEXT_WRAP_MODE_TRUNCATE


h5. TextureAddressMode
* TEX_MODE_CLAMP
* TEX_MODE_WRAP


h5. TextureBlendMode
* TEX_BLEND_MODE_ADD
* TEX_BLEND_MODE_ALPHA
* TEX_BLEND_MODE_COLOR_DODGE


h5. TooltipHeaderSide
* TOOLTIP_HEADER_SIDE_LEFT
* TOOLTIP_HEADER_SIDE_RIGHT


h5. TranslateAnimationDeltaType
* TRANSLATE_ANIMATION_DELTA_TYPE_FROM_END
* TRANSLATE_ANIMATION_DELTA_TYPE_FROM_START


h5. VERTEX_POINTS
* VERTEX_POINTS_BOTTOMLEFT
* VERTEX_POINTS_BOTTOMRIGHT
* VERTEX_POINTS_TOPLEFT
* VERTEX_POINTS_TOPRIGHT


h5. VirtualKeyboardType
* VIRTUAL_KEYBOARD_TYPE_DEFAULT
* VIRTUAL_KEYBOARD_TYPE_EMAIL


h5. Globals
* LOOP_INDEFINITELY
* IME_UNDERLINE_THICKNESS_PIXELS
* MAX_ANCHORS


h5. ConsoleEnhancedRenderQuality
* CONSOLE_ENHANCED_RENDER_QUALITY_ENHANCED_1080
* CONSOLE_ENHANCED_RENDER_QUALITY_FOUR_K


h5. FullscreenMode
* FULLSCREEN_MODE_FULLSCREEN_EXCLUSIVE
* FULLSCREEN_MODE_FULLSCREEN_WINDOWED
* FULLSCREEN_MODE_WINDOWED


h5. GraphicsPresets
* GRAPHICS_PRESETS_CUSTOM
* GRAPHICS_PRESETS_HIGH
* GRAPHICS_PRESETS_LOW
* GRAPHICS_PRESETS_MEDIUM
* GRAPHICS_PRESETS_MINIMUM
* GRAPHICS_PRESETS_PS4
* GRAPHICS_PRESETS_PS4PLUS1080P
* GRAPHICS_PRESETS_PS4PLUS4K
* GRAPHICS_PRESETS_ULTRA
* GRAPHICS_PRESETS_XB1


h5. ParticleDensity
* PARTICLE_DENSITY_HIGH
* PARTICLE_DENSITY_LOW
* PARTICLE_DENSITY_MEDIUM
* PARTICLE_DENSITY_ULTRA


h5. SubSamplingMode
* SUB_SAMPLING_MODE_LOW
* SUB_SAMPLING_MODE_MEDIUM
* SUB_SAMPLING_MODE_NORMAL


h5. Globals

h2. Game API
* GetCVar(*string* _CVarName_)
** _Returns:_ *string* _value_

* SetCVar(*string* _CVarName_, *string* _value_)

* GetSetting(*integer* _system_, *integer* _settingId_)
** _Returns:_ *string* _value_

* GetSetting_Bool(*integer* _system_, *integer* _settingId_)
** _Returns:_ *bool* _value_

* ResetSettingToDefault(*integer* _system_, *integer* _settingId_)

* ResetToDefaultSettings(*integer* _system_)

* GetString(*string* _stringVariablePrefix_, *integer* _contextId_)
** _Returns:_ *string* _stringValue_

* IsShiftKeyDown()
** _Returns:_ *bool* _isShiftDown_

* IsControlKeyDown()
** _Returns:_ *bool* _isCtrlDown_

* IsAltKeyDown()
** _Returns:_ *bool* _isAltDown_

* IsCommandKeyDown()
** _Returns:_ *bool* _isCommandDown_

* IsCapsLockOn()
** _Returns:_ *bool* _isCapsLockOn_

* GetKeyName(*[KeyCode|#KeyCode]* _keyCode_)
** _Returns:_ *string* _keyName_

* GetKeyboardLayout()
** _Returns:_ *string* _keyboardLayout_

* PlaySound(*string* _soundName_)

* SetGuiHidden(*string* _guiName_, *bool* _hidden_)

* GetGuiHidden(*string* _guiName_)
** _Returns:_ *bool* _hidden_

* ToggleFullScreen()

* IsMouseWithinClientArea()
** _Returns:_ *bool* _insideClient_

* IsUserAdjustingClientWindow()
** _Returns:_ *bool* _isAdjusting_

* GetInterfaceColor(*integer* _interfaceColorType_, *integer* _fieldValue_)
** _Returns:_ *number* _red_, *number* _green_, *number* _blue_, *number* _alpha_

* GetErrorString(*integer* _errorStringId_)
** _Returns:_ *string* _stringValue_

* GetAllianceName(*[Alliance|#Alliance]* _alliance_)
** _Returns:_ *string* _name_

* GetBattlegroundAllianceName(*[BattlegroundAlliance|#BattlegroundAlliance]* _battlegroundAlliance_)
** _Returns:_ *string* _name_

* GetNumClasses()
** _Returns:_ *integer* _classCount_

* GetClassInfo(*luaindex* _index_)
** _Returns:_ *integer* _defId_, *string* _lore_, *textureName* _normalIconKeyboard_, *textureName* _pressedIconKeyboard_, *textureName* _mouseoverIconKeyboard_, *bool* _isSelectable_, *textureName* _ingameIconKeyboard_, *textureName* _ingameIconGamepad_, *textureName* _normalIconGamepad_, *textureName* _pressedIconGamepad_

* GetClassName(*[Gender|#Gender]* _gender_, *integer* _classId_)
** _Returns:_ *string* _className_

* GetRaceName(*[Gender|#Gender]* _gender_, *integer* _raceId_)
** _Returns:_ *string* _raceName_

* GetLocationName(*integer* _worldId_)
** _Returns:_ *string* _worldName_

* GetGenderFromNameDescriptor(*string* _nameDescriptor_)
** _Returns:_ *[Gender|#Gender]* _gender_

* PlainStringFind(*string* _string_, *string* _searchFor_)
** _Returns:_ *bool* _found_, *integer* _startIndex_, *integer* _endIndex_

* SplitString(*string* _delims_, *string* _stringToSplit_)
** _Uses variable returns..._
** _Returns:_ *string* _strings_

* LocaleAwareToUpper(*string* _stringToUppercase_)
** _Returns:_ *string* _upperCasedString_

* LocaleAwareToLower(*string* _stringToLowercase_)
** _Returns:_ *string* _lowerCasedString_

* GetDisplayModes()
** _Uses variable returns..._
** _Returns:_ *integer* _width_, *integer* _height_

* IsMinSpecMachine()
** _Returns:_ *bool* _minspec_

* IsPrivateFunction(*string* _functionName_)
** _Returns:_ *bool* _isPrivate_

* IsProtectedFunction(*string* _functionName_)
** _Returns:_ *bool* _isProtected_

* GetAPIVersion()
** _Returns:_ *integer* _version_

* Id64ToString(*id64* _id_)
** _Returns:_ *string* _stringDesc_

* HideMouse(*bool* _onlyConsiderWhileMoving_)

* ShowMouse(*bool* _onlyConsiderWhileMoving_)

* IsInternalBuild()
** _Returns:_ *bool* _isInternalBuild_

* SaveLoadDialogResult(*[SaveLoadDialogError|#SaveLoadDialogError]* _errorType_, *[SaveLoadDialogAnswer|#SaveLoadDialogAnswer]* _result_)

* GetSecondsSinceMidnight()
** _Returns:_ *integer* _secondsSinceMidnight_

* GetFrameTimeSeconds()
** _Returns:_ *number* _frameTimeInSeconds_

* GetFrameDeltaTimeSeconds()
** _Returns:_ *number* _frameDeltaTimeInSeconds_

* GetFrameTimeMilliseconds()
** _Returns:_ *integer* _frameTimeInMilliseconds_

* GetFrameDeltaTimeMilliseconds()
** _Returns:_ *integer* _frameDeltaTimeInMilliseconds_

* GetDateStringFromTimestamp(*integer* _timestamp_)
** _Returns:_ *string* _dateString_

* GetGameTimeMilliseconds()
** _Returns:_ *integer* _gameTimeInMilliseconds_

* GetFramerate()
** _Returns:_ *number* _currentFramerate_

* GetTimeString()
** _Returns:_ *string* _currentTimeString_

* GetDate()
** _Returns:_ *integer* _currentTime_

* GetTimeStamp()
** _Returns:_ *id64* _timestamp_

* GetDiffBetweenTimeStamps(*id64* _laterTime_, *id64* _earlierTime_)
** _Returns:_ *number* _difference_

* GetFormattedTime()
** _Returns:_ *integer* _formattedTime_

* FormatTimeSeconds(*number* _timeValueInSeconds_, *[TimeFormatStyleCode|#TimeFormatStyleCode]* _formatType_, *[TimeFormatPrecisionCode|#TimeFormatPrecisionCode]* _precisionType_, *[TimeFormatDirectionCode|#TimeFormatDirectionCode]* _direction_)
** _Returns:_ *string* _formattedTimeString_, *number* _nextUpdateTimeInSec_

* FormatTimeMilliseconds(*integer* _timeValueInMilliseconds_, *[TimeFormatStyleCode|#TimeFormatStyleCode]* _formatType_, *[TimeFormatPrecisionCode|#TimeFormatPrecisionCode]* _precisionType_, *[TimeFormatDirectionCode|#TimeFormatDirectionCode]* _direction_)
** _Returns:_ *string* _formattedTimeString_, *integer* _nextUpdateTimeInMilliseconds_

* SetGameCameraUIMode(*bool* _active_)

* IsGameCameraUIModeActive()
** _Returns:_ *bool* _active_

* LockCameraRotation(*bool* _locked_)

* SetCameraOptionsPreviewModeEnabled(*bool* _enabled_, *[CameraOptionsPreview|#CameraOptionsPreview]* _option_)

* GetGuildId(*luaindex* _index_)
** _Returns:_ *integer* _guildId_

* GetNumGuildHistoryCategories()
** _Returns:_ *integer* _numCategories_

* GetNumGuildMembersRequiredForPrivilege(*[GuildPrivilege|#GuildPrivilege]* _privilege_)
** _Returns:_ *integer* _numGuildMembers_

* GetAvARankName(*[Gender|#Gender]* _gender_, *integer* _rank_)
** _Returns:_ *string* _rankName_

* GetAvARankIcon(*integer* _rank_)
** _Returns:_ *textureName* _rankIcon_

* CalculateCubicBezierEase(*number* _progress_, *number* _x1_, *number* _y1_, *number* _x2_, *number* _y2_)
** _Returns:_ *number* _result_

* GetGamepadIconPathForKeyCode(*[KeyCode|#KeyCode]* _key_)
** _Returns:_ *string:nilable* _gamepadIcon_, *integer:nilable* _width_, *integer:nilable* _height_

* GetMouseIconPathForKeyCode(*[KeyCode|#KeyCode]* _key_)
** _Returns:_ *string:nilable* _mouseIcon_, *integer:nilable* _width_, *integer:nilable* _height_

* FormatIntegerWithDigitGrouping(*integer* _number_, *string* _delimiter_, *integer* _digitGroupSize_)
** _Returns:_ *string* _formattedNumber_

* DoesCurrentLanguageRequireIME()
** _Returns:_ *bool* _requiresIME_

* IsVirtualKeyboardOnscreen()
** _Returns:_ *bool* _vkeyboardShowing_

* HashString(*string* _text_)
** _Returns:_ *integer* _hashValue_

* Set3DRenderSpaceToCurrentCamera(*string* _controlName_)

* ComputeDepthAtWhichWorldWidthRendersAsUIWidth(*number* _worldWidth_, *number* _UIWidth_)
** _Returns:_ *number* _depth_

* ComputeDepthAtWhichWorldHeightRendersAsUIHeight(*number* _worldHeight_, *number* _UIHeight_)
** _Returns:_ *number* _depth_

* GetWorldDimensionsOfViewFrustumAtDepth(*number* _depth_)
** _Returns:_ *number* _frustumWidth_, *number* _frustumHeight_

* GetESOVersionString()
** _Returns:_ *string* _versionString_

* Is64BitClient()
** _Returns:_ *bool* _is64Bit_

* DoesSystemSupportConsoleEnhancedRenderQuality(*[ConsoleEnhancedRenderQuality|#ConsoleEnhancedRenderQuality]* _consoleEnhancedRenderQuality_)
** _Returns:_ *bool* _hasSupport_

* DoesSystemSupportHDR()
** _Returns:_ *bool* _supportsHDR_

* IsSystemUsingHDR()
** _Returns:_ *bool* _usesHDR_

* TakeScreenshot()

* SetSetting(*[SettingSystemType|#SettingSystemType]* _system_, *integer* _settingId_, *string* _value_, *[SetOptions|#SetOptions]* _setOptions_)

* ApplySettings()

* RefreshSettings()

* GetEULADetails(*[EULAType|#EULAType]* _eulaType_)
** _Returns:_ *string* _message_, *string* _agreeText_, *string* _disagreeText_, *bool* _hasAgreed_, *string* _dialogText_

* HasAgreedToEULA(*[EULAType|#EULAType]* _eulaType_)
** _Returns:_ *bool* _hasAgreed_

* AgreeToEULA(*[EULAType|#EULAType]* _eulaType_)

* HasViewedEULA(*[EULAType|#EULAType]* _eulaType_)
** _Returns:_ *bool* _hasViewed_

* MarkEULAAsViewed(*[EULAType|#EULAType]* _eulaType_)

* ShouldShowEULA(*[EULAType|#EULAType]* _eulaType_)
** _Returns:_ *bool* _shouldShow_

* OpenURLByType *private* (*[ApprovedURLType|#ApprovedURLType]* _urlType_)

* GetURLTextByType *private* (*[ApprovedURLType|#ApprovedURLType]* _urlType_)
** _Returns:_ *string* _urlText_

* ShouldOpenURLTypeInOverlay *private* (*[ApprovedURLType|#ApprovedURLType]* _urlType_)
** _Returns:_ *bool* _urlOpensInOverlay_

* GetPlatformServiceType()
** _Returns:_ *[PlatformServiceType|#PlatformServiceType]* _platformServiceType_

* GetFrameDeltaNormalizedForTargetFramerate(*number* _targetFramesPerSecond_)
** _Returns:_ *number* _frameDeltaNormalizedForTargetFramerate_

* GetDisplayName()
** _Returns:_ *string* _displayName_

* DecorateDisplayName(*string* _displayName_)
** _Returns:_ *string* _decoratedDisplayName_

* IsDecoratedDisplayName(*string* _displayName_)
** _Returns:_ *bool* _isDecorated_

* UndecorateDisplayName(*string* _displayName_)
** _Returns:_ *string* _undecoratedDisplayName_

* GetNumFriends()
** _Returns:_ *integer* _numFriends_

* GetFriendInfo(*luaindex* _friendIndex_)
** _Returns:_ *string* _displayName_, *string* _note_, *integer* _playerStatus_, *integer* _secsSinceLogoff_

* GetFriendCharacterInfo(*luaindex* _friendIndex_)
** _Returns:_ *bool* _hasCharacter_, *string* _characterName_, *string* _zoneName_, *integer* _classType_, *integer* _alliance_, *integer* _level_, *integer* _championRank_, *integer* _zoneId_

* GetNumIgnored()
** _Returns:_ *integer* _numIgnored_

* GetIgnoredInfo(*luaindex* _index_)
** _Returns:_ *string* _displayName_, *string* _note_

* IsIgnored(*string* _characterName_)
** _Returns:_ *bool* _isIgnored_

* RequestFriend(*string* _charOrDisplayName_, *string* _message_)

* RemoveFriend(*string* _displayName_)

* SetFriendNote(*luaindex* _friendIndex_, *string* _note_)

* AddIgnore(*string* _charOrDisplayName_)

* RemoveIgnore(*string* _displayName_)

* SetIgnoreNote(*luaindex* _ignoreIndex_, *string* _note_)

* IsFriend(*string* _charOrDisplayName_)
** _Returns:_ *bool* _isFriend_

* GetNumIncomingFriendRequests()
** _Returns:_ *integer* _numRequests_

* GetIncomingFriendRequestInfo(*luaindex* _index_)
** _Returns:_ *string* _displayName_, *integer* _secsSinceRequest_, *string* _message_

* GetNumOutgoingFriendRequests()
** _Returns:_ *integer* _numRequests_

* GetOutgoingFriendRequestInfo(*luaindex* _index_)
** _Returns:_ *string* _displayName_, *integer* _secsSinceRequest_, *string* _note_

* AcceptFriendRequest(*string* _displayName_)

* RejectFriendRequest(*string* _displayName_)

* CancelFriendRequest(*luaindex* _index_)

* GetNumGuilds()
** _Returns:_ *integer* _numGuilds_

* GetGuildName(*integer* _guildId_)
** _Returns:_ *string* _name_

* GetGuildDescription(*integer* _guildId_)
** _Returns:_ *string* _description_

* GetGuildMotD(*integer* _guildId_)
** _Returns:_ *string* _motd_

* GetGuildFoundedDate(*integer* _guildId_)
** _Returns:_ *string* _foundedDate_

* GetGuildAlliance(*integer* _guildId_)
** _Returns:_ *integer* _alliance_

* GetNumGuildMembers(*integer* _guildId_)
** _Returns:_ *integer* _numGuildMembers_

* GetGuildInfo(*integer* _guildId_)
** _Returns:_ *integer* _numMembers_, *integer* _numOnline_, *string* _leaderName_

* GetGuildMemberInfo(*integer* _guildId_, *luaindex* _memberIndex_)
** _Returns:_ *string* _name_, *string* _note_, *luaindex* _rankIndex_, *integer* _playerStatus_, *integer* _secsSinceLogoff_

* GetGuildMemberCharacterInfo(*integer* _guildId_, *luaindex* _memberIndex_)
** _Returns:_ *bool* _hasCharacter_, *string* _characterName_, *string* _zoneName_, *integer* _classType_, *integer* _alliance_, *integer* _level_, *integer* _championRank_, *integer* _zoneId_

* GetGuildMemberIndexFromDisplayName(*integer* _guildId_, *string* _displayName_)
** _Returns:_ *luaindex:nilable* _memberIndex_

* GetPlayerGuildMemberIndex(*integer* _guildId_)
** _Returns:_ *luaindex* _memberIndex_

* GuildInvite(*integer* _guildId_, *string* _displayName_)

* IsValidGuildName(*string* _guildName_)
** _Uses variable returns..._
** _Returns:_ *integer* _violationCode_

* GuildCreate(*string* _guildName_, *[Alliance|#Alliance]* _guildAlliance_)

* GuildRemove(*integer* _guildId_, *string* _displayName_)

* GuildLeave(*integer* _guildId_)

* GuildPromote(*integer* _guildId_, *string* _displayName_)

* GuildDemote(*integer* _guildId_, *string* _displayName_)

* ShouldDisplayGuildMemberRemoveAlert(*string* _characterName_)
** _Returns:_ *bool* _shouldDisplay_

* ShouldDisplaySelfKickedFromGuildAlert(*integer* _guildId_)
** _Returns:_ *bool* _shouldDisplay_

* SetGuildDescription(*integer* _guildId_, *string* _description_)

* SetGuildMotD(*integer* _guildId_, *string* _motd_)

* DoesGuildRankHavePermission(*integer* _guildId_, *luaindex* _rankIndex_, *integer* _permission_)
** _Returns:_ *bool* _hasPermission_

* DoesPlayerHaveGuildPermission(*integer* _guildId_, *integer* _permission_)
** _Returns:_ *bool* _hasPermission_

* CanEditGuildRankPermission(*integer* _rankId_, *[GuildPermission|#GuildPermission]* _permission_)
** _Returns:_ *bool* _hasPermission_

* DoesGuildHavePrivilege(*integer* _guildId_, *[GuildPrivilege|#GuildPrivilege]* _privilege_)
** _Returns:_ *bool* _hasPrivilege_

* GetNumGuildRanks(*integer* _guildId_)
** _Returns:_ *integer* _numRanks_

* GetGuildRankIconIndex(*integer* _guildId_, *luaindex* _rankIndex_)
** _Returns:_ *luaindex* _iconIndex_

* GetNumGuildRankIcons()
** _Returns:_ *integer* _numGuildRankIcons_

* GetGuildRankSmallIcon(*luaindex* _iconIndex_)
** _Returns:_ *textureName* _icon_

* GetGuildRankLargeIcon(*luaindex* _iconIndex_)
** _Returns:_ *textureName* _icon_

* GetGuildRankListHighlightIcon(*luaindex* _iconIndex_)
** _Returns:_ *textureName* _icon_

* GetGuildRankListUpIcon(*luaindex* _iconIndex_)
** _Returns:_ *textureName* _icon_

* GetGuildRankListDownIcon(*luaindex* _iconIndex_)
** _Returns:_ *textureName* _icon_

* GetGuildRankId(*integer* _guildId_, *luaindex* _rankIndex_)
** _Returns:_ *integer* _rankId_

* IsGuildRankGuildMaster(*integer* _guildId_, *luaindex* _rankIndex_)
** _Returns:_ *bool* _isGuildMaster_

* InitializePendingGuildRanks(*integer* _guildId_)

* AddPendingGuildRank(*integer* _rankId_, *string* _name_, *integer* _permissions_, *luaindex* _iconIndex_)

* SavePendingGuildRanks()
** _Returns:_ *bool* _success_

* ComposeGuildRankPermissions(*integer* _permissions_, *integer* _permission_, *bool* _enabled_)
** _Returns:_ *integer* _newPermissions_

* RequestOfflineGuildMembers(*integer* _guildId_)

* DoesGuildHistoryCategoryHaveMoreEvents(*integer* _guildId_, *[GuildHistoryCategory|#GuildHistoryCategory]* _category_)
** _Returns:_ *bool* _hasMoreEvents_

* RequestGuildHistoryCategoryNewest(*integer* _guildId_, *[GuildHistoryCategory|#GuildHistoryCategory]* _category_)
** _Returns:_ *bool* _requested_

* RequestGuildHistoryCategoryOlder(*integer* _guildId_, *[GuildHistoryCategory|#GuildHistoryCategory]* _category_)
** _Returns:_ *bool* _requested_

* GetNumGuildEvents(*integer* _guildId_, *[GuildHistoryCategory|#GuildHistoryCategory]* _category_)
** _Returns:_ *integer* _numEvents_

* GetGuildEventInfo(*integer* _guildId_, *[GuildHistoryCategory|#GuildHistoryCategory]* _category_, *luaindex* _eventIndex_)
** _Returns:_ *integer* _eventType_, *integer* _secsSinceEvent_, *variant* _param1_, *variant* _param2_, *variant* _param3_, *variant* _param4_, *variant* _param5_, *variant* _param6_

* GetGuildEventId(*integer* _guildId_, *[GuildHistoryCategory|#GuildHistoryCategory]* _category_, *luaindex* _eventIndex_)
** _Returns:_ *id64* _guildEventId_

* SetGuildMemberNote(*integer* _guildId_, *luaindex* _memberIndex_, *string* _note_)

* GetGuildRankCustomName(*integer* _guildId_, *luaindex* _rankIndex_)
** _Returns:_ *string* _rankName_

* GetNumGuildInvites()
** _Returns:_ *integer* _numGuildInvites_

* GetGuildInviteInfo(*luaindex* _index_)
** _Returns:_ *integer* _guildId_, *string* _guildName_, *[Alliance|#Alliance]* _guildAlliance_, *string* _inviterDisplayName_, *string* _note_

* AcceptGuildInvite(*integer* _guildId_)

* RejectGuildInvite(*integer* _guildId_)

* JumpToGuildMember(*string* _name_)

* GetGuildClaimedKeep(*integer* _guildLuaId_)
** _Returns:_ *integer* _claimedKeepId_, *integer* _claimedKeepCampaignId_

* DoesGuildHaveClaimedKeep(*integer* _guildLuaId_)
** _Returns:_ *bool* _hasClaimedKeep_

* CheckGuildKeepClaim(*integer* _guildLuaId_, *integer* _keepId_)
** _Returns:_ *integer* _result_

* CheckGuildKeepRelease(*integer* _guildLuaId_)
** _Returns:_ *integer* _result_

* ReleaseKeepForGuild(*integer* _guildLuaId_)

* ClaimInteractionKeepForGuild(*integer* _guildLuaId_)

* ReleaseInteractionKeepForGuild()

* GetGuildOwnedKioskInfo(*integer* _guildId_)
** _Returns:_ *string:nilable* _ownedKioskName_

* GetGuildKioskCycleTimes()
** _Returns:_ *integer* _despawnTimestampS_, *integer* _bidEndTimestampS_, *integer* _respawnTimestampS_

* GetNumGuildSpecificItems()
** _Returns:_ *integer* _numItems_

* GetGuildSpecificItemInfo(*luaindex* _index_)
** _Returns:_ *textureName* _icon_, *string* _itemName_, *integer* _quality_, *integer* _stackCount_, *integer* _requiredLevel_, *integer* _requiredChampionRank_, *integer* _purchasePrice_, *[CurrencyType|#CurrencyType]* _currencyType_

* BuyGuildSpecificItem(*luaindex* _slotIndex_)

* GetGuildSpecificItemLink(*luaindex* _index_, *[LinkStyle|#LinkStyle]* _linkStyle_)
** _Returns:_ *string* _link_

* GetNumGuildPermissionDependencies(*[GuildPermission|#GuildPermission]* _permission_)
** _Returns:_ *integer* _numDependencies_

* GetGuildPermissionDependency(*[GuildPermission|#GuildPermission]* _permission_, *luaindex* _index_)
** _Returns:_ *[GuildPermission|#GuildPermission]* _dependentPermission_

* GetNumGuildPermissionRequisites(*[GuildPermission|#GuildPermission]* _permission_)
** _Returns:_ *integer* _numDependencies_

* GetGuildPermissionRequisite(*[GuildPermission|#GuildPermission]* _permission_, *luaindex* _index_)
** _Returns:_ *[GuildPermission|#GuildPermission]* _requisitePermission_

* SetGamepadVibration(*integer* _durationMs_, *number* _firstMotor_, *number* _secondMotor_, *number* _thirdMotor_, *number* _fourthMotor_, *string* _debugSourceInfo_)

* GetGamepadLeftStickX(*bool* _includeDeadzone_)
** _Returns:_ *number* _x_

* GetGamepadLeftStickY(*bool* _includeDeadzone_)
** _Returns:_ *number* _y_

* GetGamepadLeftStickDeltaX(*bool* _includeDeadzone_)
** _Returns:_ *number* _deltaX_

* GetGamepadLeftStickDeltaY(*bool* _includeDeadzone_)
** _Returns:_ *number* _deltaY_

* GetGamepadRightStickX(*bool* _includeDeadzone_)
** _Returns:_ *number* _x_

* GetGamepadRightStickY(*bool* _includeDeadzone_)
** _Returns:_ *number* _y_

* GetGamepadRightStickDeltaX(*bool* _includeDeadzone_)
** _Returns:_ *number* _deltaX_

* GetGamepadRightStickDeltaY(*bool* _includeDeadzone_)
** _Returns:_ *number* _deltaY_

* GetGamepadLeftTriggerMagnitude()
** _Returns:_ *number* _magnitude_

* GetGamepadRightTriggerMagnitude()
** _Returns:_ *number* _magnitude_

* SetGamepadLeftStickConsumedByUI(*bool* _consumed_)

* SetGamepadRightStickConsumedByUI(*bool* _consumed_)

* GetGamepadTouchpadX()
** _Returns:_ *number* _gamepadTouchpadX_

* GetGamepadTouchpadY()
** _Returns:_ *number* _gamepadTouchpadY_

* IsGamepadTouchpadActive()
** _Returns:_ *bool* _gamepadTouchpadActive_

* GetGamepadType()
** _Returns:_ *[GamepadType|#GamepadType]* _gamepadType_

* IsConsoleUI()
** _Returns:_ *bool* _isConsoleUI_

* IsInGamepadPreferredMode()
** _Returns:_ *bool* _inGamepadPreferredMode_

* IsKeyCodeGamepadKey(*[KeyCode|#KeyCode]* _key_)
** _Returns:_ *bool* _isGamepadKey_

* IsKeyCodeMouseKey(*[KeyCode|#KeyCode]* _key_)
** _Returns:_ *bool* _isMouseKey_

* IsKeyCodeKeyboardKey(*[KeyCode|#KeyCode]* _key_)
** _Returns:_ *bool* _isKeyboardKey_

* IsKeyCodeChordKey(*[KeyCode|#KeyCode]* _key_)
** _Returns:_ *bool* _isKeyChord_

* IsKeyCodeHoldKey(*[KeyCode|#KeyCode]* _key_)
** _Returns:_ *bool* _isKeyHold_

* IsKeyDown *private* (*[KeyCode|#KeyCode]* _key_)
** _Returns:_ *bool* _isKeyDown_

* ConvertKeyPressToHold(*[KeyCode|#KeyCode]* _key_)
** _Returns:_ *[KeyCode|#KeyCode]* _holdKey_

* ConvertHoldKeyPressToNonHold(*[KeyCode|#KeyCode]* _holdKey_)
** _Returns:_ *[KeyCode|#KeyCode]* _key_

* GetKeyChordsFromSingleKey(*[KeyCode|#KeyCode]* _key_)
** _Uses variable returns..._
** _Returns:_ *[KeyCode|#KeyCode]* _keyChord_

* GetUIPlatform()
** _Returns:_ *[UIPlatform|#UIPlatform]* _platform_

* SetOverscanOffsets(*integer* _offsetX_, *integer* _offsetY_, *integer* _offsetWidth_, *integer* _offsetHeight_)

* GetOverscanOffsets()
** _Returns:_ *integer* _offsetX_, *integer* _offsetY_, *integer* _offsetWidth_, *integer* _offsetHeight_

* IsGUIResizing()
** _Returns:_ *bool* _isGUIResizing_

* UpdatePlayerPresenceInformation *private* ()

* UpdatePlayerPresenceName *private* ()

* ChangeRemoteSceneVisibility(*string* _sceneName_, *[RemoteSceneStateChangeType|#RemoteSceneStateChangeType]* _sceneChangeType_, *[RemoteSceneStateChangeOrigin|#RemoteSceneStateChangeOrigin]* _sceneChangeOrigin_)

* ShowRemoteBaseScene()

* ChangeRemoteTopLevel(*[RemoteSceneStateChangeType|#RemoteSceneStateChangeType]* _sceneChangeType_, *[RemoteSceneStateChangeOrigin|#RemoteSceneStateChangeOrigin]* _sceneChangeOrigin_)

* IsValidName(*string* _name_)
** _Returns:_ *bool* _isValid_

* GetDigitGroupingSize()
** _Returns:_ *integer* _digitGroupingSize_

* AbbreviateNumber(*integer* _number_, *[NumberAbbreviationPrecision|#NumberAbbreviationPrecision]* _precision_, *bool* _useUppercaseSuffix_)
** _Returns:_ *number* _abbreviatedValue_, *string* _suffix_

* IsESOPlusSubscriber()
** _Returns:_ *bool* _isESOPlusSubscriber_

* GetHighestUnlockedChapter()
** _Returns:_ *[Chapter|#Chapter]* _highestUnlockedChapter_

* GetChapterId(*[Chapter|#Chapter]* _chapter_)
** _Returns:_ *integer* _chapterId_

* GetCurrentChapterCollectibleId()
** _Returns:_ *integer* _collectibleId_

* HasCurrentChapter()
** _Returns:_ *bool* _hasChapter_

* GetTrialInfo()
** _Returns:_ *integer* _accountTypeId_, *string* _title_, *string* _description_, *integer* _version_

* GetPlayerCrowns *private* ()
** _Returns:_ *integer* _currentCrowns_

* GetPlayerCrownGems *private* ()
** _Returns:_ *integer* _currentCrownGems_

* GetPlayerMarketCurrency(*[MarketCurrencyType|#MarketCurrencyType]* _type_)
** _Returns:_ *integer* _currencyAmount_

* IsChromaSystemAvailable()
** _Returns:_ *bool* _systemAvailable_

* ChromaClearKeyboardEffect()

* ChromaClearKeypadEffect()

* ChromaClearMouseEffect()

* ChromaClearMousepadEffect()

* ChromaClearHeadsetEffect()

* ChromaCreateKeyboardStaticEffect(*number* _red_, *number* _green_, *number* _blue_)

* ChromaCreateKeypadStaticEffect(*number* _red_, *number* _green_, *number* _blue_)

* ChromaCreateMouseStaticEffect(*number* _red_, *number* _green_, *number* _blue_)

* ChromaCreateMousepadStaticEffect(*number* _red_, *number* _green_, *number* _blue_)

* ChromaCreateHeadsetStaticEffect(*number* _red_, *number* _green_, *number* _blue_)

* ChromaCreateKeyboardBreathingEffect(*[ChromaKeyboardBreathingEffectType|#ChromaKeyboardBreathingEffectType]* _breathingType_, *number* _red1_, *number* _green1_, *number* _blue1_, *number* _red2_, *number* _green2_, *number* _blue2_)

* ChromaCreateKeypadBreathingEffect(*[ChromaKeypadBreathingEffectType|#ChromaKeypadBreathingEffectType]* _breathingType_, *number* _red1_, *number* _green1_, *number* _blue1_, *number* _red2_, *number* _green2_, *number* _blue2_)

* ChromaCreateMouseBreathingEffect(*[ChromaMouseBreathingEffectType|#ChromaMouseBreathingEffectType]* _breathingType_, *number* _red1_, *number* _green1_, *number* _blue1_, *number* _red2_, *number* _green2_, *number* _blue2_)

* ChromaCreateMousepadBreathingEffect(*[ChromaMousepadBreathingEffectType|#ChromaMousepadBreathingEffectType]* _breathingType_, *number* _red1_, *number* _green1_, *number* _blue1_, *number* _red2_, *number* _green2_, *number* _blue2_)

* ChromaCreateHeadsetBreathingEffect(*number* _red_, *number* _green_, *number* _blue_)

* ChromaCreateKeyboardWaveEffect(*[ChromaKeyboardWaveEffectDirection|#ChromaKeyboardWaveEffectDirection]* _waveDirection_)

* ChromaCreateKeypadWaveEffect(*[ChromaKeypadWaveEffectDirection|#ChromaKeypadWaveEffectDirection]* _waveDirection_)

* ChromaCreateMouseWaveEffect(*[ChromaMouseWaveEffectDirection|#ChromaMouseWaveEffectDirection]* _waveDirection_)

* ChromaCreateMousepadWaveEffect(*[ChromaMousepadWaveEffectDirection|#ChromaMousepadWaveEffectDirection]* _waveDirection_)

* ChromaCreateKeyboardReactiveEffect(*[ChromaKeyboardReactiveEffectDuration|#ChromaKeyboardReactiveEffectDuration]* _reactionDuration_, *number* _red_, *number* _green_, *number* _blue_)

* ChromaCreateKeypadReactiveEffect(*[ChromaKeypadReactiveEffectDuration|#ChromaKeypadReactiveEffectDuration]* _reactionDuration_, *number* _red_, *number* _green_, *number* _blue_)

* ChromaCreateMouseReactiveEffect(*[ChromaMouseReactiveEffectDuration|#ChromaMouseReactiveEffectDuration]* _reactionDuration_, *number* _red_, *number* _green_, *number* _blue_)

* ChromaCreateKeyboardSpectrumCyclingEffect()

* ChromaCreateKeypadSpectrumCyclingEffect()

* ChromaCreateMouseSpectrumCyclingEffect()

* ChromaCreateMousepadSpectrumCyclingEffect()

* ChromaResetCustomEffectObject(*[ChromaDeviceType|#ChromaDeviceType]* _deviceType_)

* ChromaApplyCustomEffectFullColor(*[ChromaDeviceType|#ChromaDeviceType]* _deviceType_, *number* _red_, *number* _green_, *number* _blue_, *number* _alpha_, *[ChromaBlendMode|#ChromaBlendMode]* _blendMode_)

* ChromaApplyCustomEffectRowColor(*[ChromaDeviceType|#ChromaDeviceType]* _deviceType_, *luaindex* _rowIndex_, *number* _red_, *number* _green_, *number* _blue_, *number* _alpha_, *[ChromaBlendMode|#ChromaBlendMode]* _blendMode_)

* ChromaApplyCustomEffectColumnColor(*[ChromaDeviceType|#ChromaDeviceType]* _deviceType_, *luaindex* _columnIndex_, *number* _red_, *number* _green_, *number* _blue_, *number* _alpha_, *[ChromaBlendMode|#ChromaBlendMode]* _blendMode_)

* ChromaApplyCustomEffectCellColor(*[ChromaDeviceType|#ChromaDeviceType]* _deviceType_, *luaindex* _rowIndex_, *luaindex* _columnIndex_, *number* _red_, *number* _green_, *number* _blue_, *number* _alpha_, *[ChromaBlendMode|#ChromaBlendMode]* _blendMode_)

* ChromaApplyCustomEffectId(*integer* _effectId_)

* ChromaGetCustomEffectCellColor(*[ChromaDeviceType|#ChromaDeviceType]* _deviceType_, *luaindex* _rowIndex_, *luaindex* _columnIndex_)
** _Returns:_ *number* _red_, *number* _green_, *number* _blue_

* ChromaGetCustomEffectDimensions(*[ChromaDeviceType|#ChromaDeviceType]* _deviceType_)
** _Returns:_ *integer* _numRows_, *integer* _numColumn_

* ChromaFinalizeCustomEffect(*[ChromaDeviceType|#ChromaDeviceType]* _deviceType_)

* GetChromaKeyboardKeyByZoGuiKey(*[KeyCode|#KeyCode]* _zoGuiKeyCode_)
** _Returns:_ *[ChromaKeyboardKey|#ChromaKeyboardKey]* _chromaKeyboardKey_

* GetChromaKeyboardCellByChromaKeyboardKey(*[ChromaKeyboardKey|#ChromaKeyboardKey]* _chromaKeyboardKey_)
** _Returns:_ *luaindex* _rowIndex_, *luaindex* _columnIndex_

* GetChromaMouseCellByLED(*[ChromaMouseLED2|#ChromaMouseLED2]* _ledId_)
** _Returns:_ *luaindex* _rowIndex_, *luaindex* _columnIndex_

* GetChromaMousepadCellByLED(*[ChromaMousepadLED|#ChromaMousepadLED]* _ledId_)
** _Returns:_ *luaindex* _rowIndex_, *luaindex* _columnIndex_

* ChromaGenerateCustomEffect(*[ChromaDeviceType|#ChromaDeviceType]* _deviceType_, *[ChromaCustomEffectType|#ChromaCustomEffectType]* _customEffectType_, *[ChromaCustomEffectGridStyle|#ChromaCustomEffectGridStyle]* _gridStyle_)
** _Returns:_ *integer* _effectId_

* ChromaDeleteCustomEffectById(*integer* _effectId_)

* ChromaDeleteAllCustomEffectIds()

* ChromaSetCustomEffectCellActive(*integer* _effectId_, *luaindex* _rowIndex_, *luaindex* _columnIndex_, *bool* _isActive_)

* ChromaSetCustomEffectSingleColorRGBA(*integer* _effectId_, *number* _red_, *number* _green_, *number* _blue_, *number* _alpha_)

* ChromaSetCustomEffectSingleColorBlendMode(*integer* _effectId_, *[ChromaBlendMode|#ChromaBlendMode]* _blendMode_)

* ChromaSetCustomSingleColorFadingEffectValue(*integer* _effectId_, *number* _fadeValue_)

* ChromaSetCustomSingleColorFadingEffectUsesAlphaChannel(*integer* _effectId_, *bool* _useAlphaChannel_)

* CreateBackgroundListFilter(*[BackgroundListFilterTarget|#BackgroundListFilterTarget]* _target_, *string* _searchText_)
** _Returns:_ *integer* _taskId_

* AddBackgroundListFilterType(*integer* _taskId_, *[BackgroundListFilterType|#BackgroundListFilterType]* _filterType_)

* AddBackgroundListFilterEntry(*integer* _taskId_, *integer* _value1_, *integer* _value2_)

* AddBackgroundListFilterEntry64(*integer* _taskId_, *id64* _value_)

* StartBackgroundListFilter(*integer* _taskId_)

* DestroyBackgroundListFilter(*integer* _taskId_)

* GetNumBackgroundListFilterResults(*integer* _taskId_)
** _Returns:_ *integer* _numResults_

* GetBackgroundListFilterResult(*integer* _taskId_, *luaindex* _resultIndex_)
** _Returns:_ *integer* _value1_, *integer* _value2_

* GetBackgroundListFilterResult64(*integer* _taskId_, *luaindex* _resultIndex_)
** _Returns:_ *id64* _value_

* PlayVideo(*string* _filename_, *bool* _playImmediately_, *[VideoSkipMode|#VideoSkipMode]* _skipMode_, *integer* _subtitleId_, *bool* _playInBackground_, *bool* _loopPlayback_, *bool* _mutePlayback_)

* AbortVideoPlayback()

* CancelCurrentVideoPlayback()

* SetVideoCancelAllOnCancelAny(*bool* _cancelAll_)

* ResetVideoCancelConfirmation()

* SetCurrentVideoPlaybackVolume(*number* _volume_, *number* _lerpTime_)


* ComputeStringDistance(*string* _source_, *string* _target_, *integer* _maxDistance_)
** _Returns:_ *integer* _distance_

* ExecuteChatCommand(*string* _text_)

* ToggleShowIngameGui()

* ReloadUI(*string* _guiName_)

* GetPlayerStatus()
** _Returns:_ *integer* _status_

* SelectPlayerStatus(*integer* _status_)

* GetNumPlayerStatuses()
** _Returns:_ *integer* _numStatuses_

* GetCriticalStrikeChance(*number* _statValue_)
** _Returns:_ *number* _chance_

* SetFullscreenEffect(*[FullscreenEffectType|#FullscreenEffectType]* _effectType_, *number* _param1_, *number* _param2_, *bool* _immediateUpdate_)

* DoesGameHaveFocus()
** _Returns:_ *bool* _hasFocus_

* IsPlayerActivated()
** _Returns:_ *bool* _activated_

* GetSecondsPlayed()
** _Returns:_ *integer* _secondsPlayed_

* GetLatency()
** _Returns:_ *integer* _latencyMS_

* PlaceInTradeWindow *protected* (*luaindex:nilable* _tradeIndex_)

* PlaceInUnitFrame *protected* (*string* _target_)

* ConvertMouseButtonToKeyCode(*integer* _mouseButton_)
** _Returns:_ *[KeyCode|#KeyCode]* _key_

* ResetAllBindsToDefault()

* ResetKeyboardBindsToDefault()

* ResetGamepadBindsToDefault()

* DoesUnitExist(*string* _unitTag_)
** _Returns:_ *bool* _exists_

* GetUnitName(*string* _unitTag_)
** _Returns:_ *string* _name_

* GetRawUnitName(*string* _unitTag_)
** _Returns:_ *string* _rawName_

* GetUnitDisplayName(*string* _unitTag_)
** _Returns:_ *string* _displayName_

* GetUnitGender(*string* _unitTag_)
** _Returns:_ *[Gender|#Gender]* _gender_

* GetUnitNameHighlightedByReticle()
** _Returns:_ *string* _name_

* GetUnitClass(*string* _unitTag_)
** _Returns:_ *string* _className_

* GetUnitClassId(*string* _unitTag_)
** _Returns:_ *integer* _classId_

* GetUnitChampionPoints(*string* _unitTag_)
** _Returns:_ *integer* _championPoints_

* GetUnitEffectiveChampionPoints(*string* _unitTag_)
** _Returns:_ *integer* _championPoints_

* CanUnitGainChampionPoints(*string* _unitTag_)
** _Returns:_ *bool* _canGainChampionPoints_

* GetUnitEffectiveLevel(*string* _unitTag_)
** _Returns:_ *integer* _level_

* GetUnitZone(*string* _unitTag_)
** _Returns:_ *string* _zoneName_

* GetUnitZoneIndex(*string* _unitTag_)
** _Returns:_ *luaindex:nilable* _zoneIndex_

* GetUnitXP(*string* _unitTag_)
** _Returns:_ *integer* _exp_

* GetUnitXPMax(*string* _unitTag_)
** _Returns:_ *integer* _maxExp_

* IsUnitChampion(*string* _unitTag_)
** _Returns:_ *bool* _isChampion_

* IsUnitUsingVeteranDifficulty(*string* _unitTag_)
** _Returns:_ *bool* _isVeteranDifficulty_

* GetPlayerChampionXP()
** _Returns:_ *integer* _championExp_

* GetPlayerChampionPointsEarned()
** _Returns:_ *integer* _points_

* IsUnitBattleLeveled(*string* _unitTag_)
** _Returns:_ *bool* _isBattleLeveled_

* IsUnitChampionBattleLeveled(*string* _unitTag_)
** _Returns:_ *bool* _isChampBattleLeveled_

* GetUnitBattleLevel(*string* _unitTag_)
** _Returns:_ *integer* _battleLevel_

* GetUnitChampionBattleLevel(*string* _unitTag_)
** _Returns:_ *integer* _champBattleLevel_

* GetUnitDrownTime(*string* _unitTag_)
** _Returns:_ *number* _startTime_, *number* _endTime_

* GetUnitEquipmentBonusRatingRelativeToLevel(*string* _unitTag_, *number* _rawEquipmentBonusRating_)
** _Returns:_ *number* _relativeEquipmentBonusRating_

* IsUnitInGroupSupportRange(*string* _unitTag_)
** _Returns:_ *bool* _result_

* GetUnitType(*string* _unitTag_)
** _Returns:_ *integer* _type_

* CanUnitTrade(*string* _unitTag_)
** _Returns:_ *bool* _canTrade_

* AreUnitsEqual(*string* _unitTag_, *string* _secondUnitTag_)
** _Returns:_ *bool* _areEqual_

* IsUnitGrouped(*string* _unitTag_)
** _Returns:_ *bool* _isGrouped_

* IsUnitGroupLeader(*string* _unitTag_)
** _Returns:_ *bool* _isGroupLeader_

* IsUnitSoloOrGroupLeader(*string* _unitTag_)
** _Returns:_ *bool* _isSoloOrGroupLeader_

* GetGroupLeaderUnitTag()
** _Returns:_ *string* _leaderUnitTag_

* IsUnitFriend(*string* _unitTag_)
** _Returns:_ *bool* _isOnFriendList_

* IsUnitIgnored(*string* _unitTag_)
** _Returns:_ *bool* _isIgnored_

* IsUnitPlayer(*string* _unitTag_)
** _Returns:_ *bool* _isPlayer_

* IsUnitPvPFlagged(*string* _unitTag_)
** _Returns:_ *bool* _isPvPFlagged_

* IsUnitAttackable(*string* _unitTag_)
** _Returns:_ *bool* _attackable_

* IsUnitJusticeGuard(*string* _unitTag_)
** _Returns:_ *bool* _isJusticeGuard_

* IsUnitInvulnerableGuard(*string* _unitTag_)
** _Returns:_ *bool* _isInvulnerableGuard_

* IsUnitLivestock(*string* _unitTag_)
** _Returns:_ *bool* _isLivestock_

* GetUnitAlliance(*string* _unitTag_)
** _Returns:_ *integer* _alliance_

* AreUnitsCurrentlyAllied(*string* _unitTag1_, *string* _unitTag2_)
** _Returns:_ *bool* _allied_

* GetUnitBattlegroundAlliance(*string* _unitTag_)
** _Returns:_ *[BattlegroundAlliance|#BattlegroundAlliance]* _battlegroundAlliance_

* GetUnitRace(*string* _unitTag_)
** _Returns:_ *string* _race_

* GetUnitRaceId(*string* _unitTag_)
** _Returns:_ *integer* _raceId_

* IsUnitFriendlyFollower(*string* _unitTag_)
** _Returns:_ *bool* _isFollowing_

* GetUnitReaction(*string* _unitTag_)
** _Returns:_ *[UnitReactionType|#UnitReactionType]* _unitReaction_

* GetUnitAvARankPoints(*string* _unitTag_)
** _Returns:_ *integer* _AvARankPoints_

* GetUnitAvARank(*string* _unitTag_)
** _Returns:_ *integer* _rank_, *integer* _subRank_

* GetLargeAvARankIcon(*integer* _rank_)
** _Returns:_ *textureName* _largeRankIcon_

* GetAvARankProgress(*integer* _currentRankPoints_)
** _Returns:_ *integer* _subRankStartsAt_, *integer* _nextSubRankAt_, *integer* _rankStartsAt_, *integer* _nextRankAt_

* GetNumPointsNeededForAvARank(*integer* _rank_)
** _Returns:_ *integer* _numPointsRequired_

* GetUnitReactionColor(*string* _unitTag_)
** _Returns:_ *number* _red_, *number* _green_, *number* _blue_

* IsUnitInCombat(*string* _unitTag_)
** _Returns:_ *bool* _isInCombat_

* IsUnitDead(*string* _unitTag_)
** _Returns:_ *bool* _isDead_

* IsUnitReincarnating(*string* _unitTag_)
** _Returns:_ *bool* _isReincarnating_

* IsUnitDeadOrReincarnating(*string* _unitTag_)
** _Returns:_ *bool* _isDead_

* IsUnitSwimming(*string* _unitTag_)
** _Returns:_ *bool* _isSwimming_

* IsUnitResurrectableByPlayer(*string* _unitTag_)
** _Returns:_ *bool* _isResurrectable_

* IsUnitBeingResurrected(*string* _unitTag_)
** _Returns:_ *bool* _isBeingResurrected_

* DoesUnitHaveResurrectPending(*string* _unitTag_)
** _Returns:_ *bool* _hasResurrectPending_

* GetUnitStealthState(*string* _unitTag_)
** _Returns:_ *integer* _stealthState_

* GetUnitDisguiseState(*string* _unitTag_)
** _Returns:_ *integer* _disguiseState_

* GetUnitHidingEndTime(*string* _unitTag_)
** _Returns:_ *number* _endTime_

* IsUnitOnline(*string* _unitTag_)
** _Returns:_ *bool* _isOnline_

* IsUnitInspectableSiege(*string* _unitTag_)
** _Returns:_ *bool* _isInspectableSiege_

* IsUnitInDungeon(*string* _unitTag_)
** _Returns:_ *bool* _isInDungeon_

* GetUnitCaption(*string* _unitTag_)
** _Returns:_ *string* _caption_

* GetUnitSilhouetteTexture(*string* _unitTag_)
** _Returns:_ *string* _icon_

* GetUnitPowerInfo(*string* _unitTag_, *luaindex* _poolIndex_)
** _Returns:_ *integer:nilable* _type_, *integer* _current_, *integer* _max_, *integer* _effectiveMax_

* GetUnitPower(*string* _unitTag_, *[CombatMechanicType|#CombatMechanicType]* _powerType_)
** _Returns:_ *integer* _current_, *integer* _max_, *integer* _effectiveMax_

* GetCurrentCharacterId()
** _Returns:_ *string* _id_

* GetPlayerStat(*[DerivedStats|#DerivedStats]* _derivedStat_, *[StatBonusOption|#StatBonusOption]* _statBonusOption_)
** _Returns:_ *integer* _value_

* GetAllUnitAttributeVisualizerEffectInfo(*string* _unitTag_)
** _Uses variable returns..._
** _Returns:_ *[UnitAttributeVisual|#UnitAttributeVisual]* _unitAttributeVisual_, *[DerivedStats|#DerivedStats]* _statType_, *[Attributes|#Attributes]* _attributeType_, *[CombatMechanicType|#CombatMechanicType]* _powerType_, *number* _value_, *number* _maxValue_

* GetUnitAttributeVisualizerEffectInfo(*string* _unitTag_, *[UnitAttributeVisual|#UnitAttributeVisual]* _unitAttributeVisual_, *[DerivedStats|#DerivedStats]* _statType_, *[Attributes|#Attributes]* _attributeType_, *[CombatMechanicType|#CombatMechanicType]* _powerType_)
** _Returns:_ *number:nilable* _value_, *number:nilable* _maxValue_

* GetUnitDifficulty(*string* _unitTag_)
** _Returns:_ *[UIMonsterDifficulty|#UIMonsterDifficulty]* _difficult_

* GetUnitTitle(*string* _unitTag_)
** _Returns:_ *string* _title_

* CancelCast()
** _Returns:_ *bool* _cancelled_

* IsTargetSameAsLastValidTarget()
** _Returns:_ *bool* _same_

* TogglePlayerWield()

* IsPlayerMoving()
** _Returns:_ *bool* _moving_

* IsPlayerGroundTargeting()
** _Returns:_ *bool* _isGroundTargeting_

* IsPlayerEmoteOverridden(*integer* _emoteId_)
** _Returns:_ *bool* _isOverridden_

* GetGroundTargetingError()
** _Returns:_ *integer:nilable* _error_

* GetPlayerCameraHeading()
** _Returns:_ *number* _heading_

* GetPlayerWorldPositionInHouse()
** _Returns:_ *integer* _worldX_, *integer* _worldY_, *integer* _worldZ_, *number* _rotationRadians_

* GetUnitBuffInfo(*string* _unitTag_, *luaindex* _buffIndex_)
** _Returns:_ *string* _buffName_, *number* _timeStarted_, *number* _timeEnding_, *integer* _buffSlot_, *integer* _stackCount_, *textureName* _iconFilename_, *string* _buffType_, *[BuffEffectType|#BuffEffectType]* _effectType_, *[AbilityType|#AbilityType]* _abilityType_, *[StatusEffectType|#StatusEffectType]* _statusEffectType_, *integer* _abilityId_, *bool* _canClickOff_, *bool* _castByPlayer_

* GetNumBuffs(*string* _unitTag_)
** _Returns:_ *integer* _numBuffs_

* GroupInvite(*string* _unitTag_)

* GroupKick(*string* _unitTag_)

* GroupPromote(*string* _unitTag_)

* GetGroupMemberRoles(*string* _unitTag_)
** _Returns:_ *bool* _isDps_, *bool* _isHealer_, *bool* _isTank_

* CancelBuff(*integer* _buffIndex_)

* GetWeaponSwapUnlockedLevel()
** _Returns:_ *integer* _level_

* GetSlotType(*luaindex* _slotIndex_)
** _Returns:_ *integer* _type_

* GetSlotAbilityCost(*luaindex* _slotIndex_)
** _Returns:_ *integer* _abilityCost_, *integer* _mechanicType_

* GetSlotTexture(*luaindex* _slotIndex_)
** _Returns:_ *string* _texture_, *string* _weapontexture_, *string* _activationAnimation_

* GetSlotName(*luaindex* _slotIndex_)
** _Returns:_ *string* _name_

* GetSlotItemQuality(*luaindex* _slotIndex_)
** _Returns:_ *integer:nilable* _quality_

* GetSlotCooldownInfo(*luaindex* _slotIndex_)
** _Returns:_ *integer* _remain_, *integer* _duration_, *bool* _global_, *[ActionBarSlotType|#ActionBarSlotType]* _globalSlotType_

* IsSlotToggled(*luaindex* _slotIndex_)
** _Returns:_ *bool* _toggledOn_

* IsSlotUsed(*luaindex* _slotIndex_)
** _Returns:_ *bool* _used_

* IsSlotUsable(*luaindex* _slotIndex_)
** _Returns:_ *bool* _useable_

* HasCostFailure(*luaindex* _slotIndex_)
** _Returns:_ *bool* _status_

* HasRequirementFailure(*luaindex* _slotIndex_)
** _Returns:_ *bool* _status_

* HasWeaponSlotFailure(*luaindex* _slotIndex_)
** _Returns:_ *bool* _status_

* HasTargetFailure(*luaindex* _slotIndex_)
** _Returns:_ *bool* _status_

* HasRangeFailure(*luaindex* _slotIndex_)
** _Returns:_ *bool* _status_

* HasStatusEffectFailure(*luaindex* _slotIndex_)
** _Returns:_ *bool* _status_

* HasFallingFailure(*luaindex* _slotIndex_)
** _Returns:_ *bool* _status_

* HasSwimmingFailure(*luaindex* _slotIndex_)
** _Returns:_ *bool* _status_

* HasMountedFailure(*luaindex* _slotIndex_)
** _Returns:_ *bool* _status_

* HasReincarnatingFailure(*luaindex* _slotIndex_)
** _Returns:_ *bool* _status_

* HasActivationHighlight(*luaindex* _slotIndex_)
** _Returns:_ *bool* _status_

* OnSlotDownAndUp *private* (*luaindex* _slotIndex_)

* OnSlotDown *private* (*luaindex* _slotIndex_)

* OnSlotUp *private* (*luaindex* _slotIndex_)

* OnSpecialMoveKeyPressed *private* (*[SpecialMove|#SpecialMove]* _slotIndex_)

* OnSpecialMoveKeyDown *private* (*integer* _moveIndex_)

* OnSpecialMoveKeyUp *private* (*integer* _moveIndex_)

* GetSlotItemCount(*luaindex* _slotIndex_)
** _Returns:_ *integer:nilable* _count_

* GetSlotItemSound(*luaindex* _slotIndex_)
** _Returns:_ *integer* _itemSoundCategory_

* IsSlotItemConsumable(*luaindex* _slotIndex_)
** _Returns:_ *bool* _consumable_

* DoesInventoryContainEmptySoulGem()
** _Returns:_ *bool* _hasEmptyGem_

* IsSlotSoulTrap(*luaindex* _slotIndex_)
** _Returns:_ *bool* _isSoulTrap_

* SelectSlotSkillAbility(*[SkillType|#SkillType]* _skillType_, *luaindex* _skillLineIndex_, *luaindex* _abilityIndex_, *luaindex* _slotIndex_)

* SlotSkillAbilityInSlot(*[SkillType|#SkillType]* _skillType_, *luaindex* _skillLineIndex_, *luaindex* _abilityIndex_, *luaindex* _slotIndex_)

* GetFirstFreeValidSlotForSkillAbility(*[SkillType|#SkillType]* _skillType_, *luaindex* _skillLineIndex_, *luaindex* _abilityIndex_)
** _Returns:_ *luaindex:nilable* _freeSlot_

* GetAssignedSlotFromSkillAbility(*[SkillType|#SkillType]* _skillType_, *luaindex* _skillLineIndex_, *luaindex* _abilityIndex_)
** _Returns:_ *luaindex:nilable* _slotIndex_

* GetNumAbilities()
** _Returns:_ *integer* _num_

* GetAbilityInfoByIndex(*luaindex* _abilityIndex_)
** _Returns:_ *string* _name_, *string* _texture_, *integer* _rank_, *integer* _actionSlotType_, *bool* _passive_, *bool* _showInSpellbook_

* IsValidAbilityForSlot(*luaindex* _abilityIndex_, *luaindex* _slotIndex_)
** _Returns:_ *bool* _valid_

* IsValidItemForSlot(*integer* _bagId_, *integer* _bagSlotId_, *luaindex* _actionSlotIndex_)
** _Returns:_ *bool* _valid_

* IsValidItemForSlotByItemInfo(*integer* _itemId_, *integer* _itemQualityDefId_, *integer* _itemRequiredLevel_, *integer* _itemInstanceData_, *luaindex* _actionSlotIndex_)
** _Returns:_ *bool* _valid_

* IsValidCollectibleForSlot(*integer* _collectibleId_, *luaindex* _actionSlotIndex_)
** _Returns:_ *bool* _valid_

* CompleteQuest()

* AbandonQuest(*luaindex* _journalQuestIndex_)

* GetIsQuestSharable(*luaindex* _journalQuestIndex_)
** _Returns:_ *bool* _isSharable_

* ShareQuest(*luaindex* _journalQuestIndex_)

* GetJournalQuestStepInfo(*luaindex* _journalQuestIndex_, *luaindex* _stepIndex_)
** _Returns:_ *string* _stepText_, *integer:nilable* _visibility_, *integer* _stepType_, *string* _trackerOverrideText_, *integer* _numConditions_

* GetJournalQuestLocationInfo(*luaindex* _journalQuestIndex_)
** _Returns:_ *string* _zoneName_, *string* _objectiveName_, *luaindex* _zoneIndex_, *luaindex* _poiIndex_

* GetJournalQuestEnding(*luaindex* _journalQuestIndex_)
** _Returns:_ *string* _goal_, *string* _dialog_, *string* _confirmComplete_, *string* _declineComplete_, *string* _backgroundText_, *string* _journalStepText_

* GetJournalQuestNumConditions(*luaindex* _journalQuestIndex_, *luaindex* _stepIndex_)
** _Returns:_ *integer* _conditionCount_

* RequestJournalQuestConditionAssistance(*luaindex* _journalQuestIndex_, *luaindex* _stepIndex_, *luaindex* _conditionIndex_, *bool* _assisted_)
** _Returns:_ *integer:nilable* _taskId_

* GetNearestQuestCondition(*integer* _considerType_)
** _Returns:_ *bool* _foundValidCondition_, *luaindex* _journalQuestIndex_, *luaindex* _stepIndex_, *luaindex* _conditionIndex_

* GetJournalQuestTimerInfo(*luaindex* _journalQuestIndex_)
** _Returns:_ *number* _timerStart_, *number* _timerEnd_, *bool* _isVisible_, *bool* _isPaused_

* GetJournalQuestTimerCaption(*luaindex* _journalQuestIndex_)
** _Returns:_ *string* _caption_

* GetJournalQuestNumSteps(*luaindex* _journalQuestIndex_)
** _Returns:_ *integer* _numSteps_

* GetQuestToolCount(*luaindex* _journalQuestIndex_)
** _Returns:_ *integer* _toolCount_

* SendChatMessage *private* (*string* _message_, *integer* _channelId_, *string* _target_)

* MoveForwardStart *private* ()

* MoveForwardStop *private* ()

* MoveBackwardStart *private* ()

* MoveBackwardStop *private* ()

* StopAllMovement()

* ToggleWalk *private* ()

* TurnLeftStart *private* ()

* TurnLeftStop *private* ()

* TurnRightStart *private* ()

* TurnRightStop *private* ()

* StrafeLeftStart *private* ()

* StrafeLeftStop *private* ()

* StrafeRightStart *private* ()

* StrafeRightStop *private* ()

* JumpAscendStart *private* ()

* AscendStop *private* ()

* DescendStart *private* ()

* DescendStop *private* ()

* LeftMouseDownInWorld *private* ()

* LeftMouseUpInWorld *private* ()

* LeftAndRightMouseDownInWorld *private* ()

* LeftAndRightMouseUpInWorld *private* ()

* RightMouseDownInWorld *private* ()

* RightMouseUpInWorld *private* ()

* CameraZoomIn()

* CameraZoomOut()

* ToggleAutoRun *private* ()

* RollDodgeStart *private* ()

* RollDodgeStop *private* ()

* PrepareAttack *private* ()

* PerformAttack *private* ()

* StartBlock *private* ()

* StopBlock *private* ()

* ToggleGameCameraPadlockTarget *private* ()

* PerformInterrupt *private* ()

* StartCommandPet *private* ()

* StopCommandPet *private* ()

* GameCameraGamepadZoomDown *private* ()

* GameCameraGamepadZoomUp *private* ()

* EndInteraction(*integer* _interactionType_)

* GetChatterGreeting()
** _Returns:_ *string* _optionString_

* GetChatterData()
** _Returns:_ *string* _text_, *integer* _numOptions_, *bool* _atGreeting_

* GetMaxBags()
** _Returns:_ *integer* _maxBags_

* GetItemInstanceId(*integer* _bagId_, *integer* _slotIndex_)
** _Returns:_ *integer:nilable* _id_

* GetItemTotalCount(*integer* _bagId_, *integer* _slotIndex_)
** _Returns:_ *integer* _count_

* IsItemConsumable(*integer* _bagId_, *integer* _slotIndex_)
** _Returns:_ *bool* _consumable_

* GetItemLink(*integer* _bagId_, *integer* _slotIndex_, *[LinkStyle|#LinkStyle]* _linkStyle_)
** _Returns:_ *string* _link_

* GetQuestToolLink(*luaindex* _aQuestIndex_, *luaindex* _aToolIndex_, *[LinkStyle|#LinkStyle]* _linkStyle_)
** _Returns:_ *string* _link_

* GetQuestItemLink(*luaindex* _aQuestIndex_, *luaindex* _aStepIndex_, *luaindex* _aConditionIndex_, *[LinkStyle|#LinkStyle]* _linkStyle_)
** _Returns:_ *string* _link_

* GetQuestItemNameFromLink(*string* _link_)
** _Returns:_ *string* _name_

* GetComparisonEquipSlotsFromItemLink(*string* _itemLink_)
** _Returns:_ *integer:nilable* _comparisonSlot1_, *integer:nilable* _comparisonSlot2_

* GetComparisonEquipSlotsFromBagItem(*integer* _bagId_, *integer* _slotIndex_)
** _Returns:_ *integer:nilable* _comparisonSlot1_, *integer:nilable* _comparisonSlot2_

* GetItemName(*integer* _bagId_, *integer* _slotIndex_)
** _Returns:_ *string* _name_

* IsItemUsable(*integer* _bagId_, *integer* _slotIndex_)
** _Returns:_ *bool* _usable_, *bool* _usableOnlyFromActionSlot_

* GetSlotStackSize(*integer* _bagId_, *integer* _slotIndex_)
** _Returns:_ *integer* _stack_, *integer* _maxStack_

* GetEquippedItemInfo(*[EquipSlot|#EquipSlot]* _equipSlot_)
** _Returns:_ *string* _icon_, *bool* _slotHasItem_, *integer* _sellPrice_, *bool* _isHeldSlot_, *bool* _isHeldNow_, *bool* _locked_

* GetHeldSlots()
** _Returns:_ *integer* _heldMain_, *integer* _heldOff_, *integer* _lastHeldMain_, *integer* _lastHeldOff_

* CheckInventorySpaceAndWarn(*integer* _numItems_)
** _Returns:_ *bool* _haveSpace_

* CheckInventorySpaceSilently(*integer* _numItems_)
** _Returns:_ *bool* _haveSpace_

* EquipItem(*[Bag|#Bag]* _bagId_, *integer* _slotIndex_, *integer:nilable* _equipSlotIndex_)

* IsEquipable(*integer* _bagId_, *integer* _slotIndex_)
** _Returns:_ *bool* _isEquipable_, *integer* _resultErrorCodeIfFailed_

* GetItemLinkInfo(*string* _itemLink_)
** _Returns:_ *string* _icon_, *integer* _sellPrice_, *bool* _meetsUsageRequirement_, *integer* _equipType_, *integer* _itemStyleId_

* IsBankUpgradeAvailable()
** _Returns:_ *bool* _isAvailable_

* GetFirstFreeValidSlotForItem(*integer* _bagId_, *integer* _slotIndex_)
** _Returns:_ *luaindex:nilable* _freeSlot_

* GetFirstFreeValidSlotForCollectible(*integer* _collectibleId_)
** _Returns:_ *luaindex:nilable* _freeSlot_

* GetItemCurrentActionBarSlot(*integer* _bagId_, *integer* _slotIndex_)
** _Returns:_ *luaindex:nilable* _currentSlot_

* GetCollectibleCurrentActionBarSlot(*integer* _collectibleId_)
** _Returns:_ *luaindex:nilable* _currentSlot_

* GetItemSoundCategoryFromLink(*string* _link_)
** _Returns:_ *integer* _itemSoundCategory_

* IsLockedWeaponSlot(*[EquipSlot|#EquipSlot]* _equipSlot_)
** _Returns:_ *bool* _locked_

* GetSelectedGuildBankId()
** _Returns:_ *integer:nilable* _guildId_

* GetMapPlayerPosition(*string* _unitTag_)
** _Returns:_ *number* _normalizedX_, *number* _normalizedZ_, *number* _heading_

* GetMapPing(*string* _unitTag_)
** _Returns:_ *number* _normalizedX_, *number* _normalizedY_

* GetMapRallyPoint()
** _Returns:_ *number* _normalizedX_, *number* _normalizedY_

* GetMapPlayerWaypoint()
** _Returns:_ *number* _normalizedX_, *number* _normalizedY_

* GetNumKeepTravelNetworkNodes(*[BattlegroundQueryContextType|#BattlegroundQueryContextType]* _bgContext_)
** _Returns:_ *integer* _numNodes_

* GetNumKeepTravelNetworkLinks(*[BattlegroundQueryContextType|#BattlegroundQueryContextType]* _bgContext_)
** _Returns:_ *integer* _numLinks_

* GetKeepTravelNetworkNodeInfo(*luaindex* _nodeIndex_, *[BattlegroundQueryContextType|#BattlegroundQueryContextType]* _bgContext_)
** _Returns:_ *integer* _keepId_, *bool* _accessible_, *number* _normalizedX_, *number* _normalizedY_

* GetKeepTravelNetworkLinkInfo(*luaindex* _linkIndex_, *[BattlegroundQueryContextType|#BattlegroundQueryContextType]* _bgContext_)
** _Returns:_ *integer* _linkType_, *integer* _linkOwner_, *integer* _restricedToAlliance_, *number* _startX_, *number* _startY_, *number* _endX_, *number* _endY_

* GetKeepTravelNetworkLinkEndpoints(*luaindex* _linkIndex_, *[BattlegroundQueryContextType|#BattlegroundQueryContextType]* _bgContext_)
** _Returns:_ *luaindex* _keepAIndex_, *luaindex* _keepBIndex_

* GetKeepAccessible(*integer* _keepId_, *[BattlegroundQueryContextType|#BattlegroundQueryContextType]* _bgContext_)
** _Returns:_ *bool* _accessible_

* GetKeepHasResourcesForTravel(*integer* _keepId_, *[BattlegroundQueryContextType|#BattlegroundQueryContextType]* _bgContext_)
** _Returns:_ *bool* _hasResources_

* GetKeepFastTravelInteraction()
** _Returns:_ *integer:nilable* _startKeepId_

* TravelToKeep(*integer* _destinationKeepId_)

* GetRecallCooldown()
** _Returns:_ *integer* _remain_, *integer* _duration_

* IsPlayerInAvAWorld()
** _Returns:_ *bool* _isInAvAWorld_

* GetCampaignAllianceScore(*integer* _campaignId_, *integer* _alliance_)
** _Returns:_ *integer* _score_

* GetSecondsUntilCampaignScoreReevaluation(*integer* _campaignId_)
** _Returns:_ *integer* _seconds_

* GetSecondsUntilCampaignStart(*integer* _campaignId_)
** _Returns:_ *integer* _seconds_

* GetSecondsUntilCampaignEnd(*integer* _campaignId_)
** _Returns:_ *integer* _seconds_

* GetCampaignUnderdogLeaderAlliance(*integer* _campaignId_)
** _Returns:_ *integer* _alliance_

* GetSecondsUntilCampaignUnderdogReevaluation(*integer* _campaignId_)
** _Returns:_ *integer* _seconds_

* GetCampaignHoldings(*integer* _campaignId_, *integer* _elementType_, *integer* _alliance_, *integer* _targetAlliance_)
** _Returns:_ *integer* _elementsControlled_

* GetTotalCampaignHoldings(*integer* _campaignId_, *integer* _elementType_, *integer* _alliance_)
** _Returns:_ *integer* _elementsControlled_

* GetCampaignAlliancePotentialScore(*integer* _campaignId_, *integer* _alliance_)
** _Returns:_ *integer* _potentialScore_

* GetCampaignHoldingScoreValues(*integer* _campaignId_)
** _Returns:_ *integer* _keepValue_, *integer* _resourceValue_, *integer* _outpostValue_, *integer* _defensiveArtifactValue_, *integer* _offensiveArtifactValue_

* GetCampaignName(*integer* _campaignId_)
** _Returns:_ *string* _campaignName_

* GetPendingAssignedCampaign()
** _Returns:_ *integer* _campaignId_

* GetNumCampaignRulesetTypes()
** _Returns:_ *integer* _numRulesetTypes_

* GetCampaignSocialConnectionInfo(*integer* _connectionIndex_)
** _Returns:_ *integer* _accountId_, *[Alliance|#Alliance]* _alliance_, *integer* _assignedCampaignId_, *integer* _currentCampaignId_, *bool* _isFriend_, *bool* _isGuildMate_

* SwitchGuestCampaign(*integer* _campaignId_)

* GetMinLevelForCampaignTutorial()
** _Returns:_ *integer* _minLevelForCampaignTutorial_

* GetNumLootItems()
** _Returns:_ *integer* _count_

* GetNumKeepResourceTypes()
** _Returns:_ *integer* _numTypes_

* GetNumKeepUpgradePaths()
** _Returns:_ *integer* _numPaths_

* GetNumUpgradesForKeepAtResourceLevel(*integer* _keepId_, *[BattlegroundQueryContextType|#BattlegroundQueryContextType]* _battlegroundContext_, *[KeepResourceType|#KeepResourceType]* _resourceType_, *integer* _level_)
** _Returns:_ *integer* _numUpgrades_

* GetKeepUpgradeDetails(*integer* _keepId_, *[BattlegroundQueryContextType|#BattlegroundQueryContextType]* _battlegroundContext_, *[KeepResourceType|#KeepResourceType]* _resourceType_, *integer* _level_, *luaindex* _index_)
** _Returns:_ *string* _upgradeName_, *string* _upgradeDetails_, *textureName* _upgradeIcon_, *integer* _upgradeAtPercent_, *bool* _active_

* GetKeepUpgradeLineFromResourceType(*[KeepResourceType|#KeepResourceType]* _resourceType_)
** _Returns:_ *[KeepUpgradeLine|#KeepUpgradeLine]* _upgradeLine_

* GetKeepUpgradeLineFromUpgradePath(*[KeepUpgradePath|#KeepUpgradePath]* _upgradePath_)
** _Returns:_ *[KeepUpgradeLine|#KeepUpgradeLine]* _upgradeLine_

* GetNumUpgradesForKeepAtPathLevel(*integer* _keepId_, *[BattlegroundQueryContextType|#BattlegroundQueryContextType]* _battlegroundContext_, *[KeepUpgradePath|#KeepUpgradePath]* _upgradePath_, *integer* _level_)
** _Returns:_ *integer* _numUpgrades_

* GetKeepUpgradePathDetails(*integer* _keepId_, *[BattlegroundQueryContextType|#BattlegroundQueryContextType]* _battlegroundContext_, *[KeepUpgradePath|#KeepUpgradePath]* _upgradePath_, *integer* _level_, *luaindex* _index_)
** _Returns:_ *string* _upgradeName_, *string* _upgradeDetails_, *textureName* _icon_, *integer* _upgradeAtPercent_, *bool* _active_

* CanRespawnAtKeep(*integer* _keepId_)
** _Returns:_ *bool* _canRespawn_

* GetIsTracked(*integer* _trackType_, *integer* _param1_, *integer* _param2_)
** _Returns:_ *bool* _tracked_

* GetIsTrackedForContentId(*integer* _trackType_, *integer* _contentId_)
** _Returns:_ *bool* _tracked_

* SetTracked(*integer* _trackType_, *bool* _tracked_, *integer* _param1_, *integer* _param2_)
** _Returns:_ *bool* _success_

* GetNumTracked()
** _Returns:_ *integer* _numTracked_

* GetTrackedByIndex(*luaindex* _index_)
** _Returns:_ *integer* _trackType_, *integer* _param1_, *integer* _param2_

* GetTrackedIsAssisted(*integer* _trackType_, *integer* _param1_, *integer* _param2_)
** _Returns:_ *bool* _assisted_

* SetTrackedIsAssisted(*integer* _trackType_, *bool* _assisted_, *integer* _param1_, *integer* _param2_)

* AddMapPin(*integer* _pinType_, *integer* _param1_, *integer* _param2_, *integer* _param3_)

* RemoveMapPin(*integer* _pinType_, *integer* _param1_, *integer* _param2_, *integer* _param3_)

* StopMapPinAnimation(*integer* _pinType_, *integer* _param1_, *integer* _param2_, *integer* _param3_)

* RemoveMapPinsByType(*integer* _pinType_)

* SetMapPinAssisted(*integer* _pinType_, *bool* _assisted_, *integer* _param1_, *integer* _param2_, *integer* _param3_)

* SetMapPinContinuousPositionUpdate(*integer* _pinType_, *bool* _continuousUpdate_, *integer* _param1_, *integer* _param2_, *integer* _param3_)

* AddMapQuestPins(*luaindex* _journalQuestIndex_)

* RemoveMapQuestPins(*luaindex* _journalQuestIndex_)

* SetMapQuestPinsAssisted(*luaindex* _journalQuestIndex_, *bool* _assisted_)

* StartMouseSiegeWeaponAim *private* ()

* StopMouseSiegeWeaponAim *private* ()

* SiegeWeaponPackUp *private* ()

* SiegeWeaponRelease *private* ()

* SiegeWeaponFire *private* ()

* CanSiegeWeaponPackUp()
** _Returns:_ *bool* _canPackup_

* CanSiegeWeaponFire()
** _Returns:_ *bool* _canFire_

* CanSiegeWeaponAim()
** _Returns:_ *bool* _canAim_

* IsPlayerControllingSiegeWeapon()
** _Returns:_ *bool* _isPlayerControlling_

* IsPlayerEscortingRam()
** _Returns:_ *bool* _isPlayerEscorting_

* GetNumPlayersEscortingRam()
** _Returns:_ *integer* _numPlayersEscorting_

* GetMinMaxRamEscorts()
** _Returns:_ *integer* _minEscorts_, *integer* _maxEscorts_

* SetHealthWarningStage(*integer* _stage_)

* FlashHealthWarningStage(*integer* _stage_, *integer* _flashTimeMs_)

* ClearHealthWarnings()

* SetFlashWaitTime(*integer* _waitTimeMs_)

* GetMaxMailItems()
** _Returns:_ *integer* _maxMail_

* QueueItemAttachment(*integer* _bagId_, *integer* _slotIndex_, *luaindex* _attachmentSlot_)
** _Returns:_ *integer* _itemAttachmentResult_

* FormatAchievementLinkTimestamp(*string* _timestamp_)
** _Returns:_ *string* _date_, *string* _time_

* GetNumStats()
** _Returns:_ *integer* _numStats_

* GetNumAbilitiesLearnedForLevel(*integer* _level_, *bool* _progression_)
** _Returns:_ *integer* _abilitiesLearned_

* GetLearnedAbilityInfoForLevel(*integer* _level_, *luaindex* _learnedIndex_, *bool* _progression_)
** _Returns:_ *string* _name_, *string* _texture_, *luaindex* _abilityIndex_, *luaindex* _progressionIndex_

* PlayerHasAttributeUpgrades()
** _Returns:_ *bool* _hasLevelUpgrades_

* ChooseAbilityProgressionMorph(*luaindex* _progressionIndex_, *integer* _morph_)

* GetAbilityProgressionInfo(*luaindex* _progressionIndex_)
** _Returns:_ *string* _name_, *integer* _morph_, *integer* _rank_

* GetAbilityProgressionXPInfo(*luaindex* _progressionIndex_)
** _Returns:_ *integer* _lastRankXp_, *integer* _nextRankXP_, *integer* _currentXP_, *bool* _atMorph_

* GetAbilityProgressionAbilityInfo(*luaindex* _progressionIndex_, *integer* _morph_, *integer* _rank_)
** _Returns:_ *string* _name_, *string* _texture_, *luaindex* _abilityIndex_

* GetAbilityProgressionRankFromAbilityId(*integer* _abilityId_)
** _Returns:_ *integer:nilable* _rank_

* GetAbilityProgressionXPInfoFromAbilityId(*integer* _abilityId_)
** _Returns:_ *bool* _hasProgression_, *luaindex* _progressionIndex_, *integer* _lastRankXp_, *integer* _nextRankXP_, *integer* _currentXP_, *bool* _atMorph_

* GetAttributeDerivedStatPerPointValue(*integer* _attribute_, *integer* _stat_)
** _Returns:_ *number* _amountPerPoint_

* GetActiveCombatTipInfo(*integer* _activeCombatTipId_)
** _Returns:_ *string* _name_, *string* _tipText_, *string* _iconPath_

* IsGameCameraActive()
** _Returns:_ *bool* _isActive_

* IsInteractionCameraActive()
** _Returns:_ *bool* _isActive_

* BeginInteractCameraSpin()

* EndInteractCameraSpin()

* GameCameraInteractStart *private* ()

* IsReticleHidden()
** _Returns:_ *bool* _isHidden_

* IsGameCameraUnitHighlightedAttackable()
** _Returns:_ *bool* _attackable_

* GameCameraMouseFreeLookStart *private* ()

* GameCameraMouseFreeLookStop *private* ()

* CycleGameCameraPreferredEnemyTarget *private* ()

* IsGameCameraPreferredTargetValid()
** _Returns:_ *bool* _valid_

* ClearGameCameraPreferredTarget *private* ()

* GetGameCameraInteractableActionInfo()
** _Returns:_ *string:nilable* _action_, *string:nilable* _name_, *bool* _interactBlocked_, *bool* _isOwned_, *integer* _additionalInfo_, *integer:nilable* _contextualInfo_, *string:nilable* _contextualLink_, *bool* _isCriminalInteract_

* GetNameOfGameCameraQuestToolTarget()
** _Returns:_ *string* _name_

* ToggleGameCameraFirstPerson()

* IsGameCameraSiegeControlled()
** _Returns:_ *bool* _valid_

* ReleaseGameCameraSiegeControlled *private* ()

* GetNumPendingFeedback()
** _Returns:_ *integer* _pendingFeedback_

* GetFeedbackIdByIndex(*luaindex* _feedbackIndex_)
** _Returns:_ *integer:nilable* _feedbackId_

* GetFeedbackType(*integer* _feedbackId_)
** _Returns:_ *integer* _feedbackType_

* RemovePendingFeedback(*integer* _feedbackId_)

* IsFeedbackGatheringEnabled()
** _Returns:_ *bool* _enabled_

* RequestOpenUnsafeURL(*string* _URL_)

* Logout()

* Quit()

* ConfirmLogout(*bool* _quitGame_, *[LogoutType|#LogoutType]* _option_, *[LogoutResult|#LogoutResult]* _initialResult_)

* CancelLogout()

* GetIsNewCharacter()
** _Returns:_ *bool* _isNewCharacter_

* GetUniqueNameForCharacter(*string* _characterName_)
** _Returns:_ *string* _uniqueName_

* GetWorldName()
** _Returns:_ *string* _worldName_

* Disconnect *private* ()

* GetTrialChatRestriction(*[MsgChannelType|#MsgChannelType]* _channel_, *string* _target_)
** _Returns:_ *[TrialAccountRestrictionType|#TrialAccountRestrictionType]* _restrictionType_

* GetTrialChatIsRestrictedAndWarn(*[MsgChannelType|#MsgChannelType]* _channel_, *string* _target_)
** _Returns:_ *bool* _handled_

* CanChangeBattleLevelPreference()
** _Returns:_ *bool* _canChangeBattleLevelPreference_

* GetCursorBagId()
** _Returns:_ *integer:nilable* _originatingBag_

* GetCursorSlotIndex()
** _Returns:_ *integer:nilable* _slotIndex_

* PlaceInActionBar *protected* (*luaindex* _actionSlot_)

* PlaceInInventory *protected* (*integer* _bagId_, *integer* _slotIndex_)

* RequestMoveItem *protected* (*integer* _sourceBag_, *integer* _sourceSlot_, *integer* _destBag_, *integer* _destSlot_, *integer* _stackCount_)

* PlaceInEquipSlot *protected* (*integer* _slot_)

* PlaceInStoreWindow *protected* ()

* PlaceInTransfer *protected* ()

* PlaceInWorldLeftClick *protected* ()

* PlaceInAttachmentSlot *protected* (*luaindex* _attachmentSlot_)

* PickupAction *protected* (*luaindex* _actionSlot_)

* PickupAbility *protected* (*luaindex* _abilityIndex_)

* PickupAbilityBySkillLine *protected* (*[SkillType|#SkillType]* _skillType_, *luaindex* _skillLineIndex_, *luaindex* _abilityIndex_)

* PickupInventoryItem *protected* (*integer* _bagId_, *integer* _slotIndex_, *integer* _count_)

* PickupEquippedItem *protected* (*integer* _slot_)

* PickupTradeItem *protected* (*luaindex* _tradeIndex_)

* PickupQuestTool *protected* (*luaindex* _journalQuestIndex_, *luaindex* _toolIndex_)

* PickupQuestItem *protected* (*luaindex* _journalQuestIndex_, *luaindex* _stepIndex_, *luaindex* _conditionIndex_)

* PickupStoreItem *protected* (*luaindex* _entryIndex_)

* PickupStoreBuybackItem *protected* (*luaindex* _entryIndex_)

* PickupCollectible *protected* (*integer* _collectibleId_)

* RespondToDestroyRequest *private* (*bool* _choice_)

* PlaceInTradingHouse *protected* ()

* GetNumActionLayers()
** _Returns:_ *integer* _actionLayers_

* GetActionLayerInfo(*luaindex* _layerIndex_)
** _Returns:_ *string* _layerName_, *integer* _numLayerCategories_

* GetActionLayerCategoryInfo(*luaindex* _layerIndex_, *luaindex* _categoryIndex_)
** _Returns:_ *string* _categoryName_, *integer* _numActions_

* GetActionInfo(*luaindex* _layerIndex_, *luaindex* _categoryIndex_, *luaindex* _actionIndex_)
** _Returns:_ *string* _actionName_, *bool* _isRebindable_, *bool* _isHidden_

* GetActionBindingInfo(*luaindex* _layerIndex_, *luaindex* _categoryIndex_, *luaindex* _actionIndex_, *luaindex* _bindingIndex_)
** _Returns:_ *[KeyCode|#KeyCode]* _keyCode_, *[KeyCode|#KeyCode]* _mod1_, *[KeyCode|#KeyCode]* _mod2_, *[KeyCode|#KeyCode]* _mod3_, *[KeyCode|#KeyCode]* _mod4_

* GetHighestPriorityActionBindingInfoFromName(*string* _actionName_, *bool* _preferGamepad_)
** _Returns:_ *[KeyCode|#KeyCode]* _keyCode_, *[KeyCode|#KeyCode]* _mod1_, *[KeyCode|#KeyCode]* _mod2_, *[KeyCode|#KeyCode]* _mod3_, *[KeyCode|#KeyCode]* _mod4_

* GetMaxBindingsPerAction()
** _Returns:_ *integer* _maxNumBindings_

* CreateDefaultActionBind(*string* _actionName_, *[KeyCode|#KeyCode]* _key_, *[KeyCode|#KeyCode]* _modifier1_, *[KeyCode|#KeyCode]* _modifier2_, *[KeyCode|#KeyCode]* _modifier3_, *[KeyCode|#KeyCode]* _modifier4_)

* BindKeyToAction *protected* (*luaindex* _layerIndex_, *luaindex* _categoryIndex_, *luaindex* _actionIndex_, *luaindex* _bindingIndex_, *[KeyCode|#KeyCode]* _key_, *[KeyCode|#KeyCode]* _modifier1_, *[KeyCode|#KeyCode]* _modifier2_, *[KeyCode|#KeyCode]* _modifier3_, *[KeyCode|#KeyCode]* _modifier4_)

* UnbindKeyFromAction *protected* (*luaindex* _layerIndex_, *luaindex* _categoryIndex_, *luaindex* _actionIndex_, *luaindex* _bindingIndex_)

* UnbindAllKeysFromAction *protected* (*luaindex* _layerIndex_, *luaindex* _categoryIndex_, *luaindex* _actionIndex_)

* GetActionIndicesFromName(*string* _actionName_)
** _Returns:_ *luaindex:nilable* _layerIndex_, *luaindex:nilable* _categoryIndex_, *luaindex:nilable* _actionIndex_

* GetBindingIndicesFromKeys(*luaindex* _layerIndex_, *[KeyCode|#KeyCode]* _keyCode_, *[KeyCode|#KeyCode]* _mod1_, *[KeyCode|#KeyCode]* _mod2_, *[KeyCode|#KeyCode]* _mod3_, *[KeyCode|#KeyCode]* _mod4_)
** _Returns:_ *luaindex:nilable* _categoryIndex_, *luaindex:nilable* _actionIndex_, *luaindex:nilable* _bindingIndex_

* GetActionNameFromKey(*string* _layerName_, *[KeyCode|#KeyCode]* _keyCode_)
** _Returns:_ *string* _actionName_

* PushActionLayerByName(*string* _layerName_)

* InsertActionLayerByName(*string* _layerName_, *luaindex* _activeLayerIndex_)

* InsertNamedActionLayerAbove(*string* _layerName_, *string* _existingLayerName_)

* RemoveActionLayerByName(*string* _layerName_)

* IsActionLayerActiveByName(*string* _layerName_)
** _Returns:_ *bool* _active_

* PopActionLayer()

* GetNumActiveActionLayers()
** _Returns:_ *integer* _numActiveActionLayers_

* GetActiveActionLayerIndex(*luaindex* _activeActionLayerIndex_)
** _Returns:_ *luaindex:nilable* _layerIndex_

* GetNumCharacters()
** _Returns:_ *integer* _numCharacters_

* GetCharacterInfo(*luaindex* _index_)
** _Returns:_ *string* _name_, *[Gender|#Gender]* _gender_, *integer* _level_, *integer* _classId_, *integer* _raceId_, *[Alliance|#Alliance]* _alliance_, *string* _id_, *integer* _locationId_

* GetNumAttributes()
** _Returns:_ *integer* _numAttributes_

* IsPlayerTryingToMove()
** _Returns:_ *bool* _tryingToMove_

* GetCon(*integer* _otherLevel_, *integer:nilable* _playerLevel_)
** _Returns:_ *[DifficultyCon|#DifficultyCon]* _con_

* IsWerewolf()
** _Returns:_ *bool* _isWerewolf_

* IsPlayerStunned()
** _Returns:_ *bool* _isStunned_

* GetSynergyInfo()
** _Returns:_ *string:nilable* _synergyName_, *textureName:nilable* _iconFilename_

* HasSynergyEffects()
** _Returns:_ *bool* _hasSynergy_

* GetGroupInviteInfo()
** _Returns:_ *string* _characterName_, *integer* _millisecondsSinceRequest_, *string* _displayName_

* AcceptGroupInvite()

* DeclineGroupInvite()

* HasPendingGroupElectionVote()
** _Returns:_ *bool* _hasPendingVote_

* CastGroupVote(*[GroupVoteChoice|#GroupVoteChoice]* _vote_)

* GroupLeave()

* GroupInviteByName(*string* _name_)

* GroupKickByName(*string* _name_)

* GroupDisband()

* IsPlayerInGroup(*string* _name_)
** _Returns:_ *bool* _inGroup_

* GetGroupSize()
** _Returns:_ *integer* _groupSize_

* JumpToGroupLeader()

* JumpToGroupMember(*string* _name_)

* CanJumpToGroupMember(*string* _unitTag_)
** _Returns:_ *bool* _canJump_, *[JumpToPlayerResult|#JumpToPlayerResult]* _result_

* SetVeteranDifficulty(*bool* _isVeteranDifficulty_)

* GetGroupUnitTagByIndex(*luaindex* _sortIndex_)
** _Returns:_ *string:nilable* _unitTag_

* GetGroupIndexByUnitTag(*string* _unitTag_)
** _Returns:_ *luaindex* _sortIndex_

* GetInstanceKickTime()
** _Returns:_ *integer:nilable* _remainingTimeMs_, *integer:nilable* _totalTimeMs_

* IsGroupMemberInRemoteRegion(*string* _unitTag_)
** _Returns:_ *bool* _inRemoteRegion_

* IsAnyGroupMemberInDungeon()
** _Returns:_ *bool* _isAnyGroupMemberInDungeon_

* IsGroupCrossAlliance()
** _Returns:_ *bool* _isGroupCrossAlliance_

* IsInLFGGroup()
** _Returns:_ *bool* _isInLFGGroup_

* IsCurrentLFGActivityComplete()
** _Returns:_ *bool* _isComplete_

* GetGroupMemberAssignedRole(*string* _unitTag_)
** _Returns:_ *[LFGRole|#LFGRole]* _assignedRole_

* DoAllGroupMembersHavePreferredRole()
** _Returns:_ *bool* _allGroupMembersHavePreferredRoles_

* IsGroupUsingVeteranDifficulty()
** _Returns:_ *bool* _isVeteran_

* IsGroupModificationAvailable()
** _Returns:_ *bool* _isAvailable_

* DoesGroupModificationRequireVote()
** _Returns:_ *bool* _doesRequireVote_

* CanPlayerChangeGroupDifficulty()
** _Returns:_ *bool* _canChange_, *[GroupDifficultyChangeReason|#GroupDifficultyChangeReason]* _reason_

* GetGroupElectionInfo()
** _Returns:_ *[GroupElectionType|#GroupElectionType]* _electionType_, *integer* _timeRemainingSeconds_, *string* _electionDescriptor_, *string* _targetUnitTag_

* BeginGroupElection(*[GroupElectionType|#GroupElectionType]* _electionType_, *string* _electionDescriptor_, *string* _targetUnitTag_)
** _Returns:_ *bool* _sentSuccessfully_

* GetRaidReviveCountersRemaining()
** _Returns:_ *integer:nilable* _currentCounter_

* GetCurrentRaidScore()
** _Returns:_ *integer* _score_

* GetCurrentRaidDeaths()
** _Returns:_ *integer:nilable* _deaths_

* GetCurrentRaidStartingReviveCounters()
** _Returns:_ *integer:nilable* _startingReviveCounters_

* GetCurrentRaidLifeScoreBonus()
** _Returns:_ *integer:nilable* _currentLifeScoreBonus_

* GetRaidBonusMultiplier()
** _Returns:_ *integer* _currentLifeScoreBonus_

* IsRaidInProgress()
** _Returns:_ *bool* _inProgress_

* HasRaidEnded()
** _Returns:_ *bool* _ended_

* WasRaidSuccessful()
** _Returns:_ *bool:nilable* _successful_

* IsPlayerInRaid()
** _Returns:_ *bool* _inRaid_

* IsPlayerInReviveCounterRaid()
** _Returns:_ *bool* _isInReviveCounterRaid_

* IsPlayerInRaidStagingArea()
** _Returns:_ *bool* _isInRaidStagingArea_

* GetRaidName(*integer* _raidId_)
** _Returns:_ *string* _name_

* GetCurrentParticipatingRaidId()
** _Returns:_ *integer* _currentRaidId_

* GetRaidTargetTime()
** _Returns:_ *integer* _raidTargetTime_

* GetRaidDuration()
** _Returns:_ *integer* _raidTime_

* QueryRaidLeaderboardData()

* GetNumRaidLeaderboards(*[RaidCategory|#RaidCategory]* _raidCategory_)
** _Returns:_ *integer* _count_, *bool* _hasWeekly_

* GetRaidOfTheWeekLeaderboardInfo(*[RaidCategory|#RaidCategory]* _raidCategory_)
** _Returns:_ *string* _name_, *integer* _raidId_

* GetRaidLeaderboardInfo(*[RaidCategory|#RaidCategory]* _raidCategory_, *luaindex* _raidIndex_)
** _Returns:_ *string* _name_, *integer* _raidId_

* GetRaidOfTheWeekLeaderboardLocalPlayerInfo(*[RaidCategory|#RaidCategory]* _raidCategory_)
** _Returns:_ *integer* _rank_, *integer* _bestScore_

* GetRaidLeaderboardLocalPlayerInfo(*[RaidCategory|#RaidCategory]* _raidCategory_, *luaindex* _raidIndex_)
** _Returns:_ *integer* _rank_, *integer* _bestScore_

* GetNumTrialOfTheWeekLeaderboardEntries()
** _Returns:_ *integer* _count_

* GetNumTrialLeaderboardEntries(*luaindex* _raidIndex_)
** _Returns:_ *integer* _count_

* GetNumChallengeOfTheWeekLeaderboardEntries(*integer* _classId_)
** _Returns:_ *integer* _count_

* GetNumChallengeLeaderboardEntries(*luaindex* _raidIndex_, *integer* _classId_)
** _Returns:_ *integer* _count_

* GetTrialOfTheWeekLeaderboardEntryInfo(*luaindex* _entryIndex_)
** _Returns:_ *integer* _ranking_, *string* _charName_, *integer* _time_, *integer* _classId_, *integer* _allianceId_, *string* _displayName_

* GetTrialLeaderboardEntryInfo(*luaindex* _raidIndex_, *luaindex* _entryIndex_)
** _Returns:_ *integer* _ranking_, *string* _charName_, *integer* _time_, *integer* _classId_, *integer* _allianceId_, *string* _displayName_

* GetChallengeOfTheWeekLeaderboardEntryInfo(*integer* _classId_, *luaindex* _entryIndex_)
** _Returns:_ *integer* _ranking_, *string* _charName_, *integer* _time_, *integer* _retClassId_, *integer* _allianceId_, *string* _displayName_

* GetChallengeLeaderboardEntryInfo(*luaindex* _raidIndex_, *integer* _classId_, *luaindex* _entryIndex_)
** _Returns:_ *integer* _ranking_, *string* _charName_, *integer* _time_, *integer* _retClassId_, *integer* _allianceId_, *string* _displayName_

* GetRaidOfTheWeekTimes()
** _Returns:_ *integer* _secondsUntilEnd_, *integer* _secondsUntilNextStart_

* GetPlayerRaidOfTheWeekParticipationInfo(*[RaidCategory|#RaidCategory]* _raidCategory_)
** _Returns:_ *bool* _isParticipating_, *bool* _isCredited_

* GetPlayerRaidParticipationInfo(*[RaidCategory|#RaidCategory]* _raidCategory_, *luaindex* _raidIndex_)
** _Returns:_ *bool* _isParticipating_, *bool* _isCredited_

* GetPlayerRaidOfTheWeekProgressInfo(*[RaidCategory|#RaidCategory]* _raidCategory_)
** _Returns:_ *bool* _inProgress_, *bool* _complete_

* GetPlayerRaidProgressInfo(*[RaidCategory|#RaidCategory]* _raidCategory_, *luaindex* _raidIndex_)
** _Returns:_ *bool* _inProgress_, *bool* _complete_

* QueryHomeShowLeaderboardData()

* GetNumHomeShowVoteCategories()
** _Returns:_ *integer* _numVoteCategories_

* GetHomeShowLeaderboardVoteCategoryName(*integer* _voteCategory_)
** _Returns:_ *string* _homeShowEventName_

* GetHomeShowLeaderboardLocalPlayerInfo(*integer* _voteCategory_, *[HouseCategoryType|#HouseCategoryType]* _houseCategory_)
** _Returns:_ *integer* _personalBestRank_, *integer* _personalBestScore_

* GetNumHomeShowLeaderboardEntries(*integer* _voteCategory_, *[HouseCategoryType|#HouseCategoryType]* _houseCategory_)
** _Returns:_ *integer* _numEntries_

* GetHomeShowLeaderboardEntryInfo(*integer* _voteCategory_, *[HouseCategoryType|#HouseCategoryType]* _houseCategory_, *luaindex* _entryIndex_)
** _Returns:_ *integer* _rank_, *string* _playerDisplayname_, *integer* _houseCollectibleId_, *integer* _score_

* GetHomeShowLeaderboardTimeInfo()
** _Returns:_ *integer* _secondsUntilNextUpdate_

* JumpToFriend(*string* _displayName_)

* JumpToHouse(*string* _displayName_)

* JumpToSpecificHouse(*string* _displayName_, *integer* _houseId_)

* GetNumRaidScoreNotifications()
** _Returns:_ *integer* _numNotifications_

* GetRaidScoreNotificationId(*luaindex* _notificationIndex_)
** _Returns:_ *integer* _notificationId_

* GetRaidScoreNotificationInfo(*integer* _notificationId_)
** _Returns:_ *integer* _raidId_, *integer* _raidScore_, *integer* _millisecondsSinceRequest_

* GetNumRaidScoreNotificationMembers(*integer* _notificationId_)
** _Returns:_ *integer* _numMembers_

* GetRaidScoreNotificationMemberInfo(*integer* _notificationId_, *luaindex* _memberIndex_)
** _Returns:_ *string* _displayName_, *string* _characterName_, *bool* _isFriend_, *bool* _isGuildMember_, *bool* _isPlayer_

* RemoveRaidScoreNotification(*integer* _notificationId_)

* IsSlotLocked(*luaindex* _slotIndex_)
** _Returns:_ *bool* _locked_

* IsActionBarSlottingAllowed()
** _Returns:_ *bool* _isAllowed_

* GetActionBarPage(*luaindex* _physicalPageId_)
** _Returns:_ *luaindex* _logicalPageId_

* SetActionBarPage *protected* (*luaindex* _physicalPageId_, *luaindex* _logicalPageId_)

* ClearSlot *protected* (*luaindex* _slotIndex_)

* SelectSlotAbility *protected* (*luaindex* _abilityIndex_, *luaindex* _slotIndex_)

* SelectSlotItem *protected* (*integer* _bagId_, *integer* _bagSlotId_, *luaindex* _slotIndex_)

* SelectSlotCollectible *protected* (*integer* _collectibleId_, *luaindex* _slotIndex_)

* SelectSlotEmote *protected* (*integer* _emoteId_, *luaindex* _slotIndex_)

* SelectSlotQuickChat *protected* (*integer* _quickChatId_, *luaindex* _slotIndex_)

* SelectLastSlottedItem *protected* (*luaindex* _slotIndex_)

* ClearLastSlottedItem()

* GetLastSlottedItemLink()
** _Returns:_ *string* _itemLink_

* GetSlotItemLink(*luaindex* _slotIndex_)
** _Returns:_ *string* _itemLink_

* GetSlotBoundId(*luaindex* _slotIndex_)
** _Returns:_ *integer* _id_

* GetCurrentQuickslot()
** _Returns:_ *integer* _slotId_

* SetCurrentQuickslot(*integer* _slotId_)

* HasMountSkin()
** _Returns:_ *bool* _result_

* GetMountSkinId()
** _Returns:_ *integer* _skinId_

* GetRidingStats()
** _Returns:_ *integer* _inventoryBonus_, *integer* _maxInventoryBonus_, *integer* _staminaBonus_, *integer* _maxStaminaBonus_, *integer* _speedBonus_, *integer* _maxSpeedBonus_

* GetMaxRidingTraining(*[RidingTrainType|#RidingTrainType]* _trainTypeIndex_)
** _Returns:_ *integer* _maxValue_

* GetTimeUntilCanBeTrained()
** _Returns:_ *integer* _timeMs_, *integer* _totalDurationMs_

* GetTrainingCost()
** _Returns:_ *integer* _cost_

* TrainRiding(*[RidingTrainType|#RidingTrainType]* _trainTypeIndex_)

* IsMounted()
** _Returns:_ *bool* _mounted_

* ToggleMount *private* ()

* GetAbilityIdByIndex(*luaindex* _abilityIndex_)
** _Returns:_ *integer* _abilityId_

* DoesAbilityExist(*integer* _abilityId_)
** _Returns:_ *bool* _exists_

* GetAbilityName(*integer* _abilityId_)
** _Returns:_ *string* _abilityName_

* IsAbilityPassive(*integer* _abilityId_)
** _Returns:_ *bool* _isPassive_

* IsAbilityPermanent(*integer* _abilityId_)
** _Returns:_ *bool* _isPermanent_

* GetAbilityCastInfo(*integer* _abilityId_)
** _Returns:_ *bool* _channeled_, *integer* _castTime_, *integer* _channelTime_

* GetAbilityTargetDescription(*integer* _abilityId_)
** _Returns:_ *string:nilable* _targetDescription_

* GetAbilityRange(*integer* _abilityId_)
** _Returns:_ *integer* _minRangeCM_, *integer* _maxRangeCM_

* GetAbilityRadius(*integer* _abilityId_)
** _Returns:_ *integer* _radius_

* GetAbilityAngleDistance(*integer* _abilityId_)
** _Returns:_ *integer* _angleDistance_

* GetAbilityDuration(*integer* _abilityId_)
** _Returns:_ *integer* _duration_

* GetAbilityIcon(*integer* _abilityId_)
** _Returns:_ *textureName* _icon_

* GetAbilityCost(*integer* _abilityId_)
** _Returns:_ *integer* _cost_, *[CombatMechanicType|#CombatMechanicType]* _mechanic_

* GetAbilityRoles(*integer* _abilityId_)
** _Returns:_ *bool* _isTankRoleAbility_, *bool* _isHealerRoleAbility_, *bool* _isDamageRoleAbility_

* GetAbilityDescriptionHeader(*integer* _abilityId_)
** _Returns:_ *string* _header_

* GetAbilityDescription(*integer* _abilityId_)
** _Returns:_ *string* _description_

* GetAbilityEffectDescription(*integer* _effectSlotId_)
** _Returns:_ *string* _description_

* GetAbilityUpgradeLines(*integer* _abilityId_)
** _Uses variable returns..._
** _Returns:_ *string* _label_, *string* _oldValue_, *string* _newValue_

* GetAbilityNewEffectLines(*integer* _abilityId_)
** _Uses variable returns..._
** _Returns:_ *string* _newEffect_

* IsBlockActive()
** _Returns:_ *bool* _active_

* StartSoulGemResurrection *private* ()

* CancelSoulGemResurrection *private* ()

* OnWeaponSwap *private* ()

* OnWeaponSwapToSet1 *private* ()

* OnWeaponSwapToSet2 *private* ()

* ActivateSynergy *private* ()

* FormatFloatRelevantFraction(*number* _num_)
** _Returns:_ *string* _formattedString_

* GetOfferedQuestInfo()
** _Returns:_ *string* _dialogue_, *string* _response_

* GetOfferedQuestShareInfo(*integer* _questId_)
** _Returns:_ *string* _questName_, *string* _characterName_, *integer* _millisecondsSinceRequest_, *string* _displayName_

* GetOfferedQuestShareIds()
** _Uses variable returns..._
** _Returns:_ *integer* _questId_

* AcceptOfferedQuest()

* AcceptSharedQuest(*integer* _questId_)

* DeclineSharedQuest(*integer* _questId_)

* GetNumJournalQuests()
** _Returns:_ *integer* _numQuests_

* IsValidQuestIndex(*luaindex* _journalQuestIndex_)
** _Returns:_ *bool* _isValid_

* GetJournalQuestType(*luaindex* _journalQuestIndex_)
** _Returns:_ *integer* _type_

* GetJournalQuestRepeatType(*luaindex* _journalQuestIndex_)
** _Returns:_ *integer* _repeatType_

* GetJournalQuestInstanceDisplayType(*luaindex* _journalQuestIndex_)
** _Returns:_ *[InstanceDisplayType|#InstanceDisplayType]* _instanceDisplayType_

* GetJournalQuestInfo(*luaindex* _journalQuestIndex_)
** _Returns:_ *string* _questName_, *string* _backgroundText_, *string* _activeStepText_, *integer* _activeStepType_, *string* _activeStepTrackerOverrideText_, *bool* _completed_, *bool* _tracked_, *integer* _questLevel_, *bool* _pushed_, *integer* _questType_, *[InstanceDisplayType|#InstanceDisplayType]* _instanceDisplayType_

* GetJournalQuestIsComplete(*luaindex* _journalQuestIndex_)
** _Returns:_ *bool* _completed_

* GetJournalQuestName(*luaindex* _journalQuestIndex_)
** _Returns:_ *string* _questName_

* GetJournalQuestLevel(*luaindex* _journalQuestIndex_)
** _Returns:_ *integer* _level_

* GetJournalQuestConditionType(*luaindex* _journalQuestIndex_, *luaindex* _stepIndex_, *luaindex* _conditionIndex_, *bool* _assisted_)
** _Returns:_ *integer* _pinType_

* GetJournalQuestConditionInfo(*luaindex* _journalQuestIndex_, *luaindex* _stepIndex_, *luaindex* _conditionIndex_)
** _Returns:_ *string* _conditionText_, *integer* _current_, *integer* _max_, *bool* _isFailCondition_, *bool* _isComplete_, *bool* _isCreditShared_, *bool* _isVisible_

* GetJournalQuestConditionValues(*luaindex* _journalQuestIndex_, *luaindex* _stepIndex_, *luaindex* _conditionIndex_)
** _Returns:_ *integer* _current_, *integer* _max_, *bool* _isFailCondition_, *bool* _isComplete_, *bool* _isCreditShared_, *bool* _isVisible_

* GetQuestToolCooldownInfo(*luaindex* _journalQuestIndex_, *luaindex* _toolIndex_)
** _Returns:_ *integer* _remain_, *integer* _duration_

* GetQuestItemCooldownInfo(*luaindex* _journalQuestIndex_, *luaindex* _stepIndex_, *luaindex* _conditionIndex_)
** _Returns:_ *integer* _remain_, *integer* _duration_

* UseQuestItem(*luaindex* _journalQuestIndex_, *luaindex* _stepIndex_, *luaindex* _conditionIndex_)

* UseQuestTool(*luaindex* _journalQuestIndex_, *luaindex* _toolIndex_)

* CanUseQuestItem(*luaindex* _journalQuestIndex_, *luaindex* _stepIndex_, *luaindex* _conditionIndex_)
** _Returns:_ *bool* _canUse_

* CanUseQuestTool(*luaindex* _journalQuestIndex_, *luaindex* _toolIndex_)
** _Returns:_ *bool* _canUse_

* IsJournalQuestInCurrentMapZone(*luaindex* _questIndex_)
** _Returns:_ *bool* _isInCurrentZone_

* IsJournalQuestStepEnding(*luaindex* _journalQuestIndex_, *luaindex* _stepIndex_)
** _Returns:_ *bool* _isEnding_

* DoesJournalQuestConditionHavePosition(*luaindex* _journalQuestIndex_, *luaindex* _stepIndex_, *luaindex* _conditionIndex_)
** _Returns:_ *bool* _hasPosition_

* SetMapToQuestCondition(*luaindex* _journalQuestIndex_, *luaindex* _stepIndex_, *luaindex* _conditionIndex_)
** _Returns:_ *[SetMapResultCode|#SetMapResultCode]* _setMapResult_

* SetMapToQuestStepEnding(*luaindex* _journalQuestIndex_, *luaindex* _stepIndex_)
** _Returns:_ *[SetMapResultCode|#SetMapResultCode]* _setMapResult_

* SetMapToQuestZone(*luaindex* _questIndex_)
** _Returns:_ *[SetMapResultCode|#SetMapResultCode]* _setMapResult_

* GetJournalQuestNumRewards(*luaindex* _journalQuestIndex_)
** _Returns:_ *integer* _count_

* GetQuestRewardItemLink(*luaindex* _rewardIndex_, *[LinkStyle|#LinkStyle]* _linkStyle_)
** _Returns:_ *string* _link_

* GetNextCompletedQuestId(*integer:nilable* _lastQuestId_)
** _Returns:_ *integer:nilable* _nextQuestId_

* GetCompletedQuestInfo(*integer* _questId_)
** _Returns:_ *string* _name_, *[QuestType|#QuestType]* _questType_

* GetCompletedQuestLocationInfo(*integer* _questId_)
** _Returns:_ *string* _zoneName_, *string* _objectiveName_, *luaindex* _zoneIndex_, *luaindex* _poiIndex_

* GetJournalQuestRewardInfo(*luaindex* _journalQuestIndex_, *luaindex* _rewardIndex_)
** _Returns:_ *[RewardType|#RewardType]* _type_, *string* _name_, *integer* _amount_, *textureName* _iconFile_, *bool* _meetsUsageRequirement_, *[ItemQuality|#ItemQuality]* _itemQuality_, *[RewardItemType|#RewardItemType]:nilable* _itemType_

* GetJournalQuestRewardItemId(*luaindex* _journalQuestIndex_, *luaindex* _rewardIndex_)
** _Returns:_ *integer* _rewardItemDefId_

* GetJournalQuestRewardCollectibleId(*luaindex* _journalQuestIndex_, *luaindex* _rewardIndex_)
** _Returns:_ *integer* _rewardCollectibleDefId_

* GetJournalQuestRewardSkillLine(*luaindex* _journalQuestIndex_, *luaindex* _rewardIndex_)
** _Returns:_ *[SkillType|#SkillType]* _skillType_, *luaindex* _skillIndex_

* GetJournalQuestStartingZone(*luaindex* _journalQuestIndex_)
** _Returns:_ *luaindex* _zoneIndex_

* GetQuestToolInfo(*luaindex* _journalQuestIndex_, *luaindex* _toolIndex_)
** _Returns:_ *textureName* _iconFilename_, *integer* _stackCount_, *bool* _isUsable_, *string* _name_, *integer* _questItemId_

* GetQuestItemInfo(*luaindex* _journalQuestIndex_, *luaindex* _stepIndex_, *luaindex* _conditionIndex_)
** _Returns:_ *textureName* _iconFilename_, *integer* _stackCount_, *string* _name_, *integer* _questItemId_

* GetQuestToolQuestItemId(*luaindex* _journalQuestIndex_, *luaindex* _toolIndex_)
** _Returns:_ *integer* _questItemId_

* GetQuestConditionQuestItemId(*luaindex* _journalQuestIndex_, *luaindex* _stepIndex_, *luaindex* _conditionIndex_)
** _Returns:_ *integer* _questItemId_

* GetQuestItemName(*integer* _questItemId_)
** _Returns:_ *string* _itemName_

* GetQuestItemTooltipText(*integer* _questItemId_)
** _Returns:_ *string* _tooltipText_

* CancelRequestJournalQuestConditionAssistance(*integer* _taskId_)

* GetDynamicChatChannelName(*integer* _channelId_)
** _Returns:_ *string* _name_

* GetChatChannelId(*string* _name_)
** _Returns:_ *integer* _channelId_

* CanWriteGuildChannel(*integer* _channelId_)
** _Returns:_ *bool* _canWrite_

* GetNumChatContainers()
** _Returns:_ *integer* _numContainers_

* GetNumChatContainerTabs(*luaindex* _chatContainerIndex_)
** _Returns:_ *integer* _numContainerTabs_

* GetChatContainerTabInfo(*luaindex* _chatContainerIndex_, *luaindex* _tabIndex_)
** _Returns:_ *string* _name_, *bool* _isLocked_, *bool* _isInteractable_, *bool* _isCombatLog_, *bool* _areTimestampsEnabled_

* GetNumChatCategories()
** _Returns:_ *integer* _numCategories_

* IsChatContainerTabCategoryEnabled(*luaindex* _chatContainerIndex_, *luaindex* _tabIndex_, *[ChatChannelCategories|#ChatChannelCategories]* _chatCategory_)
** _Returns:_ *bool* _enabled_

* SetChatContainerTabCategoryEnabled(*luaindex* _chatContainerIndex_, *luaindex* _tabIndex_, *[ChatChannelCategories|#ChatChannelCategories]* _chatCategory_, *bool* _enabled_)

* SetChatContainerTabInfo(*luaindex* _chatContainerIndex_, *luaindex* _tabIndex_, *string* _name_, *bool* _isLocked_, *bool* _isInteractable_, *bool* _areTimestampsEnabled_)

* ResetChatContainerTabToDefault(*luaindex* _chatContainerIndex_, *luaindex* _tabIndex_)

* GetChatContainerColors(*luaindex* _chatContainerIndex_)
** _Returns:_ *number* _bgRed_, *number* _bgGreen_, *number* _bgBlue_, *number* _bgMinAlpha_, *number* _bgMaxAlpha_

* SetChatContainerColors(*luaindex* _chatContainerIndex_, *number* _bgRed_, *number* _bgGreen_, *number* _bgBlue_, *number* _bgMinAlpha_, *number* _bgMaxAlpha_)

* ResetChatContainerColorsToDefault(*luaindex* _chatContainerIndex_)

* AddChatContainer()

* RemoveChatContainer(*luaindex* _chatContainerIndex_)

* AddChatContainerTab(*luaindex* _chatContainerIndex_, *string* _name_, *bool* _isCombatLog_)

* RemoveChatContainerTab(*luaindex* _chatContainerIndex_, *luaindex* _tabIndex_)

* TransferChatContainerTab(*luaindex* _fromChatContainerIndex_, *luaindex* _fromTabIndex_, *luaindex* _toChatContainerIndex_, *luaindex* _toTabIndex_)

* GetChatFontSize()
** _Returns:_ *integer* _fontSize_

* SetChatFontSize(*integer* _fontSize_)

* GetGamepadChatFontSize()
** _Returns:_ *integer* _gamepadFontSize_

* SetGamepadChatFontSize(*integer* _gamepadFontSize_)

* ResetChatFontSizeToDefault()

* GetChatCategoryColor(*[ChatChannelCategories|#ChatChannelCategories]* _category_)
** _Returns:_ *number* _red_, *number* _green_, *number* _blue_

* SetChatCategoryColor(*[ChatChannelCategories|#ChatChannelCategories]* _category_, *number* _red_, *number* _green_, *number* _blue_)

* ResetChatCategoryColorToDefault(*[ChatChannelCategories|#ChatChannelCategories]* _category_)

* GetChannelCategoryFromChannel(*[MsgChannelType|#MsgChannelType]* _channel_)
** _Returns:_ *[ChatChannelCategories|#ChatChannelCategories]* _category_

* IsChatBubbleCategoryEnabled(*[ChatChannelCategories|#ChatChannelCategories]* _category_)
** _Returns:_ *bool* _enabled_

* SetChatBubbleCategoryEnabled(*[ChatChannelCategories|#ChatChannelCategories]* _category_, *bool* _enabled_)

* IsChatSystemAvailableForCurrentPlatform()
** _Returns:_ *bool* _enabled_

* SetSessionIgnore(*string* _userName_, *bool* _isIgnoredThisSession_)

* ClearSessionIgnores()

* SetChatLogEnabled(*bool* _isEnabled_)

* IsChatLogEnabled()
** _Returns:_ *bool* _isEnabled_

* SetPendingInteractionConfirmed(*bool* _isConfirmed_)

* IsUnderArrest()
** _Returns:_ *bool* _beingArrested_

* GetGameCameraInteractableUnitAudioInfo()
** _Returns:_ *integer* _audioModelType_, *integer* _audioModelMaterial_, *integer* _audioModelSize_

* IsGameCameraInteractableUnitMonster()
** _Returns:_ *bool* _isUnitMonster_

* GetGameCameraInteractableInfo()
** _Returns:_ *bool* _interactionExists_, *bool* _interactionAvailableNow_, *bool* _questInteraction_, *bool* _questTargetBased_, *luaindex* _questJournalIndex_, *luaindex* _questToolIndex_, *bool* _questToolOnCooldown_

* GetGameCameraPickpocketingBonusInfo()
** _Returns:_ *bool* _inBonus_, *bool* _isHostile_, *integer* _percentChance_, *[PickpocketDifficultyType|#PickpocketDifficultyType]* _difficulty_, *bool* _isEmpty_, *[ProspectivePickpocketResult|#ProspectivePickpocketResult]* _prospectiveResult_, *string* _monsterSocialClassString_, *[MonsterSocialClass|#MonsterSocialClass]* _monsterSocialClass_

* GetChatterOption(*luaindex* _optionIndex_)
** _Returns:_ *string* _optionString_, *integer* _optionType_, *integer* _optionalArgument_, *bool* _isImportant_, *bool* _chosenBefore_

* SelectChatterOption(*luaindex* _optionIndex_)

* IsInteractionPending()
** _Returns:_ *bool* _isPending_

* EndPendingInteraction()

* GetChatterOptionCount()
** _Returns:_ *integer* _optionCount_

* ResetChatter()

* GetChatterFarewell()
** _Returns:_ *string* _backToTOCString_, *string* _farewellString_, *bool* _isImportant_

* IsPlayerInteractingWithObject()
** _Returns:_ *bool* _areThey_

* IsInteractingWithMyAssistant()
** _Returns:_ *bool* _isAssistant_

* GetInteractionType()
** _Returns:_ *[InteractionType|#InteractionType]* _interactMode_

* SetFrameLocalPlayerInGameCamera(*bool* _enabled_)

* SetFrameLocalPlayerTarget(*number* _normalizedScreenX_, *number* _normalizedScreenY_)

* SetFramingScreenType(*[GameCameraFramingScreenType|#GameCameraFramingScreenType]* _screenType_)

* PlayItemSound(*[ItemUISoundCategory|#ItemUISoundCategory]* _itemSoundCategory_, *[ItemUISoundAction|#ItemUISoundAction]* _itemSoundAction_)

* PlayLootSound(*integer* _audioModelType_, *bool* _closeLootWindow_)

* WhatIsVisualSlotShowing(*[VisualSlot|#VisualSlot]* _visualSlot_)
** _Returns:_ *[VisualLayer|#VisualLayer]* _highestPriorityVisualLayerThatIsShowing_

* GetHiddenByStringForVisualLayer(*[VisualLayer|#VisualLayer]* _visualLayer_)
** _Returns:_ *string* _hiddenByString_

* WouldEquipmentBeHidden(*[EquipSlot|#EquipSlot]* _equipSlot_)
** _Returns:_ *bool* _isHidden_, *[VisualLayer|#VisualLayer]* _highestPriorityVisualLayerThatIsShowing_

* IsEquipSlotVisualCategoryHidden(*[EquipSlotVisualCategory|#EquipSlotVisualCategory]* _equipSlotVisualCategory_)
** _Returns:_ *bool* _isHidden_

* WouldCollectibleBeHidden(*integer* _collectibleId_)
** _Returns:_ *bool* _isHidden_, *[VisualLayer|#VisualLayer]* _highestPriorityVisualLayerThatIsShowing_

* DoesCollectibleHaveVisibleAppearance(*integer* _collectibleId_)
** _Returns:_ *bool* _hasVisibleAppearance_

* GetKioskBidWindowSecondsRemaining()
** _Returns:_ *integer* _secondsRemaining_

* GetKioskGuildInfo(*integer* _guildId_)
** _Returns:_ *integer:nilable* _bankedMoney_, *integer:nilable* _existingBidAmount_, *bool:nilable* _existingBidIsOnThisKiosk_, *string:nilable* _existingBidKioskName_, *[GuildKioskGuildInfoResult|#GuildKioskGuildInfoResult]* _queryResult_

* GetKioskPurchaseCost()
** _Returns:_ *integer* _cost_

* GuildKioskBid(*integer* _guildId_, *integer* _bidAmount_)

* GuildKioskPurchase(*integer* _guildId_)

* GetNumTradingHouseGuilds()
** _Returns:_ *integer* _numGuilds_

* GetTradingHouseGuildDetails(*luaindex* _index_)
** _Returns:_ *integer* _guildId_, *string* _guildName_, *integer* _guildAlliance_

* GetCurrentTradingHouseGuildDetails()
** _Returns:_ *integer* _guildId_, *string* _guildName_, *integer* _guildAlliance_

* CanBuyFromTradingHouse(*integer* _guildId_)
** _Returns:_ *bool* _canBuy_

* CanSellOnTradingHouse(*integer* _guildId_)
** _Returns:_ *bool* _canSell_

* GetSelectedTradingHouseGuildId()
** _Returns:_ *integer:nilable* _guildId_

* SelectTradingHouseGuildId(*integer* _guildId_)
** _Returns:_ *bool* _success_

* GetTradingHouseListingCounts()
** _Returns:_ *integer* _currentListingCount_, *integer* _maxListingCount_

* GetTradingHousePostPriceInfo(*integer* _desiredPostPrice_)
** _Returns:_ *integer* _listingFee_, *integer* _tradingHouseCut_, *integer* _expectedProfit_

* GetTradingHouseListingPercentage()
** _Returns:_ *number* _listingPercentage_

* GetTradingHouseCutPercentage()
** _Returns:_ *number* _cutPercentage_

* SetPendingItemPost(*[Bag|#Bag]* _bag_, *integer* _slot_, *integer* _quantity_)

* GetPendingItemPost()
** _Returns:_ *[Bag|#Bag]* _bag_, *integer* _slot_, *integer* _quantity_

* RequestPostItemOnTradingHouse(*[Bag|#Bag]* _bag_, *integer* _slot_, *integer* _quantity_, *number* _postingPrice_)

* SetPendingItemPurchase(*luaindex* _index_)

* ClearPendingItemPurchase()

* ConfirmPendingItemPurchase()

* ClearAllTradingHouseSearchTerms()

* SetTradingHouseFilter(*[TradingHouseFilterType|#TradingHouseFilterType]* _filterType_, *integer:nilable* _data1_, *integer:nilable* _data2_, *integer:nilable* _data3_, *integer:nilable* _data4_, *integer:nilable* _data5_, *integer:nilable* _data6_, *integer:nilable* _data7_, *integer:nilable* _data8_, *integer:nilable* _data9_, *integer:nilable* _data10_, *integer:nilable* _data11_, *integer:nilable* _data12_, *integer:nilable* _data13_, *integer:nilable* _data14_, *integer:nilable* _data15_, *integer:nilable* _data16_, *integer:nilable* _data17_, *integer:nilable* _data18_, *integer:nilable* _data19_, *integer:nilable* _data20_, *integer:nilable* _data21_, *integer:nilable* _data22_, *integer:nilable* _data23_, *integer:nilable* _data24_)

* SetTradingHouseFilterRange(*[TradingHouseFilterType|#TradingHouseFilterType]* _filterType_, *integer:nilable* _minOrExactValue_, *integer:nilable* _maxValue_)

* ExecuteTradingHouseSearch(*integer* _page_, *[TradingHouseSortField|#TradingHouseSortField]* _sortField_, *bool* _sortAscending_)

* GetTradingHouseSearchResultItemInfo(*luaindex* _index_)
** _Returns:_ *textureName* _icon_, *string* _itemName_, *integer* _quality_, *integer* _stackCount_, *string* _sellerName_, *integer* _timeRemaining_, *integer* _purchasePrice_, *[CurrencyType|#CurrencyType]* _currencyType_

* GetTradingHouseSearchResultItemLink(*luaindex* _index_, *[LinkStyle|#LinkStyle]* _linkStyle_)
** _Returns:_ *string* _link_

* RequestTradingHouseListings()

* GetNumTradingHouseListings()
** _Returns:_ *integer* _numListings_

* CancelTradingHouseListing(*luaindex* _index_)

* GetTradingHouseListingItemInfo(*luaindex* _index_)
** _Returns:_ *textureName* _icon_, *string* _itemName_, *integer* _quality_, *integer* _stackCount_, *string* _sellerName_, *integer* _timeRemaining_, *integer* _purchasePrice_

* GetTradingHouseListingItemLink(*luaindex* _index_, *[LinkStyle|#LinkStyle]* _linkStyle_)
** _Returns:_ *string* _link_

* GetEnchantmentSearchCategories(*[ItemType|#ItemType]* _itemType_)
** _Uses variable returns..._
** _Returns:_ *integer* _category_

* GetTradingHouseCooldownRemaining()
** _Returns:_ *integer* _cooldownMilliseconds_

* SetMapToPlayerLocation()
** _Returns:_ *[SetMapResultCode|#SetMapResultCode]* _setMapResult_

* DoesCurrentMapMatchMapForPlayerLocation()
** _Returns:_ *bool* _matches_

* SetMapToMapListIndex(*luaindex* _index_)
** _Returns:_ *[SetMapResultCode|#SetMapResultCode]* _setMapResult_

* GetCurrentMapIndex()
** _Returns:_ *luaindex:nilable* _index_

* GetMapIndexByZoneId(*integer* _zoneId_)
** _Returns:_ *luaindex:nilable* _index_

* GetCyrodiilMapIndex()
** _Returns:_ *luaindex:nilable* _index_

* GetImperialCityMapIndex()
** _Returns:_ *luaindex:nilable* _index_

* GetCurrentMapZoneIndex()
** _Returns:_ *luaindex* _zoneIndex_

* GetZoneNameByIndex(*luaindex* _zoneIndex_)
** _Returns:_ *string* _zoneName_

* GetMapNameByIndex(*luaindex* _mapIndex_)
** _Returns:_ *string* _mapName_

* GetNumMaps()
** _Returns:_ *integer* _numMaps_

* MapZoomOut()
** _Returns:_ *[SetMapResultCode|#SetMapResultCode]* _setMapResult_

* WouldProcessMapClick(*number* _normalizedClickX_, *number* _normalizedClickY_)
** _Returns:_ *bool* _wouldProcess_, *luaindex:nilable* _resultingMapIndex_

* ProcessMapClick(*number* _normalizedClickX_, *number* _normalizedClickY_)
** _Returns:_ *[SetMapResultCode|#SetMapResultCode]* _setMapResult_

* GetMapInfo(*luaindex* _index_)
** _Returns:_ *string* _name_, *[UIMapType|#UIMapType]* _mapType_, *[MapContentType|#MapContentType]* _mapContentType_, *integer* _zoneId_, *string* _description_

* GetZoneDescription(*integer* _zoneIndex_)
** _Returns:_ *string* _description_

* GetZoneNameById(*integer* _zoneId_)
** _Returns:_ *string* _name_

* GetZoneDescriptionById(*integer* _zoneId_)
** _Returns:_ *string* _description_

* GetMapParentCategories(*luaindex* _index_)
** _Uses variable returns..._
** _Returns:_ *string* _categoryName_, *luaindex* _categoryIndex_

* GetMapNumTiles()
** _Returns:_ *integer* _numHorizontalTiles_, *integer* _numVerticalTiles_

* GetMapTileTexture(*luaindex* _tileIndex_)
** _Returns:_ *string* _tileFilename_

* GetMapName()
** _Returns:_ *string* _mapName_

* GetMapType()
** _Returns:_ *[UIMapType|#UIMapType]* _mapType_

* GetMapContentType()
** _Returns:_ *[MapContentType|#MapContentType]* _mapContentType_

* GetMapFilterType()
** _Returns:_ *[MapFilterType|#MapFilterType]* _mapFilterType_

* GetNumMapLocations()
** _Returns:_ *integer* _numMapLocations_

* IsMapLocationVisible(*luaindex* _locationIndex_)
** _Returns:_ *bool* _isVisible_

* GetMapLocationIcon(*luaindex* _locationIndex_)
** _Returns:_ *string* _icon_, *number* _normalizedX_, *number* _normalizedZ_

* GetNumMapLocationTooltipLines(*luaindex* _locationIndex_)
** _Returns:_ *integer* _numLines_

* IsMapLocationTooltipLineVisible(*luaindex* _locationIndex_, *luaindex* _tooltipLineIndex_)
** _Returns:_ *bool* _isVisible_

* GetMapLocationTooltipLineInfo(*luaindex* _locationIndex_, *luaindex* _tooltipLineIndex_)
** _Returns:_ *textureName* _icon_, *string* _name_, *integer* _grouping_, *string* _categoryName_

* GetMapLocationTooltipHeader(*luaindex* _locationIndex_)
** _Returns:_ *string* _header_

* GetMapMouseoverInfo(*number* _normalizedMouseX_, *number* _normalizedMouseY_)
** _Returns:_ *string* _locationName_, *string* _textureFile_, *number* _textureWidthNormalized_, *number* _textureHeightNormalized_, *number* _textureXOffsetNormalized_, *number* _textureYOffsetNormalized_

* GetNumMapKeySections()
** _Returns:_ *integer* _numSections_

* GetMapKeySectionName(*luaindex* _sectionIndex_)
** _Returns:_ *string* _sectionName_

* GetNumMapKeySectionSymbols(*luaindex* _sectionIndex_)
** _Returns:_ *integer* _numSymbols_

* GetMapKeySectionSymbolInfo(*luaindex* _sectionIndex_, *luaindex* _symbolIndex_)
** _Returns:_ *string* _name_, *textureName* _icon_, *string* _tooltip_

* GetMapFloorInfo()
** _Returns:_ *luaindex* _currentFloor_, *integer* _numFloors_

* SetMapFloor(*luaindex* _desiredFloorIndex_)
** _Returns:_ *[SetMapResultCode|#SetMapResultCode]* _setMapResult_

* PingMap(*[MapDisplayPinType|#MapDisplayPinType]* _pingType_, *[MapDisplayType|#MapDisplayType]* _mapDisplayType_, *number* _normalizedX_, *number* _normalizedZ_)

* SetPlayerWaypointByWorldLocation(*integer* _worldX_, *integer* _worldY_, *integer* _worldZ_)
** _Returns:_ *bool* _success_

* RemovePlayerWaypoint()

* RemoveRallyPoint()

* GenerateUnitNameTooltipLine(*string* _unitTag_)
** _Returns:_ *string* _text_, *[InterfaceColorType|#InterfaceColorType]* _interfaceColorType_, *integer* _color_

* GenerateQuestEndingTooltipLine(*luaindex* _questIndex_)
** _Returns:_ *string* _text_, *[InterfaceColorType|#InterfaceColorType]* _interfaceColorType_, *integer* _color_

* GenerateQuestConditionTooltipLine(*luaindex* _questIndex_, *luaindex* _stepIndex_, *luaindex* _conditionIndex_)
** _Returns:_ *string* _text_, *[InterfaceColorType|#InterfaceColorType]* _interfaceColorType_, *integer* _color_

* GenerateMapPingTooltipLine(*[MapDisplayPinType|#MapDisplayPinType]* _mapPingType_, *string* _unitTag_)
** _Returns:_ *string* _text_, *[InterfaceColorType|#InterfaceColorType]* _interfaceColorType_, *integer* _color_

* GenerateAvAObjectiveConditionTooltipLine(*[BattlegroundQueryContextType|#BattlegroundQueryContextType]* _bgQueryType_, *integer* _keepId_, *integer* _objectiveId_, *[ObjectivePinTier|#ObjectivePinTier]* _objectivePinTier_)
** _Returns:_ *string* _text_, *[InterfaceColorType|#InterfaceColorType]* _interfaceColorType_, *integer* _color_

* GenerateMasterWritBaseText(*string* _itemLink_)
** _Returns:_ *string* _description_

* GenerateMasterWritRewardText(*string* _itemLink_)
** _Returns:_ *string* _description_

* GetNumPOIs(*luaindex* _zoneIndex_)
** _Returns:_ *integer* _numPOIs_

* GetPOIInfo(*luaindex* _zoneIndex_, *luaindex* _poiIndex_)
** _Returns:_ *string* _objectiveName_, *integer* _objectiveLevel_, *string* _startDescription_, *string* _finishedDescription_

* GetPOIType(*luaindex* _zoneIndex_, *luaindex* _poiIndex_)
** _Returns:_ *[PointOfInterestType|#PointOfInterestType]* _poiType_

* GetPOIMapInfo(*luaindex* _zoneIndex_, *luaindex* _poiIndex_)
** _Returns:_ *number* _normalizedX_, *number* _normalizedZ_, *[MapDisplayPinType|#MapDisplayPinType]* _poiPinType_, *textureName* _icon_, *bool* _isShownInCurrentMap_, *bool* _linkedCollectibleIsLocked_

* GetCurrentSubZonePOIIndices()
** _Returns:_ *luaindex:nilable* _zoneIndex_, *luaindex:nilable* _poiIndex_

* IsInCyrodiil()
** _Returns:_ *bool* _isInCyrodiil_

* IsInImperialCity()
** _Returns:_ *bool* _isInImperialCity_

* IsInAvAZone()
** _Returns:_ *bool* _isInAvAZone_

* IsInOutlawZone()
** _Returns:_ *bool* _isInOutlawZone_

* IsInJusticeEnabledZone()
** _Returns:_ *bool* _isInJusticeZone_

* IsInTutorialZone()
** _Returns:_ *bool* _isInTutorialZone_

* CanLeaveCurrentLocationViaTeleport()
** _Returns:_ *bool* _canLeaveCurrentLocationViaTeleport_

* DoesCurrentZoneAllowScalingByLevel()
** _Returns:_ *bool* _allowsScaling_

* DoesCurrentZoneHaveTelvarStoneBehavior()
** _Returns:_ *bool* _telvarBehaviorEnabled_

* DoesCurrentZoneAllowBattleLevelScaling()
** _Returns:_ *bool* _allowsBattleLevelScaling_

* GetCurrentZoneLevelScalingConstraints()
** _Returns:_ *[ScaleLevelConstraintType|#ScaleLevelConstraintType]* _scaleLevelContraintType_, *integer* _minScaleLevel_, *integer* _maxScaleLevel_

* GetCollectibleIdForZone(*luaindex* _zoneIndex_)
** _Returns:_ *integer* _collectibleId_

* GetZoneId(*luaindex* _zoneIndex_)
** _Returns:_ *integer* _zoneId_

* GetZoneIndex(*integer* _zoneId_)
** _Returns:_ *luaindex* _zoneIndex_

* GetCadwellProgressionLevel()
** _Returns:_ *[CadwellProgressionLevel|#CadwellProgressionLevel]* _cadwellProgressionLevel_

* GetNumZonesForCadwellProgressionLevel(*[CadwellProgressionLevel|#CadwellProgressionLevel]* _cadwellProgressionLevel_)
** _Returns:_ *integer* _numZones_

* GetCadwellZoneInfo(*[CadwellProgressionLevel|#CadwellProgressionLevel]* _cadwellProgressionLevel_, *luaindex* _zoneIndex_)
** _Returns:_ *string* _zoneName_, *string* _zoneDescription_, *luaindex* _zoneOrder_

* GetNumPOIsForCadwellProgressionLevelAndZone(*[CadwellProgressionLevel|#CadwellProgressionLevel]* _cadwellProgressionLevel_, *luaindex* _zoneIndex_)
** _Returns:_ *integer* _numPOIs_

* GetCadwellZonePOIInfo(*[CadwellProgressionLevel|#CadwellProgressionLevel]* _cadwellProgressionLevel_, *luaindex* _zoneIndex_, *luaindex* _poiIndex_)
** _Returns:_ *string* _poiName_, *string* _poiOpeningText_, *string* _poiClosingText_, *luaindex* _poiOrder_, *bool* _discovered_, *bool* _completed_

* GetPlayerActiveSubzoneName()
** _Returns:_ *string* _subzoneName_

* GetPlayerActiveZoneName()
** _Returns:_ *string* _zoneName_

* GetPlayerLocationName()
** _Returns:_ *string* _mapName_

* IsActiveWorldBattleground()
** _Returns:_ *bool* _isInBattleground_

* IsActiveWorldGroupOwnable()
** _Returns:_ *bool* _isWorldGroupOwnable_

* GuiRender3DPositionToWorldPosition(*number* _renderX_, *number* _renderY_, *number* _renderZ_)
** _Returns:_ *integer* _worldX_, *integer* _worldY_, *integer* _worldZ_

* WorldPositionToGuiRender3DPosition(*integer* _worldX_, *integer* _worldY_, *integer* _worldZ_)
** _Returns:_ *number* _renderX_, *number* _renderY_, *number* _renderZ_

* CanJumpToPlayerInZone(*integer* _zoneId_)
** _Returns:_ *bool* _canJump_, *[JumpToPlayerResult|#JumpToPlayerResult]* _result_

* GetHistoricalKeepTravelNetworkLinkInfo(*luaindex* _linkIndex_, *[BattlegroundQueryContextType|#BattlegroundQueryContextType]* _bgContext_, *number* _historyPercent_)
** _Returns:_ *integer* _linkType_, *integer* _linkOwner_, *integer* _restricedToAlliance_, *number* _startX_, *number* _startY_, *number* _endX_, *number* _endY_

* GetNumFastTravelNodes()
** _Returns:_ *integer* _numFastTravelNodes_

* GetFastTravelNodeInfo(*luaindex* _nodeIndex_)
** _Returns:_ *bool* _known_, *string* _name_, *number* _normalizedX_, *number* _normalizedY_, *textureName* _icon_, *textureName:nilable* _glowIcon_, *[PointOfInterestType|#PointOfInterestType]* _poiType_, *bool* _isShownInCurrentMap_, *bool* _linkedCollectibleIsLocked_

* GetFastTravelNodeOutboundOnlyInfo(*luaindex* _nodeIndex_)
** _Returns:_ *bool* _isOutboundOnly_, *integer* _errorStringId_

* GetFastTravelNodeDrawLevelOffset(*luaindex* _nodeIndex_)
** _Returns:_ *integer* _drawLevelOffset_

* GetFastTravelNodeLinkedCollectibleId(*luaindex* _nodeIndex_)
** _Returns:_ *integer* _collectibleId_

* GetFastTravelNodeHouseId(*luaindex* _nodeIndex_)
** _Returns:_ *integer* _houseId_

* HasCompletedFastTravelNodePOI(*luaindex* _nodeIndex_)
** _Returns:_ *bool* _hasCompletedPOI_

* FastTravelToNode(*luaindex* _nodeIndex_)

* GetRecallCost(*luaindex* _nodeIndex_)
** _Returns:_ *integer* _cost_

* GetRecallCurrency(*luaindex* _nodeIndex_)
** _Returns:_ *[CurrencyType|#CurrencyType]* _currency_

* GetNumObjectives()
** _Returns:_ *integer* _num_

* GetObjectiveIdsForIndex(*luaindex* _index_)
** _Returns:_ *integer* _keepId_, *integer* _objectiveId_, *[BattlegroundQueryContextType|#BattlegroundQueryContextType]* _battlegroundContext_

* DoesObjectiveExist(*integer* _keepId_, *integer* _objectiveId_, *[BattlegroundQueryContextType|#BattlegroundQueryContextType]* _battlegroundContext_)
** _Returns:_ *bool* _exists_

* GetObjectiveType(*integer* _keepId_, *integer* _objectiveId_, *[BattlegroundQueryContextType|#BattlegroundQueryContextType]* _battlegroundContext_)
** _Returns:_ *[ObjectiveType|#ObjectiveType]* _objectiveType_

* GetObjectiveControlState(*integer* _keepId_, *integer* _objectiveId_, *[BattlegroundQueryContextType|#BattlegroundQueryContextType]* _battlegroundContext_)
** _Returns:_ *[ObjectiveControlState|#ObjectiveControlState]* _controlState_

* GetObjectiveInfo(*integer* _keepId_, *integer* _objectiveId_, *[BattlegroundQueryContextType|#BattlegroundQueryContextType]* _battlegroundContext_)
** _Returns:_ *string* _objectiveName_, *[ObjectiveType|#ObjectiveType]* _objectiveType_, *[ObjectiveControlState|#ObjectiveControlState]* _objectiveState_

* GetObjectivePinInfo(*integer* _keepId_, *integer* _objectiveId_, *[BattlegroundQueryContextType|#BattlegroundQueryContextType]* _battlegroundContext_)
** _Returns:_ *[MapDisplayPinType|#MapDisplayPinType]* _pinType_, *number* _currentNormalizedX_, *number* _currentNormalizedY_, *bool* _continuousUpdate_

* GetObjectiveSpawnPinInfo(*integer* _keepId_, *integer* _objectiveId_, *[BattlegroundQueryContextType|#BattlegroundQueryContextType]* _battlegroundContext_)
** _Returns:_ *[MapDisplayPinType|#MapDisplayPinType]* _pinType_, *number* _spawnNormalizedX_, *number* _spawnNormalizedY_

* GetObjectiveAuraPinInfo(*integer* _keepId_, *integer* _objectiveId_, *[BattlegroundQueryContextType|#BattlegroundQueryContextType]* _battlegroundContext_)
** _Returns:_ *[MapDisplayPinType|#MapDisplayPinType]* _pinType_, *number* _red_, *number* _green_, *number* _blue_

* GetObjectiveReturnPinInfo(*integer* _keepId_, *integer* _objectiveId_, *[BattlegroundQueryContextType|#BattlegroundQueryContextType]* _battlegroundContext_)
** _Returns:_ *[MapDisplayPinType|#MapDisplayPinType]* _pinType_, *number* _returnNormalizedX_, *number* _returnNormalizedY_, *bool* _continuousUpdate_

* GetObjectiveDesignation(*integer* _keepId_, *integer* _objectiveId_, *[BattlegroundQueryContextType|#BattlegroundQueryContextType]* _battlegroundContext_)
** _Returns:_ *[ObjectiveDesignation|#ObjectiveDesignation]* _designation_

* IsBattlegroundObjective(*integer* _keepId_, *integer* _objectiveId_, *[BattlegroundQueryContextType|#BattlegroundQueryContextType]* _battlegroundContext_)
** _Returns:_ *bool* _isInBattleground_

* IsCarryableObjectiveCarriedByLocalPlayer(*integer* _keepId_, *integer* _objectiveId_, *[BattlegroundQueryContextType|#BattlegroundQueryContextType]* _battlegroundContext_)
** _Returns:_ *bool* _isCarried_

* IsCaptureAreaObjectiveCaptured(*integer* _keepId_, *integer* _objectiveId_, *[BattlegroundQueryContextType|#BattlegroundQueryContextType]* _battlegroundContext_)
** _Returns:_ *bool* _isCaptured_

* GetCaptureAreaObjectiveOwner(*integer* _keepId_, *integer* _objectiveId_, *[BattlegroundQueryContextType|#BattlegroundQueryContextType]* _battlegroundContext_)
** _Returns:_ *[Alliance|#Alliance]* _ownerAlliance_

* GetCaptureAreaObjectiveLastInfluenceState(*integer* _keepId_, *integer* _objectiveId_, *[BattlegroundQueryContextType|#BattlegroundQueryContextType]* _battlegroundContext_)
** _Returns:_ *[Alliance|#Alliance]* _alliance_, *bool* _wereInfluenceSourcesInRangeOfCaptureArea_

* GetCarryableObjectiveHoldingAllianceInfo(*integer* _keepId_, *integer* _objectiveId_, *[BattlegroundQueryContextType|#BattlegroundQueryContextType]* _battlegroundContext_)
** _Returns:_ *[Alliance|#Alliance]* _holdingAlliance_, *[Alliance|#Alliance]* _lastHoldingAlliance_

* GetCarryableObjectiveHoldingCharacterInfo(*integer* _keepId_, *integer* _objectiveId_, *[BattlegroundQueryContextType|#BattlegroundQueryContextType]* _battlegroundContext_)
** _Returns:_ *string* _rawCharacterName_, *string* _displayName_, *integer* _classId_

* GetCarryableObjectiveLastHoldingCharacterInfo(*integer* _keepId_, *integer* _objectiveId_, *[BattlegroundQueryContextType|#BattlegroundQueryContextType]* _battlegroundContext_)
** _Returns:_ *string* _rawCharacterName_, *string* _displayName_, *integer* _classId_

* GetCaptureFlagObjectiveOriginalOwningAlliance(*integer* _keepId_, *integer* _objectiveId_, *[BattlegroundQueryContextType|#BattlegroundQueryContextType]* _battlegroundContext_)
** _Returns:_ *[Alliance|#Alliance]* _originalOwningAlliance_

* GetArtifactScrollObjectiveOriginalOwningAlliance(*integer* _keepId_, *integer* _objectiveId_, *[BattlegroundQueryContextType|#BattlegroundQueryContextType]* _battlegroundContext_)
** _Returns:_ *[Alliance|#Alliance]* _originalOwningAlliance_

* GetKeepThatHasCapturedThisArtifactScrollObjective(*integer* _keepId_, *integer* _objectiveId_, *[BattlegroundQueryContextType|#BattlegroundQueryContextType]* _battlegroundContext_)
** _Returns:_ *integer* _capturedAtKeepId_

* GetArtifactReturnObjectiveOwner(*integer* _keepId_, *integer* _objectiveId_, *[BattlegroundQueryContextType|#BattlegroundQueryContextType]* _battlegroundContext_)
** _Returns:_ *[Alliance|#Alliance]* _ownerAlliance_

* GetReturnObjectiveOwner(*integer* _keepId_, *integer* _objectiveId_, *[BattlegroundQueryContextType|#BattlegroundQueryContextType]* _battlegroundContext_)
** _Returns:_ *[Alliance|#Alliance]* _ownerAlliance_

* GetAvAArtifactScore(*integer* _campaignId_, *[Alliance|#Alliance]* _alliance_, *[ObjectiveType|#ObjectiveType]* _artifactType_)
** _Returns:_ *bool* _allOwnHeld_, *integer* _enemyHeld_

* GetNumArtifactScoreBonuses(*[Alliance|#Alliance]* _alliance_, *[ObjectiveType|#ObjectiveType]* _artifactType_)
** _Returns:_ *integer* _numBonuses_

* GetArtifactScoreBonusInfo(*[Alliance|#Alliance]* _alliance_, *[ObjectiveType|#ObjectiveType]* _artifactType_, *luaindex* _index_)
** _Returns:_ *string* _name_, *textureName* _icon_, *string* _description_

* IsObjectiveObjectVisible(*integer* _keepId_, *integer* _objectiveId_, *[BattlegroundQueryContextType|#BattlegroundQueryContextType]* _battlegroundContext_)
** _Returns:_ *bool* _isVisible_

* IsObjectiveEnabled(*integer* _keepId_, *integer* _objectiveId_, *[BattlegroundQueryContextType|#BattlegroundQueryContextType]* _battlegroundContext_)
** _Returns:_ *bool* _isEnabled_

* GetKeepArtifactObjectiveId(*integer* _keepId_)
** _Returns:_ *integer* _objectiveId_

* GetHistoricalAvAObjectivePinInfo(*integer* _keepId_, *integer* _objectiveId_, *[BattlegroundQueryContextType|#BattlegroundQueryContextType]* _battlegroundContext_, *number* _historyPercent_)
** _Returns:_ *[MapDisplayPinType|#MapDisplayPinType]* _pinType_, *number* _currentNormalizedX_, *number* _currentNormalizedY_, *bool* _continuousUpdate_

* DoesObjectivePassCompassVisibilitySubzoneCheck(*integer* _keepId_, *integer* _objectiveId_, *[BattlegroundQueryContextType|#BattlegroundQueryContextType]* _battlegroundContext_)
** _Returns:_ *bool* _doesPassVisiblityCheck_

* GetBattlegroundGameType(*integer* _battlegroundId_)
** _Returns:_ *[BattlegroundGameType|#BattlegroundGameType]* _gameType_

* GetBattlegroundName(*integer* _battlegroundId_)
** _Returns:_ *string* _name_

* GetBattlegroundDescription(*integer* _battlegroundId_)
** _Returns:_ *string* _description_

* GetBattlegroundInfoTexture(*integer* _battlegroundId_)
** _Returns:_ *textureName* _path_

* GetScoreToWinBattleground(*integer* _battlegroundId_)
** _Returns:_ *integer* _result_

* GetBattlegroundNearingVictoryPercent(*integer* _battlegroundId_)
** _Returns:_ *number* _nearingVictoryPercent_

* GetCurrentBattlegroundId()
** _Returns:_ *integer* _battlegroundId_

* GetBattlegroundNumUsedMedals(*integer* _battlegroundId_)
** _Returns:_ *integer* _numMedals_

* GetBattlegroundMedalIdByIndex(*integer* _battlegroundId_, *luaindex* _medalIndex_)
** _Returns:_ *integer* _medalId_

* GetMedalInfo(*integer* _medalId_)
** _Returns:_ *string* _name_, *textureName* _iconTexture_, *string* _condition_, *integer* _scoreReward_

* GetMedalName(*integer* _medalId_)
** _Returns:_ *string* _name_

* GetMedalScoreReward(*integer* _medalId_)
** _Returns:_ *integer* _scoreReward_

* LeaveBattleground()

* GetCurrentBattlegroundShutdownTimer()
** _Returns:_ *integer:nilable* _timeLeftMS_

* QueryBattlegroundLeaderboardData()

* GetNextBattlegroundLeaderboardType(*[BattlegroundLeaderboardType|#BattlegroundLeaderboardType]:nilable* _lastBattlegroundLeaderboardType_)
** _Returns:_ *[BattlegroundLeaderboardType|#BattlegroundLeaderboardType]:nilable* _nextBattlegroundLeaderboardType_

* GetNumBattlegroundLeaderboardEntries(*[BattlegroundLeaderboardType|#BattlegroundLeaderboardType]* _battlegroundLeaderboardType_)
** _Returns:_ *integer* _numLeaderboardEntries_

* GetBattlegroundLeaderboardEntryInfo(*[BattlegroundLeaderboardType|#BattlegroundLeaderboardType]* _battlegroundLeaderboardType_, *luaindex* _entryIndex_)
** _Returns:_ *integer* _rank_, *string* _displayName_, *string* _characterName_, *integer* _score_

* GetBattlegroundLeaderboardLocalPlayerInfo(*[BattlegroundLeaderboardType|#BattlegroundLeaderboardType]* _lastBattlegroundLeaderboardType_)
** _Returns:_ *integer* _currentRank_, *integer* _currentScore_

* GetBattlegroundLeaderboardsSchedule()
** _Returns:_ *integer* _secondsUntilEnd_, *integer* _secondsUntilNextStart_

* GetNumScoreboardEntries()
** _Returns:_ *integer* _numItems_

* GetScoreboardEntryInfo(*luaindex* _slotIndex_)
** _Returns:_ *string* _characterName_, *string* _displayName_, *[BattlegroundAlliance|#BattlegroundAlliance]* _alliance_, *bool* _isLocalPlayer_

* GetScoreboardEntryBattlegroundAlliance(*luaindex* _slotIndex_)
** _Returns:_ *[BattlegroundAlliance|#BattlegroundAlliance]* _alliance_

* GetScoreboardEntryClassId(*luaindex* _slotIndex_)
** _Returns:_ *integer* _classId_

* GetScoreboardEntryScoreByType(*luaindex* _slotIndex_, *[ScoreTrackerEntryType|#ScoreTrackerEntryType]* _scoreType_)
** _Returns:_ *integer* _score_

* GetNextScoreboardEntryMedalId(*luaindex* _slotIndex_, *integer:nilable* _lastMedalId_)
** _Returns:_ *integer:nilable* _nextMedalId_

* GetScoreboardEntryNumEarnedMedalsById(*luaindex* _slotIndex_, *integer* _medalId_)
** _Returns:_ *integer* _count_

* GetScoringTeam()
** _Returns:_ *integer* _result_

* GetCurrentBattlegroundScore(*[BattlegroundAlliance|#BattlegroundAlliance]* _alliance_)
** _Returns:_ *integer* _score_

* GetCurrentBattlegroundState()
** _Returns:_ *[BattlegroundState|#BattlegroundState]* _result_

* IsCurrentBattlegroundStateTimed()
** _Returns:_ *bool* _isTimed_

* GetCurrentBattlegroundStateTimeRemaining()
** _Returns:_ *integer* _timeRemaining_

* GetScoreboardPlayerEntryIndex()
** _Returns:_ *luaindex* _playerIndex_

* IsInCampaign()
** _Returns:_ *bool* _inCampaign_

* DoesCampaignHaveEmperor(*integer* _campaignId_)
** _Returns:_ *bool* _hasEmperor_

* GetCampaignEmperorInfo(*integer* _campaignId_)
** _Returns:_ *integer* _emperorAlliance_, *string* _emperorCharacterName_, *string* _emperorDisplayName_

* GetCampaignEmperorReignDuration(*integer* _campaignId_)
** _Returns:_ *integer* _durationInSeconds_

* GetCampaignAbdicationStatus(*integer* _campaignId_)
** _Returns:_ *integer* _abdicatedAlliance_, *string* _abdicatedCharacterName_, *string* _abdicatedDisplayName_

* GetEmperorAllianceBonusInfo(*integer* _campaignId_, *[Alliance|#Alliance]* _alliance_)
** _Returns:_ *string* _name_, *textureName* _icon_, *string* _description_

* GetCampaignReassignCooldown()
** _Returns:_ *integer* _cooldownSeconds_

* GetCampaignGuestCooldown()
** _Returns:_ *integer* _cooldownSeconds_

* GetCampaignReassignCost(*[CampaignReassignmentRequestType|#CampaignReassignmentRequestType]* _reassignType_)
** _Returns:_ *integer* _cost_

* GetCurrentCampaignId()
** _Returns:_ *integer* _currentCampaignId_

* GetAssignedCampaignId()
** _Returns:_ *integer* _assignedCampaignId_

* GetGuestCampaignId()
** _Returns:_ *integer* _campaignId_

* GetNumFreeAnytimeCampaignReassigns()
** _Returns:_ *integer* _reassignCount_

* GetNumFreeEndCampaignReassigns()
** _Returns:_ *integer* _reassignCount_

* GetPreferredCampaign()
** _Returns:_ *integer* _preferredCampaign_

* GetCampaignPreference()
** _Returns:_ *[CampaignPreferenceType|#CampaignPreferenceType]* _campaignPreference_

* SetCampaignPreference(*[CampaignPreferenceType|#CampaignPreferenceType]* _campaignPreference_)

* AssignCampaignToPlayer(*integer* _campaignId_, *[CampaignReassignmentRequestType|#CampaignReassignmentRequestType]* _reassignOnEnd_)

* GetCampaignUnassignCooldown()
** _Returns:_ *integer* _cooldownSeconds_

* GetCampaignUnassignCost(*[CampaignUnassignRequestType|#CampaignUnassignRequestType]* _campaignUnassignType_)
** _Returns:_ *integer* _cost_

* GetNumFreeAnytimeCampaignUnassigns()
** _Returns:_ *integer* _unassignCount_

* UnassignCampaignForPlayer(*[CampaignUnassignRequestType|#CampaignUnassignRequestType]* _campaignUnassignType_)

* QueryCampaignSelectionData()

* GetCampaignSequenceId(*integer* _campaignId_)
** _Returns:_ *integer* _sequenceId_

* QueryCampaignLeaderboardData()

* GetLeaderboardCampaignSequenceId(*integer* _campaignId_)
** _Returns:_ *integer* _campaignSequenceId_

* GetCampaignLeaderboardMaxRank(*integer* _campaignId_)
** _Returns:_ *integer* _maxRank_

* GetNumCampaignLeaderboardEntries(*integer* _campaignId_)
** _Returns:_ *integer* _entryCount_

* GetNumCampaignAllianceLeaderboardEntries(*integer* _campaignId_, *integer* _allianceId_)
** _Returns:_ *integer* _entryCount_

* GetCampaignLeaderboardEntryInfo(*integer* _campaignId_, *luaindex* _entryIndex_)
** _Returns:_ *bool* _isPlayer_, *integer* _ranking_, *string* _charName_, *integer* _alliancePoints_, *integer* _classId_, *integer* _allianceId_, *string* _displayName_

* GetCampaignAllianceLeaderboardEntryInfo(*integer* _campaignId_, *integer* _allianceId_, *luaindex* _entryIndex_)
** _Returns:_ *bool* _isPlayer_, *integer* _ranking_, *string* _charName_, *integer* _alliancePoints_, *integer* _classId_, *string* _displayName_

* GetPlayerCampaignRewardTierInfo(*integer* _campaignId_)
** _Returns:_ *integer* _earnedTier_, *integer* _nextTierProgress_, *integer* _nextTierTotal_

* GetNumSelectionCampaigns()
** _Returns:_ *integer* _campaignCount_

* GetSelectionCampaignAllianceScore(*luaindex* _campaignIndex_, *integer* _alliance_)
** _Returns:_ *integer* _score_

* GetSelectionCampaignId(*luaindex* _campaignIndex_)
** _Returns:_ *integer* _campaignId_

* GetSelectionCampaignTimes(*luaindex* _campaignIndex_)
** _Returns:_ *integer* _secondsUntilCampaignStart_, *integer* _secondsUntilCampaignEnd_

* GetSelectionCampaignUnderdogLeaderAlliance(*luaindex* _campaignIndex_)
** _Returns:_ *integer* _alliance_

* GetNumSelectionCampaignFriends(*luaindex* _campaignIndex_)
** _Returns:_ *integer* _numFriends_

* GetNumSelectionCampaignGuildMembers(*luaindex* _campaignIndex_)
** _Returns:_ *integer* _numGuilds_

* GetNumSelectionCampaignGroupMembers(*luaindex* _campaignIndex_)
** _Returns:_ *integer* _numGroupmates_

* GetSelectionCampaignPopulationData(*luaindex* _campaignIndex_, *integer* _alliance_)
** _Returns:_ *[CampaignPopulationType|#CampaignPopulationType]* _currentPopulationEstimate_

* GetSelectionCampaignQueueWaitTime(*luaindex* _campaignIndex_)
** _Returns:_ *integer* _queueWaitTimeSeconds_

* DoesPlayerMeetCampaignRequirements(*integer* _campaignId_)
** _Returns:_ *bool* _meetsJoiningRequirements_

* GetCampaignRulesetId(*integer* _campaignId_)
** _Returns:_ *integer* _rulesetId_

* GetCampaignRulesetName(*integer* _campaignId_)
** _Returns:_ *string* _name_

* GetCampaignRulesetType(*integer* _rulesetId_)
** _Returns:_ *[CampaignRulesetType|#CampaignRulesetType]* _rulesetType_

* GetCampaignRulesetDescription(*integer* _rulesetId_)
** _Returns:_ *string* _description_

* GetNumCampaignSocialConnections()
** _Returns:_ *integer* _connectionCount_

* GetCurrentCampaignLoyaltyStreak()
** _Returns:_ *integer* _currentLoyaltyStreak_

* GetCampaignRulesetNumImperialKeeps(*integer* _rulesetId_, *[Alliance|#Alliance]* _alliance_)
** _Returns:_ *integer* _numKeeps_

* GetCampaignRulesetImperialKeepId(*integer* _rulesetId_, *[Alliance|#Alliance]* _alliance_, *luaindex* _index_)
** _Returns:_ *integer* _keepId_

* GetCampaignRulesetImperialAccessRule(*integer* _rulesetId_)
** _Returns:_ *[ImperialCityAccessRulesType|#ImperialCityAccessRulesType]* _accessRuleType_

* GetCampaignRulsetMinEmperorAlliancePoints(*integer* _rulesetId_, *[Alliance|#Alliance]* _alliance_)
** _Returns:_ *integer* _minPoints_

* GetCampaignRulesetDurationInSeconds(*integer* _rulesetId_)
** _Returns:_ *integer* _duration_

* DoesCurrentCampaignRulesetAllowChampionPoints()
** _Returns:_ *bool* _isNoChampionPointsCampaign_

* RegisterForAssignedCampaignData()

* UnregisterForAssignedCampaignData()

* ResetCampaignHistoryWindow(*[BattlegroundQueryContextType|#BattlegroundQueryContextType]* _battlegroundContext_, *number* _currentHistoryPercent_)
** _Returns:_ *bool* _requiresRebuild_

* GetCampaignHistoryWindow(*[BattlegroundQueryContextType|#BattlegroundQueryContextType]* _battlegroundContext_)
** _Returns:_ *integer* _windowStartSecsAgo_, *integer* _windowEndSecsAgo_

* DoesHistoryRequireMapRebuild(*[BattlegroundQueryContextType|#BattlegroundQueryContextType]* _battlegroundContext_, *number* _oldHistoryPercent_, *number* _newHistoryPercent_)
** _Returns:_ *bool* _needsRebuild_

* DoesAllianceHaveImperialCityAccess(*integer* _campaignId_, *[Alliance|#Alliance]* _alliance_)
** _Returns:_ *bool* _hasAccess_

* IsUnderpopBonusEnabled(*integer* _campaignId_, *[Alliance|#Alliance]* _alliance_)
** _Returns:_ *bool* _isBonusEnabled_

* IsLocalBattlegroundContext(*integer* _battlegroundContext_)
** _Returns:_ *bool* _isLocal_

* IsAssignedBattlegroundContext(*integer* _battlegroundContext_)
** _Returns:_ *bool* _isAssigned_

* DoBattlegroundContextsIntersect(*integer* _context1_, *integer* _context2_)
** _Returns:_ *bool* _intersects_

* GetNumKillLocations()
** _Returns:_ *integer* _numLocations_

* GetKillLocationPinInfo(*luaindex* _index_)
** _Returns:_ *integer* _pinType_, *number* _normalizedX_, *number* _normalizedY_

* QueueForCampaign(*integer* _campaignId_, *bool* _queueAsGroup_)

* LeaveCampaignQueue(*integer* _campaignId_, *bool* _queueAsGroup_)

* GetNumCampaignQueueEntries()
** _Returns:_ *integer* _entryCount_

* IsQueuedForCampaign(*integer* _campaignId_, *bool* _queueAsGroup_)
** _Returns:_ *bool* _isQueued_

* GetCampaignQueueEntry(*luaindex* _entryIndex_)
** _Returns:_ *integer* _campaignId_, *bool* _queueAsGroup_

* GetSecondsInCampaignQueue(*integer* _campaignId_, *bool* _queueAsGroup_)
** _Returns:_ *integer* _timeInQueueInSeconds_

* GetCampaignQueuePosition(*integer* _campaignId_, *bool* _queueAsGroup_)
** _Returns:_ *integer* _queuePosition_

* GetCampaignQueueRemainingConfirmationSeconds(*integer* _campaignId_, *bool* _queueAsGroup_)
** _Returns:_ *integer* _confirmationTimeRemainingInSeconds_

* GetCampaignQueueState(*integer* _campaignId_, *bool* _queueAsGroup_)
** _Returns:_ *[CampaignQueueRequestStateType|#CampaignQueueRequestStateType]* _currentState_

* ConfirmCampaignEntry(*integer* _campaignId_, *bool* _queueAsGroup_, *bool* _accept_)

* GetCampaignQueueConfirmationDuration()
** _Returns:_ *integer* _numSeconds_

* GetStoreEntryInfo(*luaindex* _entryIndex_)
** _Returns:_ *textureName* _icon_, *string* _name_, *integer* _stack_, *integer* _price_, *integer* _sellPrice_, *bool* _meetsRequirementsToBuy_, *bool* _meetsRequirementsToUse_, *integer* _quality_, *bool* _questNameColor_, *integer* _currencyType1_, *integer* _currencyQuantity1_, *integer* _currencyType2_, *integer* _currencyQuantity2_, *[StoreEntryType|#StoreEntryType]* _entryType_

* GetStoreEntryBuyRequirementErrorId(*luaindex* _entryIndex_)
** _Returns:_ *integer* _errorId_

* GetStoreCollectibleInfo(*luaindex* _entryIndex_)
** _Returns:_ *integer* _collectibleId_, *bool* _locked_

* GetStoreEntryHouseTemplateId(*luaindex* _entryIndex_)
** _Returns:_ *integer* _houseTemplateId_

* GetStoreEntryQuestItemId(*luaindex* _entryIndex_)
** _Returns:_ *integer* _questItemId_

* GetNumStoreItems()
** _Returns:_ *integer* _numItems_

* GetNumBuybackItems()
** _Returns:_ *integer* _numBuybackItems_

* GetStoreCurrencyTypes()
** _Returns:_ *bool* _usesMoney_, *bool* _usesAlliancePoints_, *bool* _usesTelvarStones_, *bool* _usesWritVouchers_

* GetStoreItemLink(*luaindex* _entryIndex_, *[LinkStyle|#LinkStyle]* _linkStyle_)
** _Returns:_ *string* _link_

* GetStoreEntryTypeInfo(*luaindex* _entryIndex_)
** _Uses variable returns..._
** _Returns:_ *[ItemFilterType|#ItemFilterType]* _itemFilterType_

* GetStoreEntryStatValue(*luaindex* _entryIndex_)
** _Returns:_ *integer* _statValue_

* GetStoreEntryMaxBuyable(*luaindex* _entryIndex_)
** _Returns:_ *integer* _quantity_

* GetBuybackItemInfo(*luaindex* _entryIndex_)
** _Returns:_ *textureName* _icon_, *string* _name_, *integer* _stack_, *integer* _price_, *integer* _quality_, *bool* _meetsRequirementsToEquip_

* GetBuybackItemLink(*luaindex* _entryIndex_, *[LinkStyle|#LinkStyle]* _linkStyle_)
** _Returns:_ *string* _link_

* BuyStoreItem(*luaindex* _entryIndex_, *integer* _quantity_)

* BuybackItem(*luaindex* _entryIndex_)

* SellInventoryItem(*[Bag|#Bag]* _bagId_, *integer* _slotIndex_, *integer* _quantity_)

* SellAllJunk()

* CloseStore()

* RepairAll()

* RepairItem(*[Bag|#Bag]* _bagId_, *integer* _slotIndex_)

* LaunderItem(*[Bag|#Bag]* _bagId_, *integer* _slotIndex_, *integer* _quantity_)

* IsStoreEmpty()
** _Returns:_ *bool* _isEmpty_

* CanStoreRepair()
** _Returns:_ *bool* _canRepair_

* LootAll(*bool* _ignoreStolenItems_)

* GetLootItemLink(*integer* _lootId_, *[LinkStyle|#LinkStyle]* _linkStyle_)
** _Returns:_ *string* _link_

* GetLootItemType(*integer* _lootId_)
** _Returns:_ *[LootItemType|#LootItemType]* _itemType_

* LootItemById(*integer* _lootId_)

* LootCurrency(*[CurrencyType|#CurrencyType]* _type_)

* LootMoney()

* EndLooting()

* IsLooting()
** _Returns:_ *bool* _isLooting_

* GetLootTargetInfo()
** _Returns:_ *string* _name_, *[InteractTargetType|#InteractTargetType]* _targetType_, *string* _actionName_, *bool* _isOwned_

* GetLootItemInfo(*luaindex* _lootIndex_)
** _Returns:_ *integer* _lootId_, *string* _name_, *textureName* _icon_, *integer* _count_, *integer* _quality_, *integer* _value_, *bool* _isQuest_, *bool* _stolen_, *[LootItemType|#LootItemType]* _itemType_

* GetLootCurrency(*[CurrencyType|#CurrencyType]* _type_)
** _Returns:_ *integer* _unownedCurrency_, *integer* _ownedCurrency_

* GetLootMoney()
** _Returns:_ *integer* _unownedMoney_, *integer* _ownedMoney_

* GetLootQuestItemId(*integer* _lootId_)
** _Returns:_ *integer* _questItemId_

* GetKeepType(*integer* _keepId_)
** _Returns:_ *integer* _keepType_

* GetNumKeeps()
** _Returns:_ *integer* _numKeeps_

* GetAvAKeepScore(*integer* _campaignId_, *integer* _alliance_)
** _Returns:_ *bool* _isAllianceHoldingAllNativeKeeps_, *integer* _numEnemyKeepsThisAllianceHolds_, *integer* _numNativeKeepsThisAllianceHolds_, *integer* _totalNativeKeepsInThisAlliancesArea_

* GetAvAKeepsHeld(*integer* _campaignId_, *integer* _alliance_)
** _Returns:_ *integer* _keepsHeld_

* GetNumKeepScoreBonuses()
** _Returns:_ *integer* _numBonuses_

* GetKeepScoreBonusInfo(*luaindex* _index_)
** _Returns:_ *string* _name_, *textureName* _icon_, *string* _description_

* GetKeepPinInfo(*integer* _keepId_, *[BattlegroundQueryContextType|#BattlegroundQueryContextType]* _battlegroundContext_)
** _Returns:_ *integer* _pinType_, *number* _normalizedX_, *number* _normalizedY_

* GetKeepName(*integer* _keepId_)
** _Returns:_ *string* _keepName_

* GetKeepAlliance(*integer* _keepId_, *[BattlegroundQueryContextType|#BattlegroundQueryContextType]* _battlegroundContext_)
** _Returns:_ *integer* _alliance_

* GetResourceKeepForKeep(*integer* _parentKeepId_, *[KeepResourceType|#KeepResourceType]* _resourceType_)
** _Returns:_ *integer* _keepId_

* GetKeepResourceLevel(*integer* _keepId_, *[BattlegroundQueryContextType|#BattlegroundQueryContextType]* _battlegroundContext_, *[KeepResourceType|#KeepResourceType]* _resourceType_)
** _Returns:_ *integer* _resourceLevel_

* GetKeepResourceType(*integer* _keepId_)
** _Returns:_ *[KeepResourceType|#KeepResourceType]* _resourceType_

* GetKeepResourceInfo(*integer* _keepId_, *[BattlegroundQueryContextType|#BattlegroundQueryContextType]* _battlegroundContext_, *[KeepResourceType|#KeepResourceType]* _resourceType_, *integer* _level_)
** _Returns:_ *integer* _currentAmount_, *integer* _amountForNextLevel_, *integer* _upkeepPerMinute_

* GetKeepUpgradeInfo(*integer* _keepId_, *[BattlegroundQueryContextType|#BattlegroundQueryContextType]* _battlegroundContext_, *[KeepUpgradePath|#KeepUpgradePath]* _upgradePath_, *integer* _level_)
** _Returns:_ *integer* _currentAmount_, *integer* _amountForNextLevel_, *integer* _upkeepPerMinute_

* GetKeepProductionLevel(*integer* _keepId_, *[BattlegroundQueryContextType|#BattlegroundQueryContextType]* _battlegroundContext_)
** _Returns:_ *integer* _productionLevel_

* GetKeepDefensiveLevel(*integer* _keepId_, *[BattlegroundQueryContextType|#BattlegroundQueryContextType]* _battlegroundContext_)
** _Returns:_ *integer* _defensiveLevel_

* GetSecondsUntilKeepClaimAvailable(*integer* _keepId_, *[BattlegroundQueryContextType|#BattlegroundQueryContextType]* _battlegroundContext_)
** _Returns:_ *integer* _secondsUntilAvailable_

* GetGuildClaimInteractionKeepId()
** _Returns:_ *integer* _keepId_

* GetGuildReleaseInteractionKeepId()
** _Returns:_ *integer* _keepId_

* CancelKeepGuildClaimInteraction()

* CancelKeepGuildReleaseInteraction()

* GetHistoricalKeepUnderAttack(*integer* _keepId_, *[BattlegroundQueryContextType|#BattlegroundQueryContextType]* _battlegroundContext_, *number* _historyPercent_)
** _Returns:_ *bool* _underAttack_

* GetHistoricalKeepPinInfo(*integer* _keepId_, *[BattlegroundQueryContextType|#BattlegroundQueryContextType]* _battlegroundContext_, *number* _historyPercent_)
** _Returns:_ *integer* _pinType_, *number* _normalizedX_, *number* _normalizedY_

* GetHistoricalKeepAlliance(*integer* _keepId_, *[BattlegroundQueryContextType|#BattlegroundQueryContextType]* _battlegroundContext_, *number* _historyPercent_)
** _Returns:_ *integer* _alliance_

* GetInteractionKeepId()
** _Returns:_ *integer* _keepId_

* GetKeepUnderAttack(*integer* _keepId_, *[BattlegroundQueryContextType|#BattlegroundQueryContextType]* _battlegroundContext_)
** _Returns:_ *bool* _underAttack_

* GetKeepUpgradeRate(*integer* _keepId_, *[BattlegroundQueryContextType|#BattlegroundQueryContextType]* _battlegroundContext_, *[KeepUpgradeLine|#KeepUpgradeLine]* _upgradeLine_)
** _Returns:_ *integer* _rate_

* GetClaimedKeepGuildName(*integer* _keepId_, *[BattlegroundQueryContextType|#BattlegroundQueryContextType]* _battlegroundContext_)
** _Returns:_ *string* _guildName_

* GetMaxKeepSieges(*integer* _keepId_, *[BattlegroundQueryContextType|#BattlegroundQueryContextType]* _battlegroundContext_)
** _Returns:_ *integer* _maxSiege_

* GetMaxKeepNPCs(*integer* _keepId_, *[BattlegroundQueryContextType|#BattlegroundQueryContextType]* _battlegroundContext_)
** _Returns:_ *integer* _maxNPC_

* GetNumFriendlyKeepNPCs(*integer* _keepId_, *[BattlegroundQueryContextType|#BattlegroundQueryContextType]* _battlegroundContext_)
** _Returns:_ *integer* _numFriendlyNPC_

* GetNumSieges(*integer* _keepId_, *[BattlegroundQueryContextType|#BattlegroundQueryContextType]* _battlegroundContext_, *integer* _alliance_)
** _Returns:_ *integer* _numSieges_

* GetKeepKeysByIndex(*luaindex* _index_)
** _Returns:_ *integer* _keepId_, *integer* _battlegroundContext_

* IsKeepTypeClaimable(*[KeepType|#KeepType]* _keepType_)
** _Returns:_ *bool* _isClaimable_

* GetDistrictOwnershipTelVarBonusPercent(*integer* _keepId_, *[BattlegroundQueryContextType|#BattlegroundQueryContextType]* _battlegroundContext_)
** _Returns:_ *integer* _districtOwnershipTelVarBonusPercent_

* DoesKeepPassCompassVisibilitySubzoneCheck(*integer* _keepId_, *[BattlegroundQueryContextType|#BattlegroundQueryContextType]* _battlegroundContext_)
** _Returns:_ *bool* _doesPassVisibilityCheck_

* GetNumTitles()
** _Returns:_ *integer* _titleCount_

* GetTitle(*luaindex* _titleIndex_)
** _Returns:_ *string* _titleString_

* GetCurrentTitleIndex()
** _Returns:_ *luaindex:nilable* _titleIndex_

* SelectTitle(*luaindex:nilable* _titleIndex_)

* AcceptResurrect()

* DeclineResurrect()

* IsResurrectPending()
** _Returns:_ *bool* _resurrectPending_

* GetPendingResurrectInfo()
** _Returns:_ *string* _casterName_, *integer* _timeLeft_, *string* _casterDisplayName_

* GetDeathInfo()
** _Returns:_ *integer* _timeUntilRevive_, *integer* _timeUntilAutoRelease_, *integer* _corpseSummonTime_, *bool* _isPenaltyTooHighToRevive_, *bool* _encounterIsInProgress_, *bool* _isAVADeath_, *bool* _isBattleGroundDeath_, *bool* _isReleaseOnly_, *bool* _soulGemAvailable_, *bool* _freeRevive_, *bool* _isRaidDeath_, *bool* _isImperialCityLocked_, *integer* _cyclicRespawnQueueDuration_, *integer* _cyclicRespawnQueueTimeLeft_

* Revive()

* Release()

* JoinRespawnQueue()

* IsQueuedForCyclicRespawn()
** _Returns:_ *bool* _queuedForRespawn_

* RespawnAtKeep(*integer* _keepId_)

* IsDuelingDeath()
** _Returns:_ *bool* _duelingDeath_

* RespawnAtForwardCamp(*luaindex* _index_)

* GetNumForwardCamps(*[BattlegroundQueryContextType|#BattlegroundQueryContextType]* _battlegroundContext_)
** _Returns:_ *integer* _num_

* GetForwardCampPinInfo(*[BattlegroundQueryContextType|#BattlegroundQueryContextType]* _battlegroundContext_, *luaindex* _index_)
** _Returns:_ *integer* _pinType_, *number* _normalizedX_, *number* _normalizedY_, *number* _normalizedRadius_, *bool* _useable_

* IsForwardCampGuildOwned(*[BattlegroundQueryContextType|#BattlegroundQueryContextType]* _battlegroundContext_, *luaindex* _index_)
** _Returns:_ *bool* _isGuildOwned_

* GetForwardCampOwnerName(*[BattlegroundQueryContextType|#BattlegroundQueryContextType]* _battlegroundContext_, *luaindex* _index_)
** _Returns:_ *string* _guildName_

* GetNextForwardCampRespawnTime()
** _Returns:_ *integer* _nextForwardCampRespawnTime_

* GetNumBattleStandards(*[BattlegroundQueryContextType|#BattlegroundQueryContextType]* _battlegroundContext_)
** _Returns:_ *integer* _num_

* GetBattleStandardPinInfo(*[BattlegroundQueryContextType|#BattlegroundQueryContextType]* _battlegroundContext_, *luaindex* _index_)
** _Returns:_ *integer* _pinType_, *number* _normalizedX_, *number* _normalizedY_

* GetBattleStandardGuildName(*[BattlegroundQueryContextType|#BattlegroundQueryContextType]* _battlegroundContext_, *luaindex* _index_)
** _Returns:_ *string* _guildName_

* GetDuelInfo()
** _Returns:_ *[DuelState|#DuelState]* _duelState_, *string* _partnerCharacterName_, *string* _partnerDisplayName_

* ChallengeTargetToDuel(*string* _characterOrDisplayName_)

* AcceptDuel()

* DeclineDuel()

* IsNearDuelBoundary()
** _Returns:_ *bool* _isNearBoundary_

* TradeInvite(*string* _target_)

* TradeInviteByName(*string* _playerName_)

* TradeInviteAccept()

* TradeInviteDecline()

* GetTradeInviteInfo()
** _Returns:_ *string* _characterName_, *integer* _millisecondsSinceRequest_, *string* _displayName_

* TradeSetMoney(*integer* _amount_)

* TradeInviteCancel()

* TradeCancel()

* TradeAccept()

* TradeEdit()

* TradeAddItem(*[Bag|#Bag]* _bagId_, *integer* _slotIndex_, *luaindex:nilable* _tradeIndex_)

* TradeRemoveItem(*luaindex* _tradeIndex_)

* GetTradeItemInfo(*[TradeParticipant|#TradeParticipant]* _who_, *luaindex* _tradeIndex_)
** _Returns:_ *string* _name_, *textureName* _icon_, *integer* _stack_, *integer* _quality_, *string* _creatorName_, *integer* _sellPrice_, *bool* _meetsUsageRequirement_, *[EquipType|#EquipType]* _equipType_, *integer* _itemStyleId_

* IsTradeItemBoPAndTradeable(*[TradeParticipant|#TradeParticipant]* _who_, *luaindex* _tradeIndex_)
** _Returns:_ *bool* _isBoPAndTradeable_

* GetTradeItemBoPTimeRemainingSeconds(*[TradeParticipant|#TradeParticipant]* _who_, *luaindex* _tradeIndex_)
** _Returns:_ *integer* _timeRemainingS_

* GetTradeItemBoPTradeableDisplayNamesString(*[TradeParticipant|#TradeParticipant]* _who_, *luaindex* _tradeIndex_)
** _Returns:_ *string* _namesString_

* GetTradeItemBagAndSlot(*[TradeParticipant|#TradeParticipant]* _who_, *luaindex* _tradeIndex_)
** _Returns:_ *[Bag|#Bag]:nilable* _bagId_, *integer:nilable* _slotIndex_

* GetTradeItemLink(*[TradeParticipant|#TradeParticipant]* _who_, *luaindex* _tradeIndex_, *[LinkStyle|#LinkStyle]* _linkStyle_)
** _Returns:_ *string* _link_

* GetTradeMoneyOffer(*[TradeParticipant|#TradeParticipant]* _who_)
** _Returns:_ *integer* _moneyOffer_

* StartMapPinAnimation(*object* _animationTimeline_, *[MapPinAnimationTarget|#MapPinAnimationTarget]* _animationTarget_, *[ControlType|#ControlType]:nilable* _limitToMapType_, *[MapDisplayPinType|#MapDisplayPinType]* _pinType_, *integer* _param1_, *integer* _param2_, *integer* _param3_, *integer* _playOffset_, *bool* _ignoreBreadcrumbs_)
** _Returns:_ *bool* _played_

* IsPlayerInsidePinArea(*[MapDisplayPinType|#MapDisplayPinType]* _pinType_, *integer* _param1_, *integer* _param2_, *integer* _param3_)
** _Returns:_ *bool* _isPlayerInside_

* RemoveMapPinsByType(*[MapDisplayPinType|#MapDisplayPinType]* _pinType_)

* RemoveMapPinsInRange(*[MapDisplayPinType|#MapDisplayPinType]* _startType_, *[MapDisplayPinType|#MapDisplayPinType]* _endType_, *integer:nilable* _param1_, *integer:nilable* _param2_, *integer:nilable* _param3_)

* AssistedQuestPinForTracked(*[MapDisplayPinType|#MapDisplayPinType]* _trackedPinType_)
** _Returns:_ *[MapDisplayPinType|#MapDisplayPinType]* _assistedPinType_

* TrackedQuestPinForAssisted(*[MapDisplayPinType|#MapDisplayPinType]* _assistedPinType_)
** _Returns:_ *[MapDisplayPinType|#MapDisplayPinType]* _trackedPinType_

* SetPinTint(*[MapDisplayPinType|#MapDisplayPinType]* _pinType_, *number* _red_, *number* _green_, *number* _blue_, *integer* _param1_, *integer* _param2_, *integer* _param3_)

* GetAvailableSkillPoints()
** _Returns:_ *integer* _numPoints_

* GetNumSkyShards()
** _Returns:_ *integer* _numShards_

* GetNumSkillTypes()
** _Returns:_ *integer* _numSkillTypes_

* GetNumSkillLines(*[SkillType|#SkillType]* _skillType_)
** _Returns:_ *integer* _numSkillLines_

* GetSkillLineXPInfo(*[SkillType|#SkillType]* _skillType_, *luaindex* _skillIndex_)
** _Returns:_ *integer* _lastRankXP_, *integer* _nextRankXP_, *integer* _currentXP_

* GetSkillLineRankXPExtents(*[SkillType|#SkillType]* _skillType_, *luaindex* _skillIndex_, *luaindex* _rank_)
** _Returns:_ *integer:nilable* _startXP_, *integer:nilable* _nextRankStartXP_

* GetNumSkillAbilities(*[SkillType|#SkillType]* _skillType_, *luaindex* _skillIndex_)
** _Returns:_ *integer* _numAbilities_

* GetSkillAbilityInfo(*[SkillType|#SkillType]* _skillType_, *luaindex* _skillIndex_, *luaindex* _abilityIndex_)
** _Returns:_ *string* _name_, *textureName* _texture_, *luaindex* _earnedRank_, *bool* _passive_, *bool* _ultimate_, *bool* _purchased_, *luaindex:nilable* _progressionIndex_

* GetSkillAbilityId(*[SkillType|#SkillType]* _skillType_, *luaindex* _skillIndex_, *luaindex* _abilityIndex_, *bool* _showUpgrade_)
** _Returns:_ *integer* _abilityId_

* GetSkillAbilityUpgradeInfo(*[SkillType|#SkillType]* _skillType_, *luaindex* _skillIndex_, *luaindex* _abilityIndex_)
** _Returns:_ *integer:nilable* _currentUpgradeLevel_, *integer:nilable* _maxUpgradeLevel_

* GetSkillAbilityNextUpgradeInfo(*[SkillType|#SkillType]* _skillType_, *luaindex* _skillIndex_, *luaindex* _abilityIndex_)
** _Returns:_ *string* _name_, *textureName* _texture_, *luaindex:nilable* _earnedRank_

* PutPointIntoSkillAbility(*[SkillType|#SkillType]* _skillType_, *luaindex* _skillIndex_, *luaindex* _index_, *bool* _putPointInNextUpgrade_)

* GetSkillAbilityIndicesFromProgressionIndex(*luaindex* _progressionIndex_)
** _Returns:_ *[SkillType|#SkillType]* _skillType_, *luaindex* _skillIndex_, *luaindex* _abilityIndex_

* GetSkillLineIndicesFromSkillId(*integer* _skillId_)
** _Returns:_ *[SkillType|#SkillType]* _skillType_, *luaindex* _skillIndex_

* GetSkillLineIndicesFromSkillLineId(*integer* _skillLineId_)
** _Returns:_ *[SkillType|#SkillType]* _skillType_, *luaindex* _skillIndex_

* IsWerewolfSkillLine(*[SkillType|#SkillType]* _skillType_, *luaindex* _skillLineIndex_)
** _Returns:_ *bool* _isWerewolfSkillLine_

* IsLocalMailboxFull()
** _Returns:_ *bool* _isFull_

* GetNumMailItems()
** _Returns:_ *integer* _numMail_

* GetNextMailId(*id64:nilable* _lastMailId_)
** _Returns:_ *id64:nilable* _nextMailId_

* GetMailItemInfo(*id64* _mailId_)
** _Returns:_ *string* _senderDisplayName_, *string* _senderCharacterName_, *string* _subject_, *textureName* _icon_, *bool* _unread_, *bool* _fromSystem_, *bool* _fromCustomerService_, *bool* _returned_, *integer* _numAttachments_, *integer* _attachedMoney_, *integer* _codAmount_, *integer* _expiresInDays_, *integer* _secsSinceReceived_

* GetMailSender(*id64* _mailId_)
** _Returns:_ *string* _senderDisplayName_, *string* _senderCharacterName_

* GetMailAttachmentInfo(*id64* _mailId_)
** _Returns:_ *integer* _numAttachments_, *integer* _attachedMoney_, *integer* _codAmount_

* GetMailFlags(*id64* _mailId_)
** _Returns:_ *bool* _unread_, *bool* _returned_, *bool* _fromSystem_, *bool* _fromCustomerService_

* SendMail(*string* _to_, *string* _subject_, *string* _body_)

* GetQueuedMailPostage()
** _Returns:_ *integer* _postage_

* ClearQueuedMail()

* CloseMailbox()

* RequestReadMail(*id64* _mailId_)
** _Returns:_ *[RequestReadMailResult|#RequestReadMailResult]* _result_

* DeleteMail(*id64* _mailId_, *bool* _forceDelete_)

* IsMailReturnable(*id64* _mailId_)
** _Returns:_ *bool* _isReturnable_

* ReturnMail(*id64* _mailId_)

* ReadMail(*id64* _mailId_)
** _Returns:_ *string* _body_

* HasUnreadMail()
** _Returns:_ *bool* _unread_

* GetNumUnreadMail()
** _Returns:_ *integer* _numUnread_

* CanQueueItemAttachment(*[Bag|#Bag]* _bagId_, *integer* _slotIndex_, *luaindex* _attachmentSlot_)
** _Returns:_ *bool* _canAttach_

* RemoveQueuedItemAttachment(*luaindex* _attachmentSlot_)

* QueueMoneyAttachment(*integer* _amount_)

* GetQueuedMoneyAttachment()
** _Returns:_ *integer* _amount_

* QueueCOD(*integer* _amount_)

* GetQueuedCOD()
** _Returns:_ *integer* _amount_

* GetMailQueuedAttachmentLink(*luaindex* _attachmentSlot_, *[LinkStyle|#LinkStyle]* _linkStyle_)
** _Returns:_ *string* _link_

* GetQueuedItemAttachmentInfo(*luaindex* _attachmentSlot_)
** _Returns:_ *integer* _bagId_, *integer* _slotIndex_, *textureName* _icon_, *integer* _stack_

* GetAttachedItemLink(*id64* _mailId_, *luaindex* _attachIndex_, *[LinkStyle|#LinkStyle]* _linkStyle_)
** _Returns:_ *string* _link_

* GetAttachedItemInfo(*id64* _mailId_, *luaindex* _attachIndex_)
** _Returns:_ *textureName* _icon_, *integer* _stack_, *string* _creatorName_, *integer* _sellPrice_, *bool* _meetsUsageRequirement_, *integer* _equipType_, *integer* _itemStyleId_, *integer* _quality_

* TakeMailAttachedItems(*id64* _mailId_)

* TakeMailAttachedMoney(*id64* _mailId_)

* RequestOpenMailbox()

* IsReadMailInfoReady(*id64* _mailId_)
** _Returns:_ *bool* _isReady_

* GetNumAchievementCategories()
** _Returns:_ *integer* _numCategories_

* GetAchievementCategoryInfo(*luaindex* _topLevelIndex_)
** _Returns:_ *string* _name_, *integer* _numSubCatgories_, *integer* _numAchievements_, *integer* _earnedPoints_, *integer* _totalPoints_, *bool* _hidesPoints_

* GetAchievementSubCategoryInfo(*luaindex* _topLevelIndex_, *luaindex* _subCategoryIndex_)
** _Returns:_ *string* _name_, *integer* _numAchievements_, *integer* _earnedPoints_, *integer* _totalPoints_, *bool* _hidesPoints_

* GetAchievementCategoryKeyboardIcons(*luaindex* _categoryIndex_)
** _Returns:_ *textureName* _normalIcon_, *textureName* _pressedIcon_, *textureName* _mouseoverIcon_

* GetAchievementCategoryGamepadIcon(*luaindex* _categoryIndex_)
** _Returns:_ *textureName* _gamepadIcon_

* GetEarnedAchievementPoints()
** _Returns:_ *integer* _points_

* GetTotalAchievementPoints()
** _Returns:_ *integer* _points_

* GetAchievementId(*luaindex* _topLevelIndex_, *luaindex:nilable* _categoryIndex_, *luaindex* _achievementIndex_)
** _Returns:_ *integer* _achievementId_

* GetAchievementInfo(*integer* _achievementId_)
** _Returns:_ *string* _name_, *string* _description_, *integer* _points_, *textureName* _icon_, *bool* _completed_, *string* _date_, *string* _time_

* IsAchievementComplete(*integer* _achievementId_)
** _Returns:_ *bool* _completed_

* GetAchievementNumRewards(*integer* _achievementId_)
** _Returns:_ *integer* _numRewards_

* GetAchievementItemLink(*integer* _achievementId_, *[LinkStyle|#LinkStyle]* _linkStyle_)
** _Returns:_ *string* _link_

* GetAchievementNumCriteria(*integer* _achievementId_)
** _Returns:_ *integer* _numCriteria_

* GetAchievementCriterion(*integer* _achievementId_, *luaindex* _criterionIndex_)
** _Returns:_ *string* _description_, *integer* _numCompleted_, *integer* _numRequired_

* GetRecentlyCompletedAchievements(*integer* _numAchievementsToGet_)
** _Uses variable returns..._
** _Returns:_ *integer* _achievementId_

* GetCategoryInfoFromAchievementId(*integer* _achievementId_)
** _Returns:_ *luaindex:nilable* _topLevelIndex_, *luaindex:nilable* _categoryIndex_, *luaindex:nilable* _achievementIndex_, *integer* _offsetFromParent_

* GetFirstAchievementInLine(*integer* _achievementId_)
** _Returns:_ *integer* _firstAchievementId_

* GetNextAchievementInLine(*integer* _achievementId_)
** _Returns:_ *integer* _nextAchievementId_

* GetPreviousAchievementInLine(*integer* _achievementId_)
** _Returns:_ *integer* _previousAchievementId_

* GetAchievementLink(*integer* _achievementId_, *[LinkStyle|#LinkStyle]* _linkStyle_)
** _Returns:_ *string* _link_

* GetAchievementIdFromLink(*string* _link_)
** _Returns:_ *integer* _achievementId_

* GetAchievementNameFromLink(*string* _link_)
** _Returns:_ *string* _name_

* GetAchievementProgressFromLinkData(*integer* _achievementId_, *string* _progress_)
** _Uses variable returns..._
** _Returns:_ *integer* _numCompleted_

* GetAchievementRewardPoints(*integer* _achievementId_)
** _Returns:_ *integer* _points_

* GetAchievementRewardItem(*integer* _achievementId_)
** _Returns:_ *bool* _hasRewardOfType_, *string* _itemName_, *string* _iconTextureName_, *integer* _quality_

* GetAchievementRewardTitle(*integer* _achievementId_)
** _Returns:_ *bool* _hasRewardOfType_, *string* _titleName_

* GetAchievementRewardDye(*integer* _achievementId_)
** _Returns:_ *bool* _hasRewardOfType_, *integer* _dyeId_

* GetAchievementRewardCollectible(*integer* _achievementId_)
** _Returns:_ *bool* _hasRewardOfType_, *integer* _collectibleId_

* GetNumExperiencePointsInLevel(*integer* _level_)
** _Returns:_ *integer:nilable* _numXP_

* GetEnlightenedMultiplier()
** _Returns:_ *number* _multiplier_

* GetEnlightenedPool()
** _Returns:_ *integer* _poolAmount_

* IsEnlightenedAvailableForAccount()
** _Returns:_ *bool* _availableForAccount_

* IsEnlightenedAvailableForCharacter()
** _Returns:_ *bool* _availableForCharacter_

* GetNumChampionXPInChampionPoint(*integer* _championPointsEarned_)
** _Returns:_ *integer:nilable* _maxExp_

* GetMaxSpendableChampionPointsInAttribute()
** _Returns:_ *integer* _maxSpendableChampionPointsInAttribute_

* GetMaxLevel()
** _Returns:_ *integer* _maxLevel_

* GetChampionPointsPlayerProgressionCap()
** _Returns:_ *integer* _maxRank_

* GetAbilityProgressionAbilityId(*luaindex* _progressionIndex_, *integer* _morph_, *integer* _rank_)
** _Returns:_ *integer* _abilityId_

* GetLatestAbilityRespecNote()
** _Returns:_ *string* _note_

* GetLatestAttributeRespecNote()
** _Returns:_ *string* _note_

* PurchaseAttributes(*integer* _health_, *integer* _magicka_, *integer* _stamina_)

* GetAttributeSpentPoints(*integer* _attributeType_)
** _Returns:_ *integer* _points_

* GetAttributeUnspentPoints()
** _Returns:_ *integer* _points_

* GetNumScriptedEventInvites()
** _Returns:_ *integer* _eventCount_

* GetScriptedEventInviteIdFromIndex(*luaindex* _eventIndex_)
** _Returns:_ *integer* _eventId_

* GetScriptedEventInviteInfo(*integer* _eventId_)
** _Returns:_ *bool* _isValid_, *string* _eventName_, *string* _inviterName_, *string* _questName_, *integer* _timeRemainingMS_

* GetScriptedEventInviteTimeRemainingMS(*integer* _eventId_)
** _Returns:_ *integer* _timeRemainingMS_

* AcceptWorldEventInvite(*integer* _eventId_)

* DeclineWorldEventInvite(*integer* _eventId_)

* RemoveScriptedEventInviteForQuest(*string* _questName_)

* GetNumLoreCategories()
** _Returns:_ *integer* _numTopCategories_

* GetLoreCategoryInfo(*luaindex* _categoryIndex_)
** _Returns:_ *string* _name_, *integer* _numCollections_, *integer* _categoryId_

* GetLoreCollectionInfo(*luaindex* _categoryIndex_, *luaindex* _collectionIndex_)
** _Returns:_ *string* _name_, *string* _description_, *integer* _numKnownBooks_, *integer* _totalBooks_, *bool* _hidden_, *textureName* _gamepadIcon_, *integer* _collectionId_

* GetLoreBookInfo(*luaindex* _categoryIndex_, *luaindex* _collectionIndex_, *luaindex* _bookIndex_)
** _Returns:_ *string* _title_, *textureName* _icon_, *bool* _known_, *integer* _bookId_

* ReadLoreBook(*luaindex* _categoryIndex_, *luaindex* _collectionIndex_, *luaindex* _bookIndex_)
** _Returns:_ *string* _body_, *[BookMedium|#BookMedium]* _medium_, *bool* _showTitle_

* GetLoreBookLink(*luaindex* _categoryIndex_, *luaindex* _collectionIndex_, *luaindex* _bookIndex_, *[LinkStyle|#LinkStyle]* _linkStyle_)
** _Returns:_ *string* _link_

* GetLoreBookTitleFromLink(*string* _link_)
** _Returns:_ *string* _title_

* GetLoreBookCategoryIndexFromCategoryId(*integer* _categoryId_)
** _Returns:_ *luaindex:nilable* _categoryIndex_

* GetLoreBookCollectionIndicesFromCollectionId(*integer* _collectionId_)
** _Returns:_ *luaindex:nilable* _categoryIndex_, *luaindex:nilable* _collectionIndex_

* GetLoreBookIndicesFromBookId(*integer* _bookId_)
** _Returns:_ *luaindex:nilable* _categoryIndex_, *luaindex:nilable* _collectionIndex_, *luaindex:nilable* _bookIndex_

* GetGameCameraNonInteractableName()
** _Returns:_ *string:nilable* _name_

* IsInteracting()
** _Returns:_ *bool* _name_

* GetGameCameraTargetHoverTutorial()
** _Returns:_ *[TutorialTrigger|#TutorialTrigger]* _tutorialType_

* GetPledgeOfMaraOfferInfo()
** _Returns:_ *string* _targetCharacterName_, *integer* _millisecondsSinceRequest_, *bool* _isSender_, *string* _targetDisplayName_

* SendPledgeOfMaraResponse(*[PledgeOfMaraResponse|#PledgeOfMaraResponse]* _response_)

* GetRingOfMaraExperienceBonus()
** _Returns:_ *number* _bonusPercentage_

* ReportFeedback(*[CustomerServiceSubmitFeedbackImpacts|#CustomerServiceSubmitFeedbackImpacts]* _impact_, *[CustomerServiceSubmitFeedbackCategories|#CustomerServiceSubmitFeedbackCategories]* _category_, *[CustomerServiceSubmitFeedbackSubcategories|#CustomerServiceSubmitFeedbackSubcategories]* _subcategory_, *string* _details_, *string* _description_, *bool* _takeScreenshot_)

* GetHelpCategoryInfo(*luaindex* _helpCategoryIndex_)
** _Returns:_ *string* _name_, *string* _description_, *textureName* _upIcon_, *textureName* _downIcon_, *textureName* _overIcon_, *textureName* _gamepadIcon_

* GetNumHelpCategories()
** _Returns:_ *integer* _numHelpCategories_

* GetNumHelpEntriesWithinCategory(*luaindex* _helpCategoryIndex_)
** _Returns:_ *integer* _numHelpEntries_

* GetHelpInfo(*luaindex* _helpCategoryIndex_, *luaindex* _helpIndex_)
** _Returns:_ *string* _name_, *string* _description_, *string* _description2_, *textureName:nilable* _image_, *string* _descriptionGamepad_, *string* _descriptionGamepad2_, *[HelpShowOptions|#HelpShowOptions]* _showOptions_

* GetHelpSearchResults()
** _Uses variable returns..._
** _Returns:_ *luaindex* _helpCategoryIndex_, *luaindex* _helpIndex_

* SubmitCustomerServiceTicket()
** _Returns:_ *bool* _success_

* ResetCustomerServiceTicket()

* SetCustomerServiceTicketContactEmail(*string* _contactEmail_)

* SetCustomerServiceTicketBody(*string* _body_)

* SetCustomerServiceTicketCategory(*[CustomerServiceTicketCategory|#CustomerServiceTicketCategory]* _category_)

* SetCustomerServiceTicketPlayerTarget(*string* _displayName_)

* SetCustomerServiceTicketItemTargetByLink(*string* _itemLink_)

* SetCustomerServiceTicketItemTarget(*string* _itemName_, *integer* _itemId_)

* SetCustomerServiceTicketQuestTarget(*string* _questName_)

* StartHelpSearch(*string* _searchString_)

* GetHelpOverviewIntroParagraph()
** _Returns:_ *string* _paragraph_

* GetNumHelpOverviewQuestionAnswers()
** _Returns:_ *integer* _length_

* GetHelpOverviewQuestionAnswerPair(*luaindex* _index_)
** _Returns:_ *string* _question_, *string* _answer_

* IsKeyboardHelpOption(*[HelpShowOptions|#HelpShowOptions]* _showOption_)
** _Returns:_ *bool* _isKeyboardOption_

* IsGamepadHelpOption(*[HelpShowOptions|#HelpShowOptions]* _showOption_)
** _Returns:_ *bool* _isGamepadOption_

* IsSubmitFeedbackSupported()
** _Returns:_ *bool* _isSupported_

* StopSettingChamber *private* ()

* GetSettingChamberStress()
** _Returns:_ *number* _stress_

* AttemptForceLock *private* ()

* GetLockpickingTimeLeft()
** _Returns:_ *integer* _timeLeftMs_

* GetChanceToForceLock()
** _Returns:_ *integer* _chance_

* GetNumLockpicksLeft()
** _Returns:_ *integer* _picksLeft_

* GetLockQuality()
** _Returns:_ *integer* _lockQuality_

* GetChamberState(*luaindex* _chamberIndex_)
** _Returns:_ *integer* _chamberState_, *number* _chamberProgress_

* IsChamberSolved(*luaindex* _chamberIndex_)
** _Returns:_ *bool* _solved_

* StartSettingChamber *private* (*luaindex* _chamberIndex_)
** _Returns:_ *bool* _succesfullyStarted_

* GetCraftingInteractionType()
** _Returns:_ *[TradeskillType|#TradeskillType]* _currentCraftingInteraction_

* IsPerformingCraftProcess()
** _Returns:_ *bool* _isCrafting_

* GetLastCraftingResultTotalInspiration()
** _Returns:_ *integer* _totalInspiration_

* GetNumLastCraftingResultLearnedTranslations()
** _Returns:_ *integer* _numLearnedTranslations_

* GetLastCraftingResultLearnedTranslationInfo(*luaindex* _resultIndex_)
** _Returns:_ *string* _translationName_, *string* _itemName_, *textureName* _icon_, *integer* _sellPrice_, *bool* _meetsUsageRequirement_, *integer* _equipType_, *integer* _itemStyleId_, *integer* _quality_

* GetNumLastCraftingResultLearnedTraits()
** _Returns:_ *integer* _numLearnedTraits_

* GetLastCraftingResultLearnedTraitInfo(*luaindex* _resultIndex_)
** _Returns:_ *string* _traitName_, *string* _itemName_, *textureName* _icon_, *integer* _sellPrice_, *bool* _meetsUsageRequirement_, *integer* _equipType_, *integer* _itemStyleId_, *integer* _quality_

* GetNumLastCraftingResultItemsAndPenalty()
** _Returns:_ *integer* _numItems_, *bool* _penaltyApplied_

* GetLastCraftingResultItemInfo(*luaindex* _resultIndex_)
** _Returns:_ *string* _name_, *textureName* _icon_, *integer* _stack_, *integer* _sellPrice_, *bool* _meetsUsageRequirement_, *integer* _equipType_, *[ItemType|#ItemType]* _itemType_, *integer* _itemStyleId_, *integer* _quality_, *[ItemUISoundCategory|#ItemUISoundCategory]* _soundCategory_, *integer* _itemInstanceId_

* GetLastCraftingResultItemLink(*luaindex* _resultIndex_, *[LinkStyle|#LinkStyle]* _linkStyle_)
** _Returns:_ *string* _link_

* GetTradeskillLevelPassiveAbilityId(*[TradeskillType|#TradeskillType]* _tradeskillType_)
** _Returns:_ *integer* _levelPassiveAbilityId_

* GetTradeskillRecipeCraftingSystem(*[TradeskillType|#TradeskillType]* _tradeskillType_)
** _Returns:_ *[RecipeCraftingSystem|#RecipeCraftingSystem]* _recipeCraftingSystem_

* GetNonCombatBonusLevelTypeForTradeskillType(*[TradeskillType|#TradeskillType]* _tradeskillType_)
** _Returns:_ *[NonCombatBonusType|#NonCombatBonusType]* _nonCombatBonusType_

* GetTradeskillTypeForNonCombatBonusLevelType(*[NonCombatBonusType|#NonCombatBonusType]* _nonCombatBonusType_)
** _Returns:_ *[TradeskillType|#TradeskillType]* _tradeskillType_

* GetCostToCraftAlchemyItem(*integer* _solventBagId_, *integer* _solventSlotIndex_)
** _Returns:_ *integer* _cost_

* CraftAlchemyItem(*integer* _solventBagId_, *integer* _solventSlotIndex_, *integer* _reagent1BagId_, *integer* _reagent1SlotIndex_, *integer* _reagent2BagId_, *integer* _reagent2SlotIndex_, *integer:nilable* _reagent3BagId_, *integer:nilable* _reagent3SlotIndex_)

* GetAlchemyResultingItemInfo(*integer* _solventBagId_, *integer* _solventSlotIndex_, *integer* _reagent1BagId_, *integer* _reagent1SlotIndex_, *integer* _reagent2BagId_, *integer* _reagent2SlotIndex_, *integer:nilable* _reagent3BagId_, *integer:nilable* _reagent3SlotIndex_)
** _Returns:_ *string* _name_, *textureName* _icon_, *integer* _stack_, *integer* _sellPrice_, *bool* _meetsUsageRequirement_, *integer* _equipType_, *integer* _itemStyleId_, *integer* _quality_

* GetAlchemyResultingItemLink(*integer* _solventBagId_, *integer* _solventSlotIndex_, *integer* _reagent1BagId_, *integer* _reagent1SlotIndex_, *integer* _reagent2BagId_, *integer* _reagent2SlotIndex_, *integer:nilable* _reagent3BagId_, *integer:nilable* _reagent3SlotIndex_, *[LinkStyle|#LinkStyle]* _linkStyle_)
** _Returns:_ *string* _link_

* GetAlchemyResultInspiration(*integer* _solventBagId_, *integer* _solventSlotIndex_, *integer* _reagent1BagId_, *integer* _reagent1SlotIndex_, *integer* _reagent2BagId_, *integer* _reagent2SlotIndex_, *integer:nilable* _reagent3BagId_, *integer:nilable* _reagent3SlotIndex_)
** _Returns:_ *integer* _inspiration_

* GetAlchemyItemTraits(*integer* _reagentBagId_, *integer* _reagentSlotIndex_)
** _Uses variable returns..._
** _Returns:_ *string:nilable* _trait_, *textureName:nilable* _icon_, *textureName:nilable* _matchIcon_, *string:nilable* _cancellingTrait_, *textureName:nilable* _conflictIcon_

* IsAlchemySolvent(*[ItemType|#ItemType]* _itemType_)
** _Returns:_ *bool* _isAlchemySolvent_

* GetNumRecipeLists()
** _Returns:_ *integer* _numRecipeLists_

* GetRecipeListInfo(*luaindex* _recipeListIndex_)
** _Returns:_ *string* _name_, *integer* _numRecipes_, *textureName* _upIcon_, *textureName* _downIcon_, *textureName* _overIcon_, *textureName* _disabledIcon_, *string* _createSound_

* GetMaxRecipeIngredients()
** _Returns:_ *integer* _maxIngredients_

* GetRecipeInfo(*luaindex* _recipeListIndex_, *luaindex* _recipeIndex_)
** _Returns:_ *bool* _known_, *string* _name_, *integer* _numIngredients_, *integer* _provisionerLevelReq_, *integer* _qualityReq_, *[ProvisionerSpecialIngredientType|#ProvisionerSpecialIngredientType]* _specialIngredientType_, *[TradeskillType|#TradeskillType]* _requiredCraftingStationType_

* GetRecipeIngredientItemInfo(*luaindex* _recipeListIndex_, *luaindex* _recipeIndex_, *luaindex* _ingredientIndex_)
** _Returns:_ *string* _name_, *textureName* _icon_, *integer* _requiredQuantity_, *integer* _sellPrice_, *integer* _quality_

* GetRecipeIngredientItemLink(*luaindex* _recipeListIndex_, *luaindex* _recipeIndex_, *luaindex* _ingredientIndex_, *[LinkStyle|#LinkStyle]* _linkStyle_)
** _Returns:_ *string* _link_

* GetNumRecipeTradeskillRequirements(*luaindex* _recipeListIndex_, *luaindex* _recipeIndex_)
** _Returns:_ *integer* _numTradeskillRequirements_

* GetRecipeTradeskillRequirement(*luaindex* _recipeListIndex_, *luaindex* _recipeIndex_, *luaindex* _tradeskillIndex_)
** _Returns:_ *[TradeskillType|#TradeskillType]* _tradeskill_, *integer* _levelRequirement_

* GetRecipeResultItemInfo(*luaindex* _recipeListIndex_, *luaindex* _recipeIndex_)
** _Returns:_ *string* _name_, *textureName* _icon_, *integer* _stack_, *integer* _sellPrice_, *integer* _quality_

* GetRecipeResultItemLink(*luaindex* _recipeListIndex_, *luaindex* _recipeIndex_, *[LinkStyle|#LinkStyle]* _linkStyle_)
** _Returns:_ *string* _link_

* GetCostToCraftProvisionerItem(*luaindex* _recipeListIndex_, *luaindex* _recipeIndex_)
** _Returns:_ *integer* _cost_

* CraftProvisionerItem(*luaindex* _recipeListIndex_, *luaindex* _recipeIndex_)

* GetCurrentRecipeIngredientCount(*luaindex* _recipeListIndex_, *luaindex* _recipeIndex_, *luaindex* _ingredientIndex_)
** _Returns:_ *integer* _count_

* GetCostToCraftEnchantingItem(*integer* _potencyRuneBagId_, *integer* _potencyRuneSlotIndex_, *integer* _essenceRuneBagId_, *integer* _essenceRuneSlotIndex_, *integer* _aspectRuneBagId_, *integer* _aspectRuneSlotIndex_)
** _Returns:_ *integer* _cost_

* CraftEnchantingItem(*integer* _potencyRuneBagId_, *integer* _potencyRuneSlotIndex_, *integer* _essenceRuneBagId_, *integer* _essenceRuneSlotIndex_, *integer* _aspectRuneBagId_, *integer* _aspectRuneSlotIndex_)

* ExtractEnchantingItem(*integer* _bagId_, *integer* _slotIndex_)

* GetEnchantingResultingItemInfo(*integer* _potencyRuneBagId_, *integer* _potencyRuneSlotIndex_, *integer* _essenceRuneBagId_, *integer* _essenceRuneSlotIndex_, *integer* _aspectRuneBagId_, *integer* _aspectRuneSlotIndex_)
** _Returns:_ *string* _name_, *textureName* _icon_, *integer* _stack_, *integer* _sellPrice_, *bool* _meetsUsageRequirement_, *integer* _quality_

* GetEnchantingResultingItemLink(*integer* _potencyRuneBagId_, *integer* _potencyRuneSlotIndex_, *integer* _essenceRuneBagId_, *integer* _essenceRuneSlotIndex_, *integer* _aspectRuneBagId_, *integer* _aspectRuneSlotIndex_, *[LinkStyle|#LinkStyle]* _linkStyle_)
** _Returns:_ *string* _link_

* GetRunestoneTranslatedName(*integer* _bagId_, *integer* _slotIndex_)
** _Returns:_ *string:nilable* _name_

* GetRunestoneSoundInfo(*integer* _bagId_, *integer* _slotIndex_)
** _Returns:_ *string* _soundName_, *integer* _soundLength_

* GetEnchantedItemResultingItemLink(*integer* _itemBagId_, *integer* _itemSlotIndex_, *integer* _enchantmentBagId_, *integer* _enchantmentSlotIndex_, *[LinkStyle|#LinkStyle]* _linkStyle_)
** _Returns:_ *string* _link_

* GetCostToCraftSmithingItem(*luaindex* _patternIndex_, *luaindex* _materialIndex_, *integer* _materialQuantity_, *integer* _itemStyleId_, *luaindex* _traitIndex_)
** _Returns:_ *integer* _cost_

* CraftSmithingItem(*luaindex* _patternIndex_, *luaindex* _materialIndex_, *integer* _materialQuantity_, *integer* _itemStyleId_, *luaindex* _traitIndex_, *bool* _useUniversalStyleItem_)

* GetSmithingPatternResultLink(*luaindex* _patternIndex_, *luaindex* _materialIndex_, *integer* _materialQuantity_, *integer* _itemStyleId_, *luaindex* _traitIndex_, *[LinkStyle|#LinkStyle]* _linkStyle_)
** _Returns:_ *string* _link_

* CanSmithingWeaponPatternsBeCraftedHere()
** _Returns:_ *bool* _canBeCrafted_

* CanSmithingApparelPatternsBeCraftedHere()
** _Returns:_ *bool* _canBeCrafted_

* CanSmithingSetPatternsBeCraftedHere()
** _Returns:_ *bool* _canBeCrafted_

* GetNumSmithingPatterns()
** _Returns:_ *integer* _smithingPatterns_

* GetSmithingPatternInfo(*luaindex* _patternIndex_, *luaindex:nilable* _materialIndexOverride_, *integer:nilable* _materialQuanityOverride_, *integer:nilable* _styleOverride_, *[ItemTraitType|#ItemTraitType]:nilable* _traitTypeOverride_)
** _Returns:_ *string* _patternName_, *string* _baseName_, *textureName* _icon_, *integer* _numMaterials_, *integer* _numTraitsRequired_, *integer* _numTraitsKnown_, *[ItemFilterType|#ItemFilterType]* _resultItemFilterType_

* GetSmithingPatternMaterialItemInfo(*luaindex* _patternIndex_, *luaindex* _materialIndex_)
** _Returns:_ *string* _itemName_, *textureName* _icon_, *integer* _stack_, *integer* _sellPrice_, *bool* _meetsUsageRequirement_, *integer* _equipType_, *integer* _itemStyleId_, *integer* _quality_, *integer* _itemInstanceId_, *integer* _skillRequirement_

* GetSmithingPatternNextMaterialQuantity(*luaindex* _patternIndex_, *luaindex* _materialIndex_, *integer* _startingPoint_, *integer* _step_)
** _Returns:_ *integer* _value_

* GetSmithingPatternMaterialItemLink(*luaindex* _patternIndex_, *luaindex* _materialIndex_, *[LinkStyle|#LinkStyle]* _linkStyle_)
** _Returns:_ *string* _link_

* GetSmithingPatternArmorType(*luaindex* _patternIndex_)
** _Returns:_ *[ArmorType|#ArmorType]* _armorType_

* GetCurrentSmithingMaterialItemCount(*luaindex* _patternIndex_, *luaindex* _materialIndex_)
** _Returns:_ *integer* _count_

* GetHighestItemStyleId()
** _Returns:_ *integer* _highestItemStyleDefId_

* GetItemStyleInfo(*integer* _itemStyleId_)
** _Returns:_ *bool* _alwaysHideIfLocked_

* GetItemStyleMaterialLink(*integer* _itemStyleId_, *[LinkStyle|#LinkStyle]* _linkStyle_)
** _Returns:_ *string* _link_

* GetCurrentSmithingStyleItemCount(*integer* _itemStyleId_)
** _Returns:_ *integer* _count_

* IsSmithingStyleKnown(*integer* _itemStyleId_, *luaindex* _patternIndex_)
** _Returns:_ *bool* _known_

* GetFirstKnownItemStyleId(*luaindex* _patternIndex_)
** _Returns:_ *integer:nilable* _itemStyleId_

* CanSmithingStyleBeUsedOnPattern(*integer* _itemStyleId_, *luaindex* _patternIndex_, *luaindex* _materialIndex_, *integer* _materialQuantity_)
** _Returns:_ *bool* _canBeUsed_, *integer* _levelRequirement_, *integer* _championPointsRequirement_

* GetNumSmithingTraitItems()
** _Returns:_ *integer* _numTraitItems_

* GetSmithingTraitItemInfo(*luaindex* _traitItemIndex_)
** _Returns:_ *[ItemTraitType|#ItemTraitType]:nilable* _traitType_, *string* _itemName_, *textureName* _icon_, *integer* _sellPrice_, *bool* _meetsUsageRequirement_, *integer* _itemStyleId_, *integer* _quality_

* GetSmithingTraitItemLink(*luaindex* _traitItemIndex_, *[LinkStyle|#LinkStyle]* _linkStyle_)
** _Returns:_ *string* _link_

* GetCurrentSmithingTraitItemCount(*luaindex* _traitItemIndex_)
** _Returns:_ *integer* _count_

* IsSmithingTraitItemValidForPattern(*luaindex* _patternIndex_, *luaindex* _traitItemIndex_)
** _Returns:_ *bool* _valid_

* IsSmithingTraitKnownForResult(*luaindex* _patternIndex_, *luaindex* _materialIndex_, *integer* _materialQuantity_, *integer* _itemStyleId_, *luaindex* _traitIndex_)
** _Returns:_ *bool* _known_

* GetNumSmithingResearchLines(*[TradeskillType|#TradeskillType]* _craftingSkillType_)
** _Returns:_ *integer* _numLines_

* GetMaxSimultaneousSmithingResearch(*[TradeskillType|#TradeskillType]* _craftingSkillType_)
** _Returns:_ *integer* _maxSimultaneousResearch_

* GetSmithingResearchLineInfo(*[TradeskillType|#TradeskillType]* _craftingSkillType_, *luaindex* _researchLineIndex_)
** _Returns:_ *string* _name_, *textureName* _icon_, *integer* _numTraits_, *integer* _timeRequiredForNextResearchSecs_

* GetSmithingResearchLineTraitInfo(*[TradeskillType|#TradeskillType]* _craftingSkillType_, *luaindex* _researchLineIndex_, *luaindex* _traitIndex_)
** _Returns:_ *[ItemTraitType|#ItemTraitType]* _traitType_, *string* _traitDescription_, *bool* _known_

* GetSmithingResearchLineTraitTimes(*[TradeskillType|#TradeskillType]* _craftingSkillType_, *luaindex* _researchLineIndex_, *luaindex* _traitIndex_)
** _Returns:_ *integer:nilable* _duration_, *integer:nilable* _timeRemainingSecs_

* CanItemBeSmithingTraitResearched(*integer* _bagId_, *integer* _slotIndex_, *[TradeskillType|#TradeskillType]* _craftingSkillType_, *luaindex* _researchLineIndex_, *luaindex* _traitIndex_)
** _Returns:_ *bool* _canBeResearched_

* ResearchSmithingTrait(*integer* _bagId_, *integer* _slotIndex_)

* CancelSmithingTraitResearch(*[TradeskillType|#TradeskillType]* _tradeskillType_, *luaindex* _researchLineIndex_, *luaindex* _traitIndex_)

* CanItemBeSmithingExtractedOrRefined(*integer* _bagId_, *integer* _slotIndex_, *[TradeskillType|#TradeskillType]* _craftingSkillType_)
** _Returns:_ *bool* _canItemBeExtractedOrRefined_

* GetRequiredSmithingRefinementStackSize()
** _Returns:_ *integer* _requiredStackSize_

* GetSmithingRefinementMinRawMaterial()
** _Returns:_ *integer* _minRawMaterial_

* GetSmithingRefinementMaxRawMaterial()
** _Returns:_ *integer* _maxRawMaterial_

* ExtractOrRefineSmithingItem(*integer* _bagId_, *integer* _slotIndex_)

* CanItemBeSmithingImproved(*integer* _bagId_, *integer* _slotIndex_, *[TradeskillType|#TradeskillType]* _craftingSkillType_)
** _Returns:_ *bool* _canBeImproved_

* GetSmithingImprovementChance(*integer* _itemToImproveBagId_, *integer* _itemToImproveSlotIndex_, *integer* _numBoostersToUse_, *[TradeskillType|#TradeskillType]* _craftingSkillType_)
** _Returns:_ *number* _chance_

* GetNumSmithingImprovementItems()
** _Returns:_ *integer* _numImprovementItems_

* GetSmithingImprovementItemInfo(*[TradeskillType|#TradeskillType]* _craftingSkillType_, *luaindex* _improvementItemIndex_)
** _Returns:_ *string* _itemName_, *textureName* _icon_, *integer* _currentStack_, *integer* _sellPrice_, *bool* _meetsUsageRequirement_, *integer* _equipType_, *integer* _itemStyleId_, *integer* _quality_

* GetSmithingImprovementItemLink(*[TradeskillType|#TradeskillType]* _craftingSkillType_, *luaindex* _improvementItemIndex_, *[LinkStyle|#LinkStyle]* _linkStyle_)
** _Returns:_ *string* _link_

* GetSmithingImprovedItemInfo(*integer* _itemToImproveBagId_, *integer* _itemToImproveSlotIndex_, *[TradeskillType|#TradeskillType]* _craftingSkillType_)
** _Returns:_ *string* _itemName_, *textureName* _icon_, *integer* _sellPrice_, *bool* _meetsUsageRequirement_, *integer* _equipType_, *integer* _itemStyleId_, *integer* _quality_

* GetSmithingImprovedItemLink(*integer* _itemToImproveBagId_, *integer* _itemToImproveSlotIndex_, *[TradeskillType|#TradeskillType]* _craftingSkillType_, *[LinkStyle|#LinkStyle]* _linkStyle_)
** _Returns:_ *string* _link_

* ImproveSmithingItem(*integer* _itemToImproveBagId_, *integer* _itemToImproveSlotIndex_, *integer* _numBoostersToUse_)

* GetImperialStyleId()
** _Returns:_ *integer* _imperialStyleId_

* GetMoragTongStyleId()
** _Returns:_ *integer* _moragTongStyleId_

* GetNumValidItemStyles()
** _Returns:_ *integer* _numValidItemStyles_

* GetValidItemStyleId(*luaindex* _index_)
** _Returns:_ *integer* _validItemStyle_

* GetNonCombatBonus(*[NonCombatBonusType|#NonCombatBonusType]* _nonCombatBonus_)
** _Returns:_ *integer* _bonusValue_

* GetNumEmotes()
** _Returns:_ *integer* _numEmotes_

* GetEmoteIndex(*integer* _emoteId_)
** _Returns:_ *luaindex:nilable* _emoteIndex_

* GetEmoteInfo(*luaindex* _emoteIndex_)
** _Returns:_ *string* _slashName_, *[EmoteCategory|#EmoteCategory]* _category_, *integer* _emoteId_, *string* _displayName_, *bool* _showInGamepadUI_

* GetEmoteCollectibleId(*luaindex* _emoteIndex_)
** _Returns:_ *integer:nilable* _collectibleId_

* GetEmoteSlashNameByIndex(*luaindex* _emoteIndex_)
** _Returns:_ *string* _slashName_

* PlayEmoteByIndex(*luaindex* _emoteIndex_)

* GetActivityInfo(*integer* _activityId_)
** _Returns:_ *string* _name_, *integer* _levelMin_, *integer* _levelMax_, *integer* _championPointsMin_, *integer* _championPointsMax_, *[LFGGroupType|#LFGGroupType]* _groupType_, *integer* _minGroupSize_, *string* _description_, *integer* _sortOrder_

* GetActivityName(*integer* _activityId_)
** _Returns:_ *string* _name_

* GetActivityType(*integer* _activityId_)
** _Returns:_ *[LFGActivity|#LFGActivity]* _activity_

* GetActivityKeyboardDescriptionTextures(*integer* _activityId_)
** _Returns:_ *textureName* _descriptionTextureSmallKeyboard_, *textureName* _descriptionTextureLargeKeyboard_

* GetActivityGamepadDescriptionTexture(*integer* _activityId_)
** _Returns:_ *textureName* _descriptionTextureGamepad_

* GetActivityDisplayLevels(*integer* _activityId_)
** _Returns:_ *integer* _displayLevelMin_, *integer* _displayLevelMax_, *integer* _displayChampionPointsMin_, *integer* _displayChampionPointsMax_

* GetActivityGroupType(*integer* _activityId_)
** _Returns:_ *[LFGGroupType|#LFGGroupType]* _groupTypeAllowed_

* GetActivityBattlegroundId(*integer* _activityId_)
** _Returns:_ *integer* _battlegroundId_

* GetNumActivitySetActivities(*integer* _activitySetId_)
** _Returns:_ *integer* _count_

* GetActivitySetActivityIdByIndex(*integer* _activitySetId_, *luaindex* _index_)
** _Returns:_ *integer* _activityId_

* GetActivitySetInfo(*integer* _activitySetId_)
** _Returns:_ *string* _name_, *string* _description_, *integer* _sortOrder_

* GetActivitySetIcon(*integer* _activitySetId_)
** _Returns:_ *textureName* _icon_

* GetActivitySetKeyboardDescriptionTextures(*integer* _activitySetId_)
** _Returns:_ *textureName* _descriptionTextureSmallKeyboard_, *textureName* _descriptionTextureLargeKeyboard_

* GetActivitySetGamepadDescriptionTexture(*integer* _activitySetId_)
** _Returns:_ *textureName* _descriptionTextureGamepad_

* GetNumActivitiesByType(*[LFGActivity|#LFGActivity]* _activity_)
** _Returns:_ *integer* _count_

* GetActivityIdByTypeAndIndex(*[LFGActivity|#LFGActivity]* _activity_, *luaindex* _index_)
** _Returns:_ *integer* _activityId_

* GetActivityTypeAndIndex(*integer* _activityId_)
** _Returns:_ *[LFGActivity|#LFGActivity]* _activity_, *luaindex* _index_

* DoesPlayerMeetActivityLevelRequirements(*integer* _activityId_)
** _Returns:_ *bool* _meetsLevelRequirements_

* DoesGroupMeetActivityLevelRequirements(*integer* _activityId_)
** _Returns:_ *bool* _meetsLevelRequirements_

* UpdatePlayerRole(*[LFGRole|#LFGRole]* _role_, *bool* _selected_)

* GetPlayerRoles()
** _Returns:_ *bool* _isDPS_, *bool* _isHeal_, *bool* _isTank_

* DoesLFGActivityHasAllOption(*[LFGActivity|#LFGActivity]* _activity_)
** _Returns:_ *bool* _hasAllOption_

* GetLFGActivityRewardData(*[LFGActivity|#LFGActivity]* _activity_)
** _Returns:_ *[LFGItemRewardType|#LFGItemRewardType]* _itemRewardType_, *integer* _xpReward_

* IsEligibleForDailyActivityReward()
** _Returns:_ *bool* _isEligible_

* GetLFGCooldownTimeRemainingSeconds(*[LFGCooldownType|#LFGCooldownType]* _cooldownType_)
** _Returns:_ *integer* _timeRemainingSeconds_

* AddActivityFinderRandomSearchEntry(*[LFGActivity|#LFGActivity]* _activity_)

* AddActivityFinderSetSearchEntry(*integer* _activitySetId_)

* AddActivityFinderSpecificSearchEntry(*integer* _activityId_)

* ClearGroupFinderSearch()

* StartGroupFinderSearch()
** _Returns:_ *[ActivityQueueResult|#ActivityQueueResult]* _result_

* CanSendLFMRequest()
** _Returns:_ *bool* _canSendLFMRequest_

* SendLFMRequest()

* GetNumActivityRequests()
** _Returns:_ *integer* _numRequests_

* GetActivityRequestIds(*luaindex* _requestIndex_)
** _Returns:_ *integer* _activityId_, *integer* _activitySetId_

* CancelGroupSearches()

* GetActivityFinderStatus()
** _Returns:_ *[ActivityFinderStatus|#ActivityFinderStatus]* _status_

* IsCurrentlySearchingForGroup()
** _Returns:_ *bool* _isSearching_

* GetRequiredActivityCollectibleId(*integer* _activityId_)
** _Returns:_ *integer* _collectibleId_

* GetLFGSearchTimes()
** _Returns:_ *integer* _startTimeMs_, *integer* _estimatedCompletionTimeMs_

* HasActivityFindReplacementNotification()
** _Returns:_ *bool* _hasfindReplacementNotification_

* GetActivityFindReplacementNotificationInfo()
** _Returns:_ *integer:nilable* _activityId_

* AcceptActivityFindReplacementNotification()

* DeclineActivityFindReplacementNotification()

* GetGroupSizeFromLFGGroupType(*[LFGGroupType|#LFGGroupType]* _groupType_)
** _Returns:_ *integer* _size_

* GetNumActivitySetsByType(*[LFGActivity|#LFGActivity]* _activity_)
** _Returns:_ *integer* _count_

* GetActivitySetIdByTypeAndIndex(*[LFGActivity|#LFGActivity]* _activity_, *luaindex* _index_)
** _Returns:_ *integer* _activitySetId_

* HasLFGReadyCheckNotification()
** _Returns:_ *bool* _hasReadyCheckNotification_

* HasAcceptedLFGReadyCheck()
** _Returns:_ *bool* _hasAcceptedReadyCheck_

* GetLFGReadyCheckNotificationInfo()
** _Returns:_ *[LFGActivity|#LFGActivity]* _activityType_, *[LFGRole|#LFGRole]* _playerRole_, *integer* _timeRemainingSeconds_

* GetLFGReadyCheckActivityType()
** _Returns:_ *[LFGActivity|#LFGActivity]* _activityType_

* AcceptLFGReadyCheckNotification()

* DeclineLFGReadyCheckNotification()

* GetLFGReadyCheckCounts()
** _Returns:_ *integer* _tanksAccepted_, *integer* _tanksPending_, *integer* _healersAccepted_, *integer* _healersPending_, *integer* _dpsAccepted_, *integer* _dpsPending_

* GetActivityAverageRoleTime(*integer* _activityId_, *[LFGRole|#LFGRole]* _role_)
** _Returns:_ *bool* _hasData_, *integer* _timeSeconds_

* GetCurrentLFGActivityId()
** _Returns:_ *integer* _activityId_

* GetNumFishingLures()
** _Returns:_ *integer* _numLures_

* GetFishingLureInfo(*luaindex* _lureIndex_)
** _Returns:_ *string* _name_, *textureName* _icon_, *integer* _stack_, *integer* _sellPrice_, *[ItemQuality|#ItemQuality]* _quality_

* SetFishingLure(*luaindex* _lureIndex_)

* GetFishingLure()
** _Returns:_ *luaindex:nilable* _lureIndex_

* GetNumViewableTreasureMaps()
** _Returns:_ *integer* _numViewableMaps_

* GetTreasureMapInfo(*luaindex* _treasureMapIndex_)
** _Returns:_ *string* _name_, *textureName* _imagePath_

* SetFloatingMarkerInfo(*[MapDisplayPinType|#MapDisplayPinType]* _markerType_, *number* _size_, *string* _primaryTexturePath_, *string* _secondaryTexturePath_, *bool* _primaryPulses_, *bool* _secondaryPulses_)

* SetFloatingMarkerGlobalAlpha(*number* _alpha_)

* GetAgentChatRequestInfo()
** _Returns:_ *bool* _isChatRequested_, *integer* _millisecondsSinceRequest_

* IsAgentChatActive()
** _Returns:_ *bool* _isActive_

* AcceptAgentChat()

* DeclineAgentChat()

* GetNumKillingAttacks()
** _Returns:_ *integer* _numKillingAttacks_

* GetKillingAttackInfo(*luaindex* _index_)
** _Returns:_ *string* _attackName_, *integer* _attackDamage_, *textureName* _attackIcon_, *bool* _wasKillingBlow_, *integer* _castTimeAgoMS_, *integer* _durationMS_, *integer* _numAttackHits_

* DoesKillingAttackHaveAttacker(*luaindex* _index_)
** _Returns:_ *bool* _hasAttacker_

* GetKillingAttackerInfo(*luaindex* _index_)
** _Returns:_ *string* _attackerRawName_, *integer* _attackerChampionPoints_, *integer* _attackerLevel_, *integer* _attackerAvARank_, *bool* _isPlayer_, *bool* _isBoss_, *[Alliance|#Alliance]* _alliance_, *string* _minionName_, *string* _attackerDisplayName_

* GetKillingAttackerBattlegroundAlliance(*luaindex* _index_)
** _Returns:_ *[BattlegroundAlliance|#BattlegroundAlliance]* _battlegroundAlliance_

* GetNumDeathRecapHints()
** _Returns:_ *integer* _numHints_

* GetDeathRecapHintInfo(*luaindex* _index_)
** _Returns:_ *string* _text_, *[DeathRecapHintImportance|#DeathRecapHintImportance]* _importance_

* GetNumTelvarStonesLost()
** _Returns:_ *integer* _telvarStonesLost_

* GetNumDyeableEquipSlots()
** _Returns:_ *integer* _numDyeableEquipSlots_

* GetNumDyeableCollectibleCategories()
** _Returns:_ *integer* _numDyeableCollectibleCategories_

* GetDyeableEquipSlot(*luaindex* _dyeableEquipSlotIndex_)
** _Returns:_ *[DyeableSlot|#DyeableSlot]* _dyeableSlot_

* GetDyeableCollectibleCategory(*luaindex* _dyeableCollectibleCategoryIndex_)
** _Returns:_ *[DyeableSlot|#DyeableSlot]* _dyeableSlot_

* GetDyeableEquipSlotGamepadOrder(*luaindex* _dyeableEquipSlotIndex_)
** _Returns:_ *luaindex* _gamepadOrder_

* GetDyeableCollectibleCategoryGamepadOrder(*luaindex* _dyeableCollectibleCategoryIndex_)
** _Returns:_ *luaindex* _gamepadOrder_

* GetEquipSlotFromDyeableSlot(*[DyeableSlot|#DyeableSlot]* _dyeableSlot_)
** _Returns:_ *[EquipSlot|#EquipSlot]* _equipSlot_

* GetCollectibleCategoryFromDyeableSlot(*[DyeableSlot|#DyeableSlot]* _dyeableSlot_)
** _Returns:_ *[CollectibleCategoryType|#CollectibleCategoryType]* _collectibleCategory_

* IsJusticeEnabled()
** _Returns:_ *bool* _isJusticeEnabled_

* IsJusticeEnabledForZone(*luaindex* _aZoneIndex_)
** _Returns:_ *bool* _isBountyEnabled_

* IsKillOnSight()
** _Returns:_ *bool* _isKillOnSight_

* GetInfamy()
** _Returns:_ *integer* _infamy_

* GetBounty()
** _Returns:_ *integer* _bounty_

* GetPlayerInfamyData()
** _Returns:_ *integer* _heat_, *integer* _bounty_

* GetReducedBountyPayoffAmount()
** _Returns:_ *integer* _payoffAmount_

* GetFullBountyPayoffAmount()
** _Returns:_ *integer* _payoffAmount_

* GetInfamyLevel(*integer* _infamyAmount_)
** _Returns:_ *[InfamyThresholdsType|#InfamyThresholdsType]* _infamyLevel_

* GetInfamyMeterSize()
** _Returns:_ *integer* _meterSize_

* GetFenceSellTransactionInfo()
** _Returns:_ *integer* _totalSells_, *integer* _sellsUsed_, *integer* _resetTimeSeconds_

* GetFenceLaunderTransactionInfo()
** _Returns:_ *integer* _totalLaunders_, *integer* _laundersUsed_, *integer* _resetTimeSeconds_

* GetSecondsUntilArrestTimeout()
** _Returns:_ *integer* _secondsUntilArrestTimeout_

* IsTrespassing()
** _Returns:_ *bool* _isTrespassing_

* GetTimeToClemencyResetInSeconds()
** _Returns:_ *integer* _timeRemaining_

* GetTimeToShadowyConnectionsResetInSeconds()
** _Returns:_ *integer* _timeRemaining_

* IsStuckFixPending()
** _Returns:_ *bool* _isStuckFixPending_

* CanUseStuck(*bool* _warn_)
** _Returns:_ *bool* _canUseStuck_

* GetTimeUntilStuckAvailable()
** _Returns:_ *integer* _millisecondsUntilAvailable_

* GetStuckCooldown()
** _Returns:_ *integer* _cooldownRemainingSecs_

* SendPlayerStuck *private* ()

* ApplyPendingHeraldryChanges()

* IsPlayerAllowedToEditHeraldry(*integer* _guildIndex_)
** _Returns:_ *bool* _allowed_

* IsCurrentlyCustomizingHeraldry()
** _Returns:_ *bool* _currentlyCustomizing_

* GetHeraldryCustomizationCosts()
** _Returns:_ *integer* _backgroundStyleCost_, *integer* _backgroundPrimaryColorCost_, *integer* _backgroundSecondaryColorCost_, *integer* _crestStyleCost_, *integer* _crestColorCost_

* IsCreatingHeraldryForFirstTime()
** _Returns:_ *bool* _creatingForFirstTime_

* HasPendingHeraldryChanges()
** _Returns:_ *bool* _hasPendingChanges_

* GetPendingHeraldryCost()
** _Returns:_ *integer* _pendingCost_

* RevertToSavedHeraldry(*bool* _hasActiveAppearance_)

* SetPendingHeraldryIndices(*luaindex* _backgroundCategoryIndex_, *luaindex* _backgroundStyleIndex_, *luaindex* _backgroundPrimaryColorIndex_, *luaindex* _backgroundSecondaryColorIndex_, *luaindex* _crestCategoryIndex_, *luaindex* _crestStyleIndex_, *luaindex* _crestColorIndex_)

* GetPendingHeraldryIndices()
** _Returns:_ *luaindex* _backgroundCategoryIndex_, *luaindex* _backgroundStyleIndex_, *luaindex* _backgroundPrimaryColorIndex_, *luaindex* _backgroundSecondaryColorIndex_, *luaindex* _crestCategoryIndex_, *luaindex* _crestStyleIndex_, *luaindex* _crestColorIndex_

* GetNumHeraldryColors()
** _Returns:_ *integer* _numColors_

* GetHeraldryColorInfo(*luaindex* _colorIndex_)
** _Returns:_ *string* _colorName_, *[DyeHueCategory|#DyeHueCategory]* _hueCategory_, *number* _r_, *number* _g_, *number* _b_, *integer* _sortKey_

* GetNumHeraldryBackgroundCategories()
** _Returns:_ *integer* _numCategories_

* GetHeraldryBackgroundCategoryInfo(*luaindex* _categoryIndex_)
** _Returns:_ *string* _categoryName_, *textureName* _icon_

* GetNumHeraldryBackgroundStyles(*luaindex* _categoryIndex_)
** _Returns:_ *integer* _numStyles_

* GetHeraldryBackgroundStyleInfo(*luaindex* _categoryIndex_, *luaindex* _styleIndex_)
** _Returns:_ *string* _styleName_, *textureName* _icon_

* GetNumHeraldryCrestCategories()
** _Returns:_ *integer* _numCategories_

* GetHeraldryCrestCategoryInfo(*luaindex* _categoryIndex_)
** _Returns:_ *string* _categoryName_, *textureName* _icon_

* GetNumHeraldryCrestStyles(*luaindex* _categoryIndex_)
** _Returns:_ *integer* _numStyles_

* GetHeraldryCrestStyleInfo(*luaindex* _categoryIndex_, *luaindex* _styleIndex_)
** _Returns:_ *string* _styleName_, *textureName* _icon_

* StartHeraldryCustomization(*integer* _guildIndex_)

* EndHeraldryCustomization()

* GetHeraldryGuildBankedMoney()
** _Returns:_ *integer:nilable* _money_

* GetGamepadTemplate()
** _Returns:_ *[GamepadTemplate|#GamepadTemplate]* _gamepadTemplate_

* SendAllCachedSettingMessages()

* GetVibrationInfoFromTrigger(*[GamepadVibrationTrigger|#GamepadVibrationTrigger]* _triggerType_)
** _Returns:_ *integer* _durationMS_, *number* _coarseMotor_, *number* _fineMotor_, *number* _leftTriggerMotor_, *number* _rightTriggerMotor_, *bool* _foundInfo_, *string* _debugSourceInfo_

* SetShouldRenderWorld(*bool* _shouldRenderWorld_)

* GetNumChampionDisciplines()
** _Returns:_ *integer* _numDisciplines_

* GetChampionDisciplineName(*luaindex* _disciplineIndex_)
** _Returns:_ *string* _name_

* GetChampionDisciplineDescription(*luaindex* _disciplineIndex_)
** _Returns:_ *string* _description_

* GetChampionDisciplineAttribute(*luaindex* _disciplineIndex_)
** _Returns:_ *[Attributes|#Attributes]* _attribute_

* GetNumChampionDisciplineSkills(*luaindex* _disciplineIndex_)
** _Returns:_ *integer* _numSkills_

* GetChampionSkillPosition(*luaindex* _disciplineIndex_, *luaindex* _skillIndex_)
** _Returns:_ *number* _normalizedX_, *number* _normalizedY_

* GetChampionSkillName(*luaindex* _disciplineIndex_, *luaindex* _skillIndex_)
** _Returns:_ *string* _skillName_

* GetMaxPossiblePointsInChampionSkill()
** _Returns:_ *integer* _maxPossiblePoints_

* GetNumPointsSpentOnChampionSkill(*luaindex* _disciplineIndex_, *luaindex* _skillIndex_)
** _Returns:_ *integer* _numSpentPoints_

* GetNumPointsSpentInChampionDiscipline(*luaindex* _disciplineIndex_)
** _Returns:_ *integer* _numSpentPoints_

* GetChampionSkillUnlockLevel(*luaindex* _disciplineIndex_, *luaindex* _skillIndex_)
** _Returns:_ *integer:nilable* _autoGrantLevel_

* GetNumSpentChampionPoints(*[Attributes|#Attributes]* _attribute_)
** _Returns:_ *integer* _numSpentPoints_

* GetNumUnspentChampionPoints(*[Attributes|#Attributes]* _attribute_)
** _Returns:_ *integer* _numUnspentPoints_

* ClearPendingChampionPoints()

* GetNumPendingChampionPoints(*luaindex* _disciplineIndex_, *luaindex* _skillIndex_)
** _Returns:_ *integer* _numPendingPoints_

* SetNumPendingChampionPoints(*luaindex* _disciplineIndex_, *luaindex* _skillIndex_, *integer* _numPendingPoints_)

* HasAvailableChampionPointsInAttribute(*[Attributes|#Attributes]* _attribute_)
** _Returns:_ *bool* _hasPoints_

* WillChampionSkillBeUnlocked(*luaindex* _disciplineIndex_, *luaindex* _skillIndex_)
** _Returns:_ *bool* _willBeUnlocked_

* SetChampionIsInRespecMode(*bool* _isInRespecMode_)

* IsChampionInRespecMode()
** _Returns:_ *bool* _isInRespecMode_

* IsChampionRespecNeeded()
** _Returns:_ *bool* _needsRespec_

* SpendPendingChampionPoints()
** _Returns:_ *bool* _requested_

* SetChampionMusicActive(*bool* _active_)

* GetChampionAbilityDescription(*integer* _abilityId_, *integer* _numPendingPoints_)
** _Returns:_ *string* _description_

* GetChampionAbilityId(*luaindex* _disciplineIndex_, *luaindex* _skillIndex_)
** _Returns:_ *integer* _abilityId_

* GetChampionRespecCost()
** _Returns:_ *integer* _cost_

* GetChampionPointAttributeForRank(*integer* _rank_)
** _Returns:_ *[Attributes|#Attributes]* _pointAttribute_

* IsChampionSystemUnlocked()
** _Returns:_ *bool* _unlocked_

* AreChampionPointsActive()
** _Returns:_ *bool* _active_, *[ChampionPointActiveReason|#ChampionPointActiveReason]* _activeReason_

* GetNumDefaultQuickChats()
** _Returns:_ *integer* _numQuickChats_

* GetDefaultQuickChatName(*luaindex* _index_)
** _Returns:_ *string* _name_

* GetDefaultQuickChatMessage(*luaindex* _index_)
** _Returns:_ *string* _message_

* PlayDefaultQuickChat *private* (*luaindex* _index_)

* ZoUTF8StringLength(*string* _string_)
** _Returns:_ *integer* _length_

* SetSCTAnimationOffsetX(*object* _timeline_, *number* _offsetX_)

* SetSCTAnimationOffsetY(*object* _timeline_, *number* _offsetY_)

* ResetSCTDataToDefaults()

* GetSCTKeyboardFont()
** _Returns:_ *string* _fontName_, *[FontStyle|#FontStyle]* _fontStyle_

* SetSCTKeyboardFont(*string* _fontName_, *[FontStyle|#FontStyle]* _fontStyle_)

* GetSCTGamepadFont()
** _Returns:_ *string* _fontName_, *[FontStyle|#FontStyle]* _fontStyle_

* SetSCTGamepadFont(*string* _fontName_, *[FontStyle|#FontStyle]* _fontStyle_)

* GetSCTEventVisualInfoId(*[SCTEventType|#SCTEventType]* _eventType_)
** _Returns:_ *integer* _SCTEventVisualInfoId_

* SetSCTEventVisualInfo(*[SCTEventType|#SCTEventType]* _eventType_, *integer* _SCTEventVisualInfoId_)

* GetNumSCTSlots()
** _Returns:_ *integer* _numSlots_

* CreateNewSCTSlot()
** _Returns:_ *luaindex* _slotIndex_

* GetSCTSlotPosition(*luaindex* _slotIndex_)
** _Returns:_ *[SCTUnitAnchorType|#SCTUnitAnchorType]* _SCTAnchorType_, *[AnchorPosition|#AnchorPosition]* _anchorPoint_, *number* _UIOffsetX_, *number* _UIOffsetY_, *number* _cameraOffsetRight_, *number* _cameraOffsetUp_

* SetSCTSlotPosition(*luaindex* _slotIndex_, *[SCTUnitAnchorType|#SCTUnitAnchorType]* _SCTAnchorType_, *[AnchorPosition|#AnchorPosition]* _anchorPoint_, *number* _UIOffsetX_, *number* _UIOffsetY_, *number* _cameraOffsetRight_, *number* _cameraOffsetUp_)

* GetSCTSlotZoomedInPosition(*luaindex* _slotIndex_)
** _Returns:_ *number* _zoomedInCameraDistanceThreshold_, *number* _zoomedInUIOffsetX_, *number* _zoomedInUIOffsetY_

* SetSCTSlotZoomedInPosition(*luaindex* _slotIndex_, *number* _zoomedInCameraDistanceThreshold_, *number* _zoomedInUIOffsetX_, *number* _zoomedInUIOffsetY_)

* GetSCTSlotClamping(*luaindex* _slotIndex_)
** _Returns:_ *number* _topEdgeUIOffsetBuffer_, *number* _bottomEdgeUIOffsetBuffer_

* SetSCTSlotClamping(*luaindex* _slotIndex_, *number* _topEdgeUIOffsetBuffer_, *number* _bottomEdgeUIOffsetBuffer_)

* GetSCTSlotAnimationTimeline(*luaindex* _slotIndex_)
** _Returns:_ *string* _animationTimelineName_

* SetSCTSlotAnimationTimeline(*luaindex* _slotIndex_, *string* _animationTimelineName_)

* GetSCTSlotAnimationMinimumSpacing(*luaindex* _slotIndex_)
** _Returns:_ *integer* _minSpacingMS_

* SetSCTSlotAnimationMinimumSpacing(*luaindex* _slotIndex_, *integer* _minSpacingMS_)

* IsSCTSlotEventTypeShown(*luaindex* _slotIndex_, *[SCTEventType|#SCTEventType]* _eventType_)
** _Returns:_ *bool* _isShown_

* SetSCTSlotEventTypeShown(*luaindex* _slotIndex_, *[SCTEventType|#SCTEventType]* _eventType_, *bool* _isShown_)

* DoesSCTSlotAllowTargetType(*luaindex* _slotIndex_, *[SCTUnitType|#SCTUnitType]* _targetType_)
** _Returns:_ *bool* _allowed_

* AddSCTSlotAllowedTargetType(*luaindex* _slotIndex_, *[SCTUnitType|#SCTUnitType]* _targetType_)

* ClearSCTSlotAllowedTargetTypes(*luaindex* _slotIndex_)

* DoesSCTSlotExcludeTargetType(*luaindex* _slotIndex_, *[SCTUnitType|#SCTUnitType]* _targetType_)
** _Returns:_ *bool* _allowed_

* AddSCTSlotExcludedTargetType(*luaindex* _slotIndex_, *[SCTUnitType|#SCTUnitType]* _targetType_)

* ClearSCTSlotExcludedTargetTypes(*luaindex* _slotIndex_)

* DoesSCTSlotAllowSourceType(*luaindex* _slotIndex_, *[SCTUnitType|#SCTUnitType]* _targetType_)
** _Returns:_ *bool* _allowed_

* AddSCTSlotAllowedSourceType(*luaindex* _slotIndex_, *[SCTUnitType|#SCTUnitType]* _sourceType_)

* ClearSCTSlotAllowedSourceTypes(*luaindex* _slotIndex_)

* DoesSCTSlotExcludeSourceType(*luaindex* _slotIndex_, *[SCTUnitType|#SCTUnitType]* _targetType_)
** _Returns:_ *bool* _allowed_

* AddSCTSlotExcludedSourceType(*luaindex* _slotIndex_, *[SCTUnitType|#SCTUnitType]* _sourceType_)

* ClearSCTSlotExcludedSourceTypes(*luaindex* _slotIndex_)

* GetSCTSlotTargetReputationTypes(*luaindex* _slotIndex_)
** _Returns:_ *bool* _showForFriendly_, *bool* _showForNeutral_, *bool* _showForEnemy_

* SetSCTSlotTargetReputationTypes(*luaindex* _slotIndex_, *bool* _showForFriendly_, *bool* _showForNeutral_, *bool* _showForEnemy_)

* GetSCTSlotSourceReputationTypes(*luaindex* _slotIndex_)
** _Returns:_ *bool* _showForFriendly_, *bool* _showForNeutral_, *bool* _showForEnemy_

* SetSCTSlotSourceReputationTypes(*luaindex* _slotIndex_, *bool* _showForFriendly_, *bool* _showForNeutral_, *bool* _showForEnemy_)

* GetSCTSlotEventControlScales(*luaindex* _slotIndex_)
** _Returns:_ *number* _defaultScale_, *number* _critScale_

* SetSCTSlotEventControlScales(*luaindex* _slotIndex_, *number* _defaultScale_, *number* _critScale_)

* GetSCTSlotKeyboardCloudId(*luaindex* _slotIndex_)
** _Returns:_ *integer* _SCTCloudId_

* SetSCTSlotKeyboardCloud(*luaindex* _slotIndex_, *integer* _SCTCloudId_)

* GetSCTSlotGamepadCloudId(*luaindex* _slotIndex_)
** _Returns:_ *integer* _SCTCloudId_

* SetSCTSlotGamepadCloud(*luaindex* _slotIndex_, *integer* _SCTCloudId_)

* CreateNewSCTEventVisualInfo()
** _Returns:_ *integer* _SCTEventVisualInfoId_

* GetSCTSlotEventVisualInfo(*luaindex* _slotIndex_, *[SCTEventType|#SCTEventType]* _eventType_)
** _Returns:_ *integer* _SCTEventVisualInfoId_

* SetSCTSlotEventVisualInfo(*luaindex* _slotIndex_, *[SCTEventType|#SCTEventType]* _eventType_, *integer* _SCTEventVisualInfoId_)

* GetSCTEventVisualInfoTextFormat(*integer* _SCTEventVisualInfoId_, *[SCTEventTextType|#SCTEventTextType]* _textType_)
** _Returns:_ *string* _format_, *bool* _enabled_

* SetSCTEventVisualInfoTextFormat(*integer* _SCTEventVisualInfoId_, *[SCTEventTextType|#SCTEventTextType]* _textType_, *string* _format_)

* GetSCTEventVisualInfoTextFontSizes(*integer* _SCTEventVisualInfoId_, *[SCTEventTextType|#SCTEventTextType]* _textType_)
** _Returns:_ *integer* _keyboardFontSize_, *integer* _gamepadFontSize_, *bool* _enabled_

* SetSCTEventVisualInfoTextFontSizes(*integer* _SCTEventVisualInfoId_, *[SCTEventTextType|#SCTEventTextType]* _textType_, *integer* _keyboardFontSize_, *integer* _gamepadFontSize_)

* GetSCTEventVisualInfoTextColor(*integer* _SCTEventVisualInfoId_, *[SCTEventTextType|#SCTEventTextType]* _textType_)
** _Returns:_ *number* _r_, *number* _g_, *number* _b_, *bool* _enabled_

* SetSCTEventVisualInfoTextColor(*integer* _SCTEventVisualInfoId_, *[SCTEventTextType|#SCTEventTextType]* _textType_, *number* _r_, *number* _g_, *number* _b_)

* GetSCTEventVisualInfoHideWhenValueIsZero(*integer* _SCTEventVisualInfoId_)
** _Returns:_ *bool* _hideWhenValueIsZero_, *bool* _enabled_

* SetSCTEventVisualInfoHideWhenValueIsZero(*integer* _SCTEventVisualInfoId_, *bool* _hideWhenValueIsZero_)

* CreateNewSCTCloud()
** _Returns:_ *integer* _SCTCloudId_

* GetNumSCTCloudOffsets(*integer* _SCTCloudId_)

* GetSCTCloudOffset(*integer* _SCTCloudId_, *luaindex* _offsetIndex_, *integer* _ordering_, *number* _UIOffsetX_, *number* _UIOffsetY_)

* AddSCTCloudOffset(*integer* _SCTCloudId_, *integer* _ordering_, *number* _UIOffsetX_, *number* _UIOffsetY_)

* ClearSCTCloudOffsets(*integer* _SCTCloudId_)

* GetSCTCloudAnimationOverlapPercent(*integer* _SCTCloudId_)
** _Returns:_ *number* _animationOverlapPercent_

* SetSCTCloudAnimationOverlapPercent(*integer* _SCTCloudId_, *number* _animationOverlapPercent_)

* ShowMarketProduct(*integer* _marketProductId_, *[MarketOpenOperation|#MarketOpenOperation]* _source_)

* ShowMarketAndSearch(*string* _marketProductSearchString_, *[MarketOpenOperation|#MarketOpenOperation]* _source_)

* RequestPurchaseMarketProduct(*integer* _marketProductId_, *luaindex* _presentationIndex_)

* ShowBuyCrownsDialog()

* ShowEsoPlusPage(*[MarketOpenOperation|#MarketOpenOperation]* _source_)

* StartWorldParticleEffect *private* (*integer* _particleEffectId_)

* StopWorldParticleEffect *private* (*integer* _particleEffectId_)

* SetWorldParticleEffectPosition *private* (*integer* _particleEffectId_, *number* _worldX_, *number* _worldY_, *number* _worldZ_)

* SetWorldParticleEffectOrientation *private* (*integer* _particleEffectId_, *number* _pitchRadians_, *number* _yawRadians_, *number* _rollRadians_)

* SetWorldParticleEffectScale *private* (*integer* _particleEffectId_, *number* _scale_)

* DeleteWorldParticleEffect *private* (*integer* _particleEffectId_)

* StartWorldEffectOnPlayer *private* (*[UIWorldEffect|#UIWorldEffect]* _UIWorldEffect_)

* GetActiveUserEmailAddress *private* ()
** _Returns:_ *string* _emailAddress_

* GetCurrentZoneDungeonDifficulty()
** _Returns:_ *[DungeonDifficulty|#DungeonDifficulty]* _isVeteranDifficulty_

* CopyHousePermissions(*integer* _sourceHouseId_, *integer* _destinationHouseId_)

* GetNumHousingPermissions(*integer* _houseId_, *[HousePermissionUserGroup|#HousePermissionUserGroup]* _permissionCategory_)
** _Returns:_ *integer* _numPermissions_

* DoesHousingUserGroupHaveAccess(*integer* _houseId_, *[HousePermissionUserGroup|#HousePermissionUserGroup]* _permissionCategory_, *luaindex* _index_)
** _Returns:_ *bool* _hasAccess_

* IsHousingPermissionEnabled(*integer* _houseId_, *[HousePermissionUserGroup|#HousePermissionUserGroup]* _permissionCategory_, *luaindex* _index_, *[HousePermissionSetting|#HousePermissionSetting]* _setting_)
** _Returns:_ *bool* _isPermissionEnabled_

* IsHousingPermissionMarkedForDelete(*integer* _houseId_, *[HousePermissionUserGroup|#HousePermissionUserGroup]* _permissionCategory_, *luaindex* _index_)
** _Returns:_ *bool* _isMarkedForDelete_

* GetHousingUserGroupDisplayName(*integer* _houseId_, *[HousePermissionUserGroup|#HousePermissionUserGroup]* _permissionCategory_, *luaindex* _index_)
** _Returns:_ *string* _displayName_

* SetHousingPermissionPreset(*integer* _houseId_, *[HousePermissionUserGroup|#HousePermissionUserGroup]* _permissionCategory_, *luaindex* _index_, *[HousePermissionPresetSetting|#HousePermissionPresetSetting]* _preset_, *bool* _setForAllHouses_)

* RemoveHousingPermission(*integer* _houseId_, *[HousePermissionUserGroup|#HousePermissionUserGroup]* _permissionCategory_, *luaindex* _index_, *bool* _removeFromAllHouses_)

* AddHousingPermission(*integer* _houseId_, *[HousePermissionUserGroup|#HousePermissionUserGroup]* _permissionCategory_, *bool* _grantAccess_, *[HousePermissionPresetSetting|#HousePermissionPresetSetting]* _preset_, *bool* _addToAllHouses_, *string* _targetName_)

* GetHousingPermissionPresetType(*integer* _houseId_, *[HousePermissionUserGroup|#HousePermissionUserGroup]* _permissionCategory_, *luaindex* _index_)
** _Returns:_ *[HousePermissionPresetSetting|#HousePermissionPresetSetting]* _preset_

* SetHousingPrimaryHouse(*integer* _houseId_)

* GetHousingPrimaryHouse()
** _Returns:_ *integer* _houseId_

* GetCurrentZoneHouseId()
** _Returns:_ *integer* _houseId_

* GetCurrentHousePopulationCap()
** _Returns:_ *integer* _popCap_

* GetCollectibleIdForHouse(*integer* _houseId_)
** _Returns:_ *integer* _collectibleId_

* GetNumFurnitureCategories()
** _Returns:_ *integer* _numCategories_

* GetFurnitureCategoryId(*luaindex* _categoryIndex_)
** _Returns:_ *integer* _categoryId_

* GetNumFurnitureSubcategories(*luaindex* _categoryIndex_)
** _Returns:_ *integer* _numSubcategories_

* GetFurnitureSubcategoryId(*luaindex* _categoryIndex_, *luaindex* _subcategoryIndex_)
** _Returns:_ *integer* _subcategoryId_

* GetFurnitureCategoryInfo(*integer* _furnitureCategoryId_)
** _Returns:_ *string* _displayName_, *integer:nilable* _parentCategoryId_, *bool* _availableInTradingHouse_, *integer* _categoryOrder_

* GetFurnitureCategoryKeyboardIcons(*integer* _furnitureCategoryId_)
** _Returns:_ *textureName* _normalIcon_, *textureName* _pressedIcon_, *textureName* _mouseoverIcon_

* GetFurnitureCategoryGamepadIcon(*integer* _furnitureCategoryId_)
** _Returns:_ *textureName* _gamepadIcon_

* GetHouseZoneId(*integer* _houseId_)
** _Returns:_ *integer* _zoneId_

* GetHouseFoundInZoneId(*integer* _houseId_)
** _Returns:_ *integer* _zoneId_

* GetHouseCategoryType(*integer* _houseId_)
** _Returns:_ *[HouseCategoryType|#HouseCategoryType]* _houseType_

* GetHousePreviewBackgroundImage(*integer* _houseId_)
** _Returns:_ *textureName* _previewBackgroundFileIndex_

* GetNumHouseTemplatesForHouse(*integer* _houseId_)
** _Returns:_ *integer* _numHouseTemplates_

* GetHouseTemplateIdByIndexForHouse(*integer* _houseId_, *luaindex* _houseTemplateIndex_)
** _Returns:_ *integer* _houseTemplateId_

* IsPrimaryHouse(*integer* _houseId_)
** _Returns:_ *bool* _isPrimaryHouse_

* HousingEditorToggleSurfaceDragMode()

* HousingEditorIsSurfaceDragModeEnabled()
** _Returns:_ *bool* _enabled_

* HousingEditorRequestSelectedPlacement()
** _Returns:_ *[HousingRequestResult|#HousingRequestResult]* _result_

* HousingEditorRequestItemPlacement(*[Bag|#Bag]* _bagId_, *integer* _slotIndex_, *integer* _worldX_, *integer* _worldY_, *integer* _worldZ_, *number* _pitchRadians_, *number* _yawRadians_, *number* _rollRadians_)
** _Returns:_ *[HousingRequestResult|#HousingRequestResult]* _result_

* HousingEditorRequestCollectiblePlacement(*integer* _collectibleId_, *integer* _worldX_, *integer* _worldY_, *integer* _worldZ_, *number* _pitchRadians_, *number* _yawRadians_, *number* _rollRadians_)
** _Returns:_ *[HousingRequestResult|#HousingRequestResult]* _result_

* HousingEditorRequestChangePositionAndOrientation(*id64* _furnitureId_, *integer* _worldX_, *integer* _worldY_, *integer* _worldZ_, *number* _pitchRadians_, *number* _yawRadians_, *number* _rollRadians_)
** _Returns:_ *[HousingRequestResult|#HousingRequestResult]* _result_

* HousingEditorRequestChangePosition(*id64* _furnitureId_, *integer* _worldX_, *integer* _worldY_, *integer* _worldZ_)
** _Returns:_ *[HousingRequestResult|#HousingRequestResult]* _result_

* HousingEditorRequestChangeOrientation(*id64* _furnitureId_, *number* _pitchRadians_, *number* _yawRadians_, *number* _rollRadians_)
** _Returns:_ *[HousingRequestResult|#HousingRequestResult]* _result_

* HousingEditorGetFurnitureWorldPosition(*id64* _furnitureId_)
** _Returns:_ *integer* _worldX_, *integer* _worldY_, *integer* _worldZ_

* HousingEditorGetFurnitureWorldBounds(*id64* _furnitureId_)
** _Returns:_ *integer* _minWorldX_, *integer* _minWorldY_, *integer* _minWorldZ_, *integer* _maxWorldX_, *integer* _maxWorldY_, *integer* _maxWorldZ_

* HousingEditorGetFurnitureLocalBounds(*id64* _furnitureId_)
** _Returns:_ *number* _minLocalX_, *number* _minLocalY_, *number* _minLocalZ_, *number* _maxLocalX_, *number* _maxLocalY_, *number* _maxLocalZ_

* HousingEditorGetFurnitureOrientation(*id64* _furnitureId_)
** _Returns:_ *number* _pitchRadians_, *number* _yawRadians_, *number* _rollRadians_

* HousingEditorRequestRemoveSelectedFurniture()
** _Returns:_ *[HousingRequestResult|#HousingRequestResult]* _result_

* HousingEditorRequestRemoveFurniture(*id64* _furnitureId_)
** _Returns:_ *[HousingRequestResult|#HousingRequestResult]* _result_

* HousingEditorGetSelectedFurnitureId()
** _Returns:_ *id64:nilable* _furnitureId_

* HousingEditorGetSelectedFurnitureStackCount()
** _Returns:_ *integer* _stackCount_

* HousingEditorSelectFurnitureById(*id64* _furnitureId_)
** _Returns:_ *[HousingRequestResult|#HousingRequestResult]* _result_

* HousingEditorRotateFurniture(*[AxisTypes|#AxisTypes]* _axis_, *number* _magnitude_)

* HousingEditorPushFurniture(*number* _magnitude_)

* HousingEditorAlignFurnitureToSurface()

* HousingEditorCreateItemFurnitureForPlacement(*[Bag|#Bag]* _bagId_, *integer* _slotIndex_)
** _Returns:_ *bool* _success_

* HousingEditorCreateCollectibleFurnitureForPlacement(*integer* _collectibleId_)
** _Returns:_ *bool* _success_

* HousingEditorCreateFurnitureForPlacementFromMarketProduct(*integer* _marketProductId_)
** _Returns:_ *bool* _success_

* HousingEditorEndCurrentPreview()

* HousingEditorSelectTargettedFurniture()
** _Returns:_ *[HousingRequestResult|#HousingRequestResult]* _result_

* HousingEditorCanSelectTargettedFurniture()
** _Returns:_ *bool* _hasTarget_

* HousingEditorRequestModeChange(*[HousingEditorMode|#HousingEditorMode]* _mode_)
** _Returns:_ *[HousingRequestResult|#HousingRequestResult]* _result_

* GetHousingEditorMode()
** _Returns:_ *[HousingEditorMode|#HousingEditorMode]* _mode_

* GetHousingVisitorRole()
** _Returns:_ *[HousingVisitorRole|#HousingVisitorRole]* _role_

* GetNextPlacedHousingFurnitureId(*id64:nilable* _lastFurnitureId_)
** _Returns:_ *id64:nilable* _nextFurnitureId_

* GetPlacedHousingFurnitureInfo(*id64* _furnitureId_)
** _Returns:_ *string* _itemName_, *textureName* _icon_, *integer* _furnitureDataId_

* GetPlacedHousingFurnitureQuality(*id64* _furnitureId_)
** _Returns:_ *[ItemQuality|#ItemQuality]* _quality_

* HousingEditorCanPlaceCollectible(*integer* _collectibleId_)
** _Returns:_ *bool* _success_

* HousingEditorJumpToSafeLocation()

* GetHousingEditorConstants()
** _Returns:_ *number* _pushSpeedPerSecond_, *number* _rotationStepSizeRadians_, *integer* _numTicksPerSecondForRotationChange_

* HousingEditorApplyTemplate(*integer* _houseTemplateId_)

* GetCurrentHousePreviewTemplateId()
** _Returns:_ *integer* _houseTemplateId_

* HousingEditorPreviewTemplate(*integer* _houseTemplateId_)

* RequestOpenHouseStore()

* GetHouseFurnishingPlacementLimit(*integer* _houseId_, *[HousingFurnishingLimitType|#HousingFurnishingLimitType]* _limitType_)
** _Returns:_ *integer* _furnishingPlacementLimit_

* GetNumHouseFurnishingsPlaced(*[HousingFurnishingLimitType|#HousingFurnishingLimitType]* _limitType_)
** _Returns:_ *integer* _numFurnishingsPlaced_

* IsOwnerOfCurrentHouse()
** _Returns:_ *bool* _isOwner_

* HasAnyEditingPermissionsForCurrentHouse()
** _Returns:_ *bool* _canEdit_

* HasPermissionSettingForCurrentHouse(*[HousePermissionSetting|#HousePermissionSetting]* _setting_)
** _Returns:_ *bool* _hasSetting_

* GetPlacedFurnitureLink(*id64* _placedFurnitureId_, *[LinkStyle|#LinkStyle]* _linkStyle_)
** _Returns:_ *string* _itemLink_, *string* _collectibleLink_

* GetCurrentHousePopulation()
** _Returns:_ *integer* _population_

* GetFurnitureIdFromCollectibleId(*integer* _collectibleId_)
** _Returns:_ *id64* _furnitureId_

* GetCollectibleIdFromFurnitureId(*id64* _furnitureId_)
** _Returns:_ *integer* _collectibleId_

* GetItemUniqueIdFromFurnitureId(*id64* _furnitureId_)
** _Returns:_ *id64* _itemUniqueId_

* GetFurnitureIdFromItemUniqueId(*id64* _itemUniqueId_)
** _Returns:_ *id64* _furnitureId_

* SetNameplateKeyboardFont(*string* _fontName_, *[FontStyle|#FontStyle]* _fontStyle_)

* GetNameplateKeyboardFont()
** _Returns:_ *string* _fontName_, *[FontStyle|#FontStyle]* _fontStyle_

* SetNameplateGamepadFont(*string* _fontName_, *[FontStyle|#FontStyle]* _fontStyle_)

* GetNameplateGamepadFont()
** _Returns:_ *string* _fontName_, *[FontStyle|#FontStyle]* _fontStyle_

* GetNextActiveArtificialEffectId(*integer:nilable* _lastActiveEffectId_)
** _Returns:_ *integer:nilable* _nextActiveEffectId_

* GetArtificialEffectInfo(*integer* _artificialEffectId_)
** _Returns:_ *string* _displayName_, *textureName* _icon_, *[BuffEffectType|#BuffEffectType]* _effectType_, *integer* _sortOrder_, *number* _timeStartedS_, *number* _timeEndingS_

* GetArtificialEffectTooltipText(*integer* _artificialEffectId_)
** _Returns:_ *string* _tooltipText_

* IsCutsceneActive()
** _Returns:_ *bool* _isCutsceneActive_

* GetActiveCutsceneVideoPath()
** _Returns:_ *string* _videoPath_

* RequestEndCutscene()

* HasEsoPlusFreeTrialNotification()
** _Returns:_ *bool* _hasFreeTrialNotification_

* ClearEsoPlusFreeTrialNotification()


* GetUnitLevel(*string* _unitTag_)
** _Returns:_ *integer* _level_

* GetLinkType(*string* _itemLink_)
** _Returns:_ *[LinkType|#LinkType]* _linkType_

* IsGuildBankOpen()
** _Returns:_ *bool* _isGuildBankOpen_

* GetCurrentMoney()
** _Returns:_ *integer* _money_

* GetCarriedCurrencyAmount(*[CurrencyType|#CurrencyType]* _type_)
** _Returns:_ *integer* _currencyAmount_

* GetMaxCarriedCurrencyAmount(*[CurrencyType|#CurrencyType]* _type_)
** _Returns:_ *integer* _currencyAmount_

* GetBankedCurrencyAmount(*[CurrencyType|#CurrencyType]* _type_)
** _Returns:_ *integer* _currencyAmount_

* DepositCurrencyIntoBank(*[CurrencyType|#CurrencyType]* _type_, *integer* _currencyAmount_)

* WithdrawCurrencyFromBank(*[CurrencyType|#CurrencyType]* _type_, *integer* _currencyAmount_)

* GetMaxBankWithdrawal(*[CurrencyType|#CurrencyType]* _type_)
** _Returns:_ *integer* _maxWithdrawal_

* GetMaxBankDeposit(*[CurrencyType|#CurrencyType]* _type_)
** _Returns:_ *integer* _maxDeposit_

* GetMaxBankCurrencyAmount(*[CurrencyType|#CurrencyType]* _type_)
** _Returns:_ *integer* _currencyAmount_

* GetGuildBankedMoney()
** _Returns:_ *integer* _money_

* GetGuildBankedCurrencyAmount(*[CurrencyType|#CurrencyType]* _type_)
** _Returns:_ *integer* _currencyAmount_

* DepositMoneyIntoGuildBank(*integer* _money_)

* WithdrawMoneyFromGuildBank(*integer* _money_)

* DepositCurrencyIntoGuildBank(*[CurrencyType|#CurrencyType]* _type_, *integer* _currencyAmount_)

* WithdrawCurrencyFromGuildBank(*[CurrencyType|#CurrencyType]* _type_, *integer* _currencyAmount_)

* GetMaxGuildBankWithdrawal(*[CurrencyType|#CurrencyType]* _type_)
** _Returns:_ *integer* _maxWithdrawal_

* GetMaxGuildBankDeposit(*[CurrencyType|#CurrencyType]* _type_)
** _Returns:_ *integer* _maxDeposit_

* GetMaxGuildBankCurrencyAmount(*[CurrencyType|#CurrencyType]* _type_)
** _Returns:_ *integer* _currencyAmount_

* GetTelvarStonePercentLossOnPvpDeath()
** _Returns:_ *number* _percentLoss_

* GetTelvarStonePercentLossOnNonPvpDeath()
** _Returns:_ *number* _percentLoss_

* UseItem *protected* (*integer* _bagId_, *integer* _slotIndex_)

* CanInteractWithItem(*integer* _bagId_, *integer* _slotIndex_)
** _Returns:_ *bool* _canInteract_

* UnequipItem(*[EquipSlot|#EquipSlot]* _equipSlot_)

* DestroyItem(*[Bag|#Bag]* _bagId_, *integer* _slotIndex_)

* GetNextBankUpgradePrice()
** _Returns:_ *integer* _cost_

* GetNextBackpackUpgradePrice()
** _Returns:_ *integer* _cost_

* BuyBankSpace()

* BuyBagSpace()

* DisplayBankUpgrade()

* GetBagUseableSize(*[Bag|#Bag]* _bagId_)
** _Returns:_ *integer* _bagSlots_

* GetBagSize(*[Bag|#Bag]* _bagId_)
** _Returns:_ *integer* _bagSlots_

* IsArmorEffectivenessReduced(*integer* _bagId_, *integer* _slotIndex_)
** _Returns:_ *bool* _effectivenessReduced_

* GetNumBagUsedSlots(*[Bag|#Bag]* _bagId_)
** _Returns:_ *integer* _usedSlots_

* GetNumBagFreeSlots(*[Bag|#Bag]* _bagId_)
** _Returns:_ *integer* _freeSlots_

* FindFirstEmptySlotInBag(*[Bag|#Bag]* _bagId_)
** _Returns:_ *integer:nilable* _slotIndex_

* GetItemFilterTypeInfo(*integer* _bagId_, *integer* _slotIndex_)
** _Uses variable returns..._
** _Returns:_ *[ItemFilterType|#ItemFilterType]* _itemFilterType_

* GetItemCooldownInfo(*[Bag|#Bag]* _bagId_, *integer* _slotIndex_)
** _Returns:_ *integer* _remain_, *integer* _duration_

* GetItemStatValue(*integer* _bagId_, *integer* _slotIndex_)
** _Returns:_ *integer* _statValue_

* GetItemSoundCategory(*integer* _bagId_, *integer* _slotIndex_)
** _Returns:_ *integer* _itemSoundCategory_

* IsItemBound(*integer* _bagId_, *integer* _slotIndex_)
** _Returns:_ *bool* _isBound_

* IsItemEnchantable(*integer* _bagId_, *integer* _slotIndex_)
** _Returns:_ *bool* _enchantable_

* IsItemEnchantment(*integer* _bagId_, *integer* _slotIndex_)
** _Returns:_ *bool* _enchantment_

* CanItemTakeEnchantment(*integer* _itemToEnchantBagId_, *integer* _itemToEnchantSlotIndex_, *integer* _enchantmentToUseBagId_, *integer* _enchantmentToUseSlotIndex_)
** _Returns:_ *bool* _canEnchant_

* EnchantItem(*integer* _itemToEnchantBagId_, *integer* _itemToEnchantSlotIndex_, *integer* _enchantmentToUseBagId_, *integer* _enchantmentToUseSlotIndex_)

* CanConvertItemStyle(*integer* _itemToBagId_, *integer* _itemToSlotIndex_, *integer* _newStyle_)
** _Returns:_ *bool* _canConvert_

* ConvertItemStyle(*integer* _itemToBagId_, *integer* _itemToSlotIndex_, *integer* _newStyle_)

* IsItemChargeable(*integer* _bagId_, *integer* _slotIndex_)
** _Returns:_ *bool* _rechargeable_

* GetAmountSoulGemWouldChargeItem(*integer* _itemToChargeBagId_, *integer* _itemToChargeSlotIndex_, *integer* _soulGemToConsumeBagId_, *integer* _soulGemToConsumeSlotIndex_)
** _Returns:_ *integer* _chargeAmount_

* ChargeItemWithSoulGem(*integer* _itemToChargeBagId_, *integer* _itemToChargeSlotIndex_, *integer* _soulGemToConsumeBagId_, *integer* _soulGemToConsumeSlotIndex_)

* IsItemSoulGem(*[SoulGemType|#SoulGemType]* _soulGemType_, *integer* _bagId_, *integer* _slotIndex_)
** _Returns:_ *bool* _isSoulGem_

* GetChargeInfoForItem(*integer* _bagId_, *integer* _slotIndex_)
** _Returns:_ *integer* _charges_, *integer* _maxCharges_

* DoesItemHaveDurability(*integer* _bagId_, *integer* _slotIndex_)
** _Returns:_ *bool* _hasDurability_

* GetItemCondition(*integer* _bagId_, *integer* _slotIndex_)
** _Returns:_ *integer* _condition_

* GetItemRepairCost(*integer* _bagId_, *integer* _slotIndex_)
** _Returns:_ *integer* _repairCost_

* GetRepairAllCost()
** _Returns:_ *integer* _repairCost_

* GetItemLaunderPrice(*integer* _bagId_, *integer* _slotIndex_)
** _Returns:_ *integer* _launderCost_

* IsItemRepairKit(*integer* _bagId_, *integer* _slotIndex_)
** _Returns:_ *bool* _isRepairKit_

* IsItemNonCrownRepairKit(*integer* _bagId_, *integer* _slotIndex_)
** _Returns:_ *bool* _isNonCrownRepairKit_

* GetRepairKitTier(*integer* _bagId_, *integer* _slotIndex_)
** _Returns:_ *integer* _tier_

* GetAmountRepairKitWouldRepairItem(*integer* _itemToRepairBagId_, *integer* _itemToRepairSlotIndex_, *integer* _repairKitToConsumeBagId_, *integer* _repairKitToConsumeSlotIndex_)
** _Returns:_ *integer* _amountRepaired_

* RepairItemWithRepairKit(*integer* _itemToRepairBagId_, *integer* _itemToRepairSlotIndex_, *integer* _repairKitToConsumeBagId_, *integer* _repairKitToConsumeSlotIndex_)

* HasActivatableSwapWeaponsEquipped()
** _Returns:_ *bool* _canSwapWeaponSets_

* GetActiveWeaponPairInfo()
** _Returns:_ *[ActiveWeaponPair|#ActiveWeaponPair]* _activeWeaponPair_, *bool* _locked_

* GetItemLevel(*integer* _bagId_, *integer* _slotIndex_)
** _Returns:_ *integer* _level_

* GetItemRequiredLevel(*integer* _bagId_, *integer* _slotIndex_)
** _Returns:_ *integer* _requiredLevel_

* GetItemRequiredChampionPoints(*integer* _bagId_, *integer* _slotIndex_)
** _Returns:_ *integer* _requiredChampionPoints_

* GetItemTrait(*integer* _bagId_, *integer* _slotIndex_)
** _Returns:_ *[ItemTraitType|#ItemTraitType]* _trait_

* GetItemCreatorName(*integer* _bagId_, *integer* _slotIndex_)
** _Returns:_ *string* _creatorName_

* GetItemInfo(*integer* _bagId_, *integer* _slotIndex_)
** _Returns:_ *textureName* _icon_, *integer* _stack_, *integer* _sellPrice_, *bool* _meetsUsageRequirement_, *bool* _locked_, *integer* _equipType_, *integer* _itemStyleId_, *integer* _quality_

* GetItemId(*integer* _bagId_, *integer* _slotIndex_)
** _Returns:_ *integer* _itemId_

* GetItemSellValueWithBonuses(*integer* _bagId_, *integer* _slotIndex_)
** _Returns:_ *integer* _sellPrice_

* GetItemCraftingInfo(*integer* _bagId_, *integer* _slotIndex_)
** _Returns:_ *[TradeskillType|#TradeskillType]* _usedInCraftingType_, *[ItemType|#ItemType]* _itemType_, *integer:nilable* _extraInfo1_, *integer:nilable* _extraInfo2_, *integer:nilable* _extraInfo3_

* GetItemType(*integer* _bagId_, *integer* _slotIndex_)
** _Returns:_ *[ItemType|#ItemType]* _itemType_, *[SpecializedItemType|#SpecializedItemType]* _specializedItemType_

* GetItemArmorType(*integer* _bagId_, *integer* _slotIndex_)
** _Returns:_ *[ArmorType|#ArmorType]* _armorType_

* GetItemWeaponType(*integer* _bagId_, *integer* _slotIndex_)
** _Returns:_ *[WeaponType|#WeaponType]* _weaponType_

* GetItemUniqueId(*integer* _bagId1_, *integer* _slotIndex1_)
** _Returns:_ *id64:nilable* _id_

* GetSoulGemItemInfo(*integer* _bagId_, *integer* _slotIndex_)
** _Returns:_ *integer* _tier_, *[SoulGemType|#SoulGemType]* _soulGemType_

* GetSoulGemInfo(*[SoulGemType|#SoulGemType]* _soulGemType_, *integer* _targetLevel_, *bool* _onlyInInventory_)
** _Returns:_ *string* _name_, *textureName* _icon_, *integer* _stackCount_, *[ItemQuality|#ItemQuality]* _quality_

* GetNextGuildBankSlotId(*integer:nilable* _lastSlotId_)
** _Returns:_ *integer:nilable* _nextSlotId_

* GetNextVirtualBagSlotId(*integer:nilable* _lastSlotId_)
** _Returns:_ *integer:nilable* _nextSlotId_

* CanItemBeVirtual(*integer* _bagId_, *integer* _slotIndex_)
** _Returns:_ *bool* _canBeVirtualItem_

* IsItemPlaceableFurniture(*integer* _bagId_, *integer* _slotIndex_)
** _Returns:_ *bool* _isPlaceable_

* GetItemFurnitureDataId(*integer* _bagId_, *integer* _slotIndex_)
** _Returns:_ *integer* _furnitureDataId_

* IsDisplayNameInItemBoPAccountTable(*integer* _bagId_, *integer* _slotIndex_, *string* _displayName_)
** _Returns:_ *bool* _isInTable_

* IsItemBoPAndTradeable(*integer* _bagId_, *integer* _slotIndex_)
** _Returns:_ *bool* _isBoPAndTradeable_

* GetItemBoPTimeRemainingSeconds(*integer* _bagId_, *integer* _slotIndex_)
** _Returns:_ *integer* _timeRemainingS_

* GetItemBoPTradeableDisplayNamesString(*integer* _bagId_, *integer* _slotIndex_)
** _Returns:_ *string* _namesString_

* GetItemBoPTradeableNumEligibleNames(*integer* _bagId_, *integer* _slotIndex_)
** _Returns:_ *integer* _numNames_

* GetItemBoPTradeableEligibleNameByIndex(*integer* _bagId_, *integer* _slotIndex_, *luaindex* _nameIndex_)
** _Returns:_ *string* _name_

* HasCraftBagAccess()
** _Returns:_ *bool* _hasAccess_

* SelectGuildBank(*integer* _guildId_)

* TransferToGuildBank(*integer* _sourceBag_, *integer* _sourceSlot_)

* TransferFromGuildBank(*integer* _slotId_)

* HasAnyJunk(*integer* _bagId_, *bool* _excludeStolenItems_)
** _Returns:_ *bool* _hasJunk_

* DestroyAllJunk()

* CanAnyItemsBeStoredInCraftBag(*integer* _bagId_)
** _Returns:_ *bool* _canBeStoredInCraftBag_

* StowAllVirtualItems()

* DoesBagHaveSpaceFor(*[Bag|#Bag]* _destinationBagId_, *[Bag|#Bag]* _sourceBagId_, *integer* _sourceSlot_)
** _Returns:_ *bool* _hasSpace_

* DoesBagHaveSpaceForItemLink(*[Bag|#Bag]* _destinationBagId_, *string* _itemLink_)
** _Returns:_ *bool* _hasSpace_

* CanItemBePlayerLocked(*integer* _bagId_, *integer* _slotIndex_)
** _Returns:_ *bool* _canBePlayerLocked_

* IsItemPlayerLocked(*integer* _bagId_, *integer* _slotIndex_)
** _Returns:_ *bool* _playerLocked_

* SetItemIsPlayerLocked(*integer* _bagId_, *integer* _slotIndex_, *bool* _playerLocked_)

* CanItemBeMarkedAsJunk(*integer* _bagId_, *integer* _slotIndex_)
** _Returns:_ *bool* _canBeMarkedAsJunk_

* IsItemJunk(*integer* _bagId_, *integer* _slotIndex_)
** _Returns:_ *bool* _junk_

* SetItemIsJunk(*integer* _bagId_, *integer* _slotIndex_, *bool* _junk_)

* IsItemDyeable(*integer* _bagId_, *integer* _slotIndex_)
** _Returns:_ *bool* _dyeable_

* AreItemDyeChannelsDyeable(*[Bag|#Bag]* _bagId_, *integer* _slotIndex_)
** _Returns:_ *bool* _primary_, *bool* _secondary_, *bool* _accent_

* HasItemInSlot(*integer* _bagId_, *integer* _slotIndex_)
** _Returns:_ *bool* _hasItemInSlot_

* GetItemLinkName(*string* _itemLink_)
** _Returns:_ *string* _itemName_

* GetItemLinkItemType(*string* _itemLink_)
** _Returns:_ *[ItemType|#ItemType]* _itemType_, *[SpecializedItemType|#SpecializedItemType]* _specializedItemType_

* GetItemLinkItemUseType(*string* _itemLink_)
** _Returns:_ *[ItemUseType|#ItemUseType]* _onUseType_

* GetItemLinkArmorType(*string* _itemLink_)
** _Returns:_ *[ArmorType|#ArmorType]* _armorType_

* GetItemLinkWeaponType(*string* _itemLink_)
** _Returns:_ *[WeaponType|#WeaponType]* _weaponType_

* GetItemLinkWeaponPower(*string* _itemLink_)
** _Returns:_ *integer* _weaponPower_

* GetItemLinkArmorRating(*string* _itemLink_, *bool* _considerCondition_)
** _Returns:_ *integer* _armorRating_

* GetItemLinkRequiredLevel(*string* _itemLink_)
** _Returns:_ *integer* _requiredLevel_

* GetItemLinkRequiredChampionPoints(*string* _itemLink_)
** _Returns:_ *integer* _requiredChampionPoints_

* GetItemLinkValue(*string* _itemLink_, *bool* _considerCondition_)
** _Returns:_ *integer* _value_

* GetItemLinkCondition(*string* _itemLink_)
** _Returns:_ *integer* _conditionPercent_

* DoesItemLinkHaveArmorDecay(*string* _itemLink_)
** _Returns:_ *bool* _hasArmorDecay_

* GetItemLinkMaxEnchantCharges(*string* _itemLink_)
** _Returns:_ *integer* _maxCharges_

* GetItemLinkNumEnchantCharges(*string* _itemLink_)
** _Returns:_ *integer* _numCharges_

* DoesItemLinkHaveEnchantCharges(*string* _itemLink_)
** _Returns:_ *bool* _hasCharges_

* GetItemLinkEnchantInfo(*string* _itemLink_)
** _Returns:_ *bool* _hasCharges_, *string* _enchantHeader_, *string* _enchantDescription_

* IsItemAffectedByPairedPoison(*[EquipSlot|#EquipSlot]* _equipSlot_)
** _Returns:_ *bool* _hasPairedPoison_

* GetItemPairedPoisonInfo(*[EquipSlot|#EquipSlot]* _equipSlot_)
** _Returns:_ *bool* _hasPoison_, *integer* _poisonCount_, *string* _poisonHeader_, *string* _poisonItemLink_

* GetItemLinkOnUseAbilityInfo(*string* _itemLink_)
** _Returns:_ *bool* _hasAbility_, *string* _abilityHeader_, *string* _abilityDescription_, *integer* _cooldown_, *bool* _hasScaling_, *integer* _minLevel_, *integer* _maxLevel_, *bool* _isChampionPoints_, *integer* _remainingCooldown_

* GetItemLinkTraitOnUseAbilityInfo(*string* _itemLink_, *luaindex* _index_)
** _Returns:_ *bool* _hasAbility_, *string* _abilityDescription_, *integer* _cooldown_, *bool* _hasScaling_, *integer* _minLevel_, *integer* _maxLevel_, *bool* _isChampionPoints_

* GetItemLinkTraitInfo(*string* _itemLink_)
** _Returns:_ *[ItemTraitType|#ItemTraitType]* _traitType_, *string* _traitDescription_

* GetItemLinkSetInfo(*string* _itemLink_, *bool* _equipped_)
** _Returns:_ *bool* _hasSet_, *string* _setName_, *integer* _numBonuses_, *integer* _numEquipped_, *integer* _maxEquipped_, *integer* _setId_

* GetItemLinkSetBonusInfo(*string* _itemLink_, *bool* _equipped_, *luaindex* _index_)
** _Returns:_ *integer* _numRequired_, *string* _bonusDescription_

* GetItemLinkFlavorText(*string* _itemLink_)
** _Returns:_ *string* _flavorText_

* IsItemLinkCrafted(*string* _itemLink_)
** _Returns:_ *bool* _isCrafted_

* IsItemLinkVendorTrash(*string* _itemLink_)
** _Returns:_ *bool* _isVendorTrash_

* GetItemLinkSiegeMaxHP(*string* _itemLink_)
** _Returns:_ *integer* _maxHP_

* GetItemLinkQuality(*string* _itemLink_)
** _Returns:_ *[ItemQuality|#ItemQuality]* _quality_

* GetItemLinkSiegeType(*string* _itemLink_)
** _Returns:_ *[SiegeType|#SiegeType]* _siegeType_

* IsItemLinkUnique(*string* _itemLink_)
** _Returns:_ *bool* _isUnique_

* IsItemLinkUniqueEquipped(*string* _itemLink_)
** _Returns:_ *bool* _isUniqueEquipped_

* GetItemLinkEquipType(*string* _itemLink_)
** _Returns:_ *[EquipType|#EquipType]* _equipType_

* IsItemLinkConsumable(*string* _itemLink_)
** _Returns:_ *bool* _isConsumable_

* GetItemLinkCraftingSkillType(*string* _itemLink_)
** _Returns:_ *[TradeskillType|#TradeskillType]* _tradeskillType_

* IsItemLinkEnchantingRune(*string* _itemLink_)
** _Returns:_ *bool* _isEnchantingRune_

* GetItemLinkEnchantingRuneName(*string* _itemLink_)
** _Returns:_ *bool:nilable* _known_, *string:nilable* _name_

* GetItemLinkEnchantingRuneClassification(*string* _itemLink_)
** _Returns:_ *[EnchantingRuneClassification|#EnchantingRuneClassification]* _runeClassification_

* GetItemLinkRequiredCraftingSkillRank(*string* _itemLink_)
** _Returns:_ *integer* _requiredRank_

* IsItemLinkBound(*string* _itemLink_)
** _Returns:_ *bool* _isBound_

* GetItemLinkBindType(*string* _itemLink_)
** _Returns:_ *[BindType|#BindType]* _bindType_

* GetItemLinkGlyphMinLevels(*string* _itemLink_)
** _Returns:_ *integer:nilable* _minLevel_, *integer:nilable* _minChampionPoints_

* IsItemLinkPlaceableFurniture(*string* _itemLink_)
** _Returns:_ *bool* _isPlaceableFurniture_

* IsItemLinkBook(*string* _itemLink_)
** _Returns:_ *bool* _isBook_

* GetItemLinkBookTitle(*string* _itemLink_)
** _Returns:_ *string:nilable* _bookTitle_

* IsItemLinkBookKnown(*string* _itemLink_)
** _Returns:_ *bool* _isKnown_

* DoesItemLinkStartQuest(*string* _itemLink_)
** _Returns:_ *bool* _startsQuest_

* DoesItemLinkFinishQuest(*string* _itemLink_)
** _Returns:_ *bool* _finishesQuest_

* IsItemLinkRecipeKnown(*string* _itemLink_)
** _Returns:_ *bool* _isRecipeKnown_

* GetItemLinkRecipeResultItemLink(*string* _itemLink_, *[LinkStyle|#LinkStyle]* _linkStyle_)
** _Returns:_ *string* _link_

* GetItemLinkRecipeNumIngredients(*string* _itemLink_)
** _Returns:_ *integer* _numIngredients_

* GetItemLinkRecipeIngredientInfo(*string* _itemLink_, *luaindex* _index_)
** _Returns:_ *string* _ingredientName_, *integer* _amountInInventoryAndBank_, *integer* _amountRequired_

* GetItemLinkRecipeIngredientItemLink(*string* _itemLink_, *luaindex* _index_, *[LinkStyle|#LinkStyle]* _linkStyle_)
** _Returns:_ *string* _link_

* GetItemLinkRecipeNumTradeskillRequirements(*string* _itemLink_)
** _Returns:_ *integer* _numTradeskillRequirements_

* GetItemLinkRecipeTradeskillRequirement(*string* _itemLink_, *luaindex* _tradeskillIndex_)
** _Returns:_ *[TradeskillType|#TradeskillType]* _tradeskill_, *integer* _requiredLevel_

* GetItemLinkRecipeQualityRequirement(*string* _itemLink_)
** _Returns:_ *integer* _qualityRequirement_

* GetItemLinkRecipeCraftingSkillType(*string* _itemLink_)
** _Returns:_ *[TradeskillType|#TradeskillType]* _craftingSkillType_

* GetItemLinkReagentTraitInfo(*string* _itemLink_, *luaindex* _index_)
** _Returns:_ *bool:nilable* _known_, *string:nilable* _name_

* GetItemLinkItemStyle(*string* _itemLink_)
** _Returns:_ *integer* _style_

* GetItemLinkRefinedMaterialItemLink(*string* _itemLink_, *[LinkStyle|#LinkStyle]* _linkStyle_)
** _Returns:_ *string* _refinedItemLink_

* GetItemLinkMaterialLevelDescription(*string* _itemLink_)
** _Returns:_ *string* _levelsDescription_

* IsItemLinkOnlyUsableFromQuickslot(*string* _itemLink_)
** _Returns:_ *bool* _onlyUsableFromQuickslot_

* IsItemLinkStolen(*string* _itemLink_)
** _Returns:_ *bool* _itemStolen_

* IsItemLinkStackable(*string* _itemLink_)
** _Returns:_ *bool* _itemStackable_

* GetItemLinkStacks(*string* _itemLink_)
** _Returns:_ *integer* _stackCountBackpack_, *integer* _stackCountBank_, *integer* _stackCountCraftBag_

* CanItemLinkBeVirtual(*string* _itemLink_)
** _Returns:_ *bool* _canBeVirtual_

* GetItemLinkDyeIds(*string* _itemLink_)
** _Returns:_ *integer* _primaryDefId_, *integer* _secondaryDefId_, *integer* _accentDefId_

* GetItemLinkDyeStampId(*string* _itemLink_)
** _Returns:_ *integer* _dyeStampId_

* GetItemLinkFurnitureDataId(*string* _itemLink_)
** _Returns:_ *integer* _furnitureDataId_

* GetItemLinkGrantedRecipeIndices(*string* _itemLink_)
** _Returns:_ *luaindex:nilable* _recipeListIndex_, *luaindex:nilable* _recipeIndex_

* ShouldHideTooltipRequiredLevel(*string* _itemLink_)
** _Returns:_ *bool* _shouldHideLevel_

* GetMaxTraits()
** _Returns:_ *integer* _maxTraits_

* IsItemStolen(*integer* _bagId_, *integer* _slotIndex_)
** _Returns:_ *bool* _itemStolen_

* AreAnyItemsStolen(*integer* _bagId_)
** _Returns:_ *bool* _anyItemsStolen_

* GetTelvarStoneMultiplierThresholdIndex()
** _Returns:_ *luaindex:nilable* _thresholdIndex_

* GetTelvarStoneThresholdAmount(*luaindex:nilable* _thresholdIndex_)
** _Returns:_ *integer* _minimumAmount_

* GetTelvarStoneMultiplier(*luaindex:nilable* _thresholdIndex_)
** _Returns:_ *number* _telvarStoneMultiplier_

* IsMaxTelvarStoneMultiplierThreshold(*luaindex:nilable* _thresholdIndex_)
** _Returns:_ *bool* _isAtMaxThreshold_

* StackBag(*[Bag|#Bag]* _bag_)

* CompareBagItemToCurrentlyEquipped(*integer* _bagId_, *integer* _slotIndex_, *[EquipSlot|#EquipSlot]* _equipSlot_)
** _Uses variable returns..._
** _Returns:_ *[DerivedStats|#DerivedStats]* _derivedStat_, *integer* _statDelta_

* CompareItemLinkToCurrentlyEquipped(*string* _itemLink_, *[EquipSlot|#EquipSlot]* _equipSlot_)
** _Uses variable returns..._
** _Returns:_ *[DerivedStats|#DerivedStats]* _derivedStat_, *integer* _statDelta_

* GetItemLinkNumItemTags(*string* _itemLink_)
** _Returns:_ *integer* _numItemTags_

* GetItemLinkItemTagInfo(*string* _itemLink_, *luaindex* _itemTagIndex_)
** _Returns:_ *string* _itemTagDescription_, *[ItemTagCategory|#ItemTagCategory]* _itemTagCategory_

* HasCraftBagAutoTransferNotification()
** _Returns:_ *bool* _hasTransferNotification_

* ClearCraftBagAutoTransferNotification()

* IsActiveCombatRelatedEquipmentSlot(*[EquipSlot|#EquipSlot]* _equipSlot_)
** _Returns:_ *bool* _isActiveCombatRelatedEquipSlot_

* GetEquipmentBonusRating(*[Bag|#Bag]* _bagId_, *[EquipSlot|#EquipSlot]* _equipSlot_)
** _Returns:_ *number* _equipmentBonusRating_

* GetEquipmentBonusThreshold(*integer* _unitLevel_, *integer* _unitChampionPoints_, *integer* _index_)
** _Returns:_ *number* _thresholdValue_

* GetNumCrownGemsFromItemManualGemification(*[Bag|#Bag]* _bagId_, *integer* _slotIndex_)
** _Returns:_ *integer* _itemsRequired_, *integer* _gemsAwarded_

* IsItemFromCrownStore(*integer* _bagId_, *integer* _slotIndex_)
** _Returns:_ *bool* _isFromCrownStore_

* IsItemFromCrownCrate(*integer* _bagId_, *integer* _slotIndex_)
** _Returns:_ *bool* _isFromCrownCrate_

* GetItemBindType(*integer* _bagId_, *integer* _slotIndex_)
** _Returns:_ *[BindType|#BindType]* _bindType_

* GetNumTutorials()
** _Returns:_ *integer* _numTutorials_

* GetTutorialType(*luaindex* _tutorialIndex_)
** _Returns:_ *[TutorialType|#TutorialType]:nilable* _tutorialType_

* GetTutorialInfo(*luaindex* _tutorialIndex_)
** _Returns:_ *string* _title_, *string* _description_, *integer* _displayPriority_

* GetTutorialLinkedHelpInfo(*luaindex* _tutorialIndex_)
** _Returns:_ *luaindex:nilable* _helpCategoryIndex_, *luaindex:nilable* _helpIndex_

* TriggerTutorial(*[TutorialTrigger|#TutorialTrigger]* _triggerType_)

* FireTutorialHiddenEvent(*luaindex* _tutorialIndex_)

* ResetAllTutorials()

* HasSeenTutorial(*luaindex* _tutorialIndex_)
** _Returns:_ *bool* _seen_

* CanTutorialBeSeen(*luaindex* _tutorialIndex_)
** _Returns:_ *bool* _canBeSeen_

* IsTutorialActionRequired(*luaindex* _tutorialIndex_)
** _Returns:_ *bool* _isActionRequired_

* GetTutorialId(*[TutorialTrigger|#TutorialTrigger]* _triggerType_)
** _Returns:_ *luaindex* _tutorialId_

* SetTutorialSeen(*luaindex* _tutorialIndex_)

* ClearActiveActionRequiredTutorial()

* GetNumCollectibleCategories()
** _Returns:_ *integer* _numCategories_

* GetCollectibleCategoryInfo(*luaindex* _topLevelIndex_)
** _Returns:_ *string* _name_, *integer* _numSubCatgories_, *integer* _numCollectibles_, *integer* _unlockedCollectibles_, *integer* _totalCollectibles_, *bool* _hidesLocked_

* GetCollectibleCategorySpecialization(*luaindex* _topLevelIndex_)
** _Returns:_ *[CollectibleCategorySpecialization|#CollectibleCategorySpecialization]* _specialization_

* GetCollectibleCategoryKeyboardIcons(*luaindex* _categoryIndex_)
** _Returns:_ *textureName* _normalIcon_, *textureName* _pressedIcon_, *textureName* _mouseoverIcon_

* GetCollectibleCategoryGamepadIcon(*luaindex* _categoryIndex_)
** _Returns:_ *textureName* _gamepadIcon_

* GetCollectibleSubCategoryInfo(*luaindex* _topLevelIndex_, *luaindex* _subCategoryIndex_)
** _Returns:_ *string* _name_, *integer* _numCollectibles_, *integer* _unlockedCollectibles_, *integer* _totalCollectibles_

* GetUnlockedCollectiblesCount()
** _Returns:_ *integer* _count_

* GetTotalCollectiblesCount()
** _Returns:_ *integer* _count_

* GetCollectibleId(*luaindex* _topLevelIndex_, *luaindex:nilable* _categoryIndex_, *luaindex* _collectibleIndex_)
** _Returns:_ *integer* _collectibleId_

* GetCollectibleInfo(*integer* _collectibleId_)
** _Returns:_ *string* _name_, *string* _description_, *textureName* _icon_, *textureName* _lockedIcon_, *bool* _unlocked_, *bool* _purchasable_, *bool* _isActive_, *[CollectibleCategoryType|#CollectibleCategoryType]* _categoryType_, *string* _hint_, *bool* _isPlaceholder_

* GetCollectibleCategoryType(*integer* _collectibleId_)
** _Returns:_ *[CollectibleCategoryType|#CollectibleCategoryType]* _categoryType_

* GetCollectibleKeyboardBackgroundImage(*integer* _collectibleId_)
** _Returns:_ *textureName* _backgroundImage_

* GetCollectibleGamepadBackgroundImage(*integer* _collectibleId_)
** _Returns:_ *textureName* _backgroundImage_

* GetCategoryInfoFromCollectibleId(*integer* _collectibleId_)
** _Returns:_ *luaindex:nilable* _topLevelIndex_, *luaindex:nilable* _categoryIndex_, *luaindex:nilable* _collectibleIndex_

* GetTotalCollectiblesByCategoryType(*[CollectibleCategoryType|#CollectibleCategoryType]* _collectibleCategoryType_)
** _Returns:_ *integer* _count_

* GetTotalUnlockedCollectiblesByCategoryType(*[CollectibleCategoryType|#CollectibleCategoryType]* _collectibleCategoryType_)
** _Returns:_ *integer* _count_

* GetCollectibleIdFromType(*[CollectibleCategoryType|#CollectibleCategoryType]* _collectibleCategoryType_, *luaindex* _index_)
** _Returns:_ *integer* _collectibleId_

* IsCollectibleCategorySlottable(*[CollectibleCategoryType|#CollectibleCategoryType]* _collectibleCategoryType_)
** _Returns:_ *bool* _isSlottable_

* IsCollectibleCategoryUsable(*[CollectibleCategoryType|#CollectibleCategoryType]* _collectibleCategoryType_)
** _Returns:_ *bool* _isUsable_

* IsCollectibleCategoryPlaceableFurniture(*[CollectibleCategoryType|#CollectibleCategoryType]* _collectibleCategoryType_)
** _Returns:_ *bool* _isPlaceable_

* IsCollectibleBlocked(*integer* _collectibleId_)
** _Returns:_ *bool* _isBlocked_

* IsCollectibleValidForPlayer(*integer* _collectibleId_)
** _Returns:_ *bool* _isValidForPlayer_

* GetCollectibleBlockReason(*integer* _collectibleId_)
** _Returns:_ *[CollectibleUsageBlockReason|#CollectibleUsageBlockReason]* _usageBlockReason_

* IsCollectibleSlottable(*integer* _collectibleId_)
** _Returns:_ *bool* _isSlottable_

* IsCollectibleUsable(*integer* _collectibleId_)
** _Returns:_ *bool* _isUsable_

* IsCollectibleRenameable(*integer* _collectibleId_)
** _Returns:_ *bool* _isRenameable_

* IsCollectiblePlaceholder(*integer* _collectibleId_)
** _Returns:_ *bool* _isPlaceholder_

* DoesESOPlusUnlockCollectible(*integer* _collectibleId_)
** _Returns:_ *bool* _unlockedViaSubscription_

* DoesCollectibleRequireEntitlement(*integer* _collectibleId_)
** _Returns:_ *bool* _collectibleRequiresEntitlement_

* UseCollectible(*integer* _collectibleId_)

* GetCollectibleLink(*integer* _collectibleId_, *[LinkStyle|#LinkStyle]* _linkStyle_)
** _Returns:_ *string* _link_

* GetCollectibleCategoryTypeFromLink(*string* _link_)
** _Returns:_ *[CollectibleCategoryType|#CollectibleCategoryType]* _categoryType_

* GetCollectibleIdFromLink(*string* _link_)
** _Returns:_ *integer:nilable* _collectibleId_

* StartCollectibleSearch(*string* _searchString_)

* GetNumCollectiblesSearchResults()
** _Returns:_ *integer* _numSearchResults_

* GetCollectiblesSearchResult(*luaindex* _searchResultIndex_)
** _Returns:_ *luaindex* _categoryIndex_, *luaindex:nilable* _subcategoryIndex_, *luaindex* _collectibleIndex_

* IsValidCollectibleName(*string* _collectibleName_)
** _Uses variable returns..._
** _Returns:_ *integer* _violationCode_

* RenameCollectible(*integer* _collectibleId_, *string* _name_)

* GetCollectibleNickname(*integer* _collectibleId_)
** _Returns:_ *string* _name_

* GetCollectibleHelpIndices(*integer* _collectibleId_)
** _Returns:_ *luaindex:nilable* _helpCategoryIndex_, *luaindex:nilable* _helpIndex_

* IsCollectibleNew(*integer* _collectibleId_)
** _Returns:_ *bool* _isNew_

* ClearCollectibleNewStatus(*integer* _collectibleId_)

* GetNumCollectibleNotifications()
** _Returns:_ *integer* _count_

* GetCollectibleNotificationInfo(*luaindex* _notificationIndex_)
** _Returns:_ *integer* _notificationId_, *integer* _collectibleId_

* RemoveCollectibleNotification(*integer* _notificationId_)

* RemoveCollectibleNotificationByCollectibleId(*integer* _collectibleId_)

* GetCollectibleUnlockStateById(*integer* _collectibleId_)
** _Returns:_ *[CollectibleUnlockState|#CollectibleUnlockState]* _unlockState_

* GetCollectibleName(*integer* _collectibleId_)
** _Returns:_ *string* _name_

* IsCollectibleUnlocked(*integer* _collectibleId_)
** _Returns:_ *bool* _isUnlocked_

* IsCollectibleOwnedByDefId(*integer* _collectibleId_)
** _Returns:_ *bool* _owned_

* GetImperialCityCollectibleId()
** _Returns:_ *integer* _collectibleId_

* GetCollectibleQuestPreviewInfo(*integer* _collectibleId_)
** _Returns:_ *string* _questName_, *string* _backgroundText_

* GetActiveCollectibleByType(*[CollectibleCategoryType|#CollectibleCategoryType]* _categoryType_)
** _Returns:_ *integer* _collectibleId_

* GetCollectibleCooldownAndDuration(*integer* _collectibleId_)
** _Returns:_ *integer* _cooldownRemaining_, *integer* _cooldownDuration_

* GetCollectiblePersonalityOverridenEmoteDisplayNames(*integer* _collectibleId_)
** _Uses variable returns..._
** _Returns:_ *string* _overriddenEmoteDisplayName_

* GetCollectiblePersonalityOverridenEmoteSlashCommandNames(*integer* _collectibleId_)
** _Uses variable returns..._
** _Returns:_ *string* _overriddenEmoteSlashCommandName_

* GetCollectibleRestrictionsByType(*integer* _collectibleId_, *[CollectibleRestrictionType|#CollectibleRestrictionType]* _restrictionType_)
** _Returns:_ *bool* _hasRestrictions_, *bool* _passesRestrictions_, *string* _allowedNamesString_

* GetCollectibleFurnitureDataId(*integer* _collectibleId_)
** _Returns:_ *integer* _furnitureDataId_

* GetCollectibleReferenceId(*integer* _collectibleId_)
** _Returns:_ *integer* _referenceId_

* GetCollectibleSortOrder(*integer* _collectibleId_)
** _Returns:_ *integer* _sortOrder_

* GetCollectibleCategorySortOrder(*luaindex* _topLevelIndex_, *luaindex:nilable* _categoryIndex_)
** _Returns:_ *integer* _sortOrder_

* GetNumMarketProductCategories *private* (*[MarketDisplayGroup|#MarketDisplayGroup]* _displayGroup_)
** _Returns:_ *integer* _numCategories_

* GetMarketProductCategoryInfo *private* (*[MarketDisplayGroup|#MarketDisplayGroup]* _displayGroup_, *luaindex* _topLevelIndex_)
** _Returns:_ *string* _name_, *integer* _numSubCatgories_, *integer* _numMarketProducts_, *textureName* _normalIcon_, *textureName* _pressedIcon_, *textureName* _mouseoverIcon_

* GetMarketProductSubCategoryInfo *private* (*[MarketDisplayGroup|#MarketDisplayGroup]* _displayGroup_, *luaindex* _topLevelIndex_, *luaindex* _subCategoryIndex_)
** _Returns:_ *string* _name_, *integer* _numMarketProducts_, *bool* _showGemIcon_

* IsLTODisabledForMarketProductCategory(*[MarketDisplayGroup|#MarketDisplayGroup]* _displayGroup_, *luaindex* _topLevelIndex_, *luaindex:nilable* _categoryIndex_)
** _Returns:_ *bool* _isDisabled_

* MarketProductCategoryContainsNewMarketProducts(*[MarketDisplayGroup|#MarketDisplayGroup]* _displayGroup_, *luaindex* _topLevelIndex_, *luaindex:nilable* _categoryIndex_)
** _Returns:_ *bool* _containsNewProducts_

* MarketProductCategoryOrSubCategoriesContainsNewMarketProducts(*[MarketDisplayGroup|#MarketDisplayGroup]* _displayGroup_, *luaindex* _topLevelIndex_, *luaindex:nilable* _categoryIndex_)
** _Returns:_ *bool* _containsNewProducts_

* GetMarketProductInfo *private* (*integer* _marketProductId_)
** _Returns:_ *string* _name_, *string* _description_, *textureName* _icon_, *bool* _isNew_, *bool* _isFeatured_

* GetMarketProductPricingByPresentation *private* (*integer* _marketProductId_, *luaindex:nilable* _presentationIndex_)
** _Returns:_ *[MarketCurrencyType|#MarketCurrencyType]* _currencyType_, *integer* _cost_, *bool* _hasDiscount_, *integer* _costAfterDiscount_, *integer* _discountPercent_

* GetMarketProductPresentationIds(*[MarketDisplayGroup|#MarketDisplayGroup]* _displayGroup_, *luaindex* _topLevelIndex_, *luaindex:nilable* _categoryIndex_, *luaindex* _marketProductIndex_)
** _Returns:_ *integer* _marketProductId_, *luaindex* _presentationIndex_

* GetMarketProductIcon *private* (*integer* _marketProductId_)
** _Returns:_ *textureName* _icon_

* GetMarketProductNumItems *private* (*integer* _marketProductId_)
** _Returns:_ *integer* _numItems_

* GetMarketProductInstantUnlockType *private* (*integer* _marketProductId_)
** _Returns:_ *[MarketInstantUnlock|#MarketInstantUnlock]* _instantUnlock_

* GetMarketProductPurchaseState *private* (*integer* _marketProductId_, *bool* _getCached_)
** _Returns:_ *[MarketProductPurchaseState|#MarketProductPurchaseState]* _purchaseState_

* DoesMarketProductContainDLC *private* (*integer* _marketProductId_)
** _Returns:_ *bool* _hasDLC_

* GetMarketProductEligibilityErrorStringIds *private* (*integer* _marketProductId_)
** _Uses variable returns..._
** _Returns:_ *integer* _errorStringId_

* GetMarketProductCompleteErrorStringId *private* (*integer* _marketProductId_)
** _Returns:_ *integer* _errorStringId_

* GetMarketProductItemInfo *private* (*integer* _marketProductId_)
** _Returns:_ *integer* _itemId_, *textureName* _iconFile_, *string* _name_, *[ItemQuality|#ItemQuality]* _itemQuality_, *integer* _requiredLevel_, *integer* _itemCount_

* GetMarketProductItemLink *private* (*integer* _marketProductId_, *[LinkStyle|#LinkStyle]* _linkStyle_)
** _Returns:_ *string* _link_

* GetMarketProductType *private* (*integer* _marketProductId_)
** _Returns:_ *[MarketProductType|#MarketProductType]* _productType_

* GetMarketProductDisplayName *private* (*integer* _marketProductId_)
** _Returns:_ *string* _displayName_

* GetMarketProductDescription *private* (*integer* _marketProductId_)
** _Returns:_ *string* _description_

* GetMarketProductNumChildren *private* (*integer* _marketProductId_)
** _Returns:_ *integer* _numChildren_

* GetMarketProductChildId *private* (*integer* _marketProductId_, *luaindex* _childIndex_)
** _Returns:_ *integer* _childId_

* GetMarketProductNumBundledProducts *private* (*integer* _marketProductId_)
** _Returns:_ *integer* _numBundledProducts_

* GetMarketProductStackCount *private* (*integer* _marketProductId_)
** _Returns:_ *integer* _stackCount_

* GetMarketProductFurnitureDataId *private* (*integer* _marketProductId_)
** _Returns:_ *integer* _furnitureDataId_

* GetMarketProductQuality *private* (*integer* _marketProductId_)
** _Returns:_ *[ItemQuality|#ItemQuality]* _itemQuality_

* GetMarketProductOpenMarketBehavior *private* (*integer* _marketProductId_)
** _Returns:_ *[OpenMarketBehavior|#OpenMarketBehavior]* _openBehavior_

* GetMarketProductOpenMarketBehaviorNavigateToOtherProductId *private* (*integer* _marketProductId_)
** _Returns:_ *integer* _openToMarketProductId_

* GetMarketProductNumCollectibles *private* (*integer* _marketProductId_)
** _Returns:_ *integer* _numCollectibles_

* GetMarketProductCollectibleInfo *private* (*integer* _marketProductId_)
** _Returns:_ *integer* _collectibleId_, *textureName* _iconFile_, *string* _name_, *[CollectibleCategoryType|#CollectibleCategoryType]* _collectibleType_, *string* _description_, *bool* _owned_, *bool* _isPlaceholder_

* GetMarketProductCollectibleId *private* (*integer* _marketProductId_)
** _Returns:_ *integer* _collectibleId_

* GetMarketProductBundleHidesChildProducts *private* (*integer* _marketProductId_)
** _Returns:_ *bool* _hidesChildProducts_

* GetMarketProductCrownCrateId *private* (*integer* _marketProductId_)
** _Returns:_ *integer* _crateId_

* GetMarketProductHouseId *private* (*integer* _marketProductId_)
** _Returns:_ *integer* _houseId_

* GetMarketProductHouseTemplateId *private* (*integer* _marketProductId_)
** _Returns:_ *integer* _houseTemplateId_

* GetMarketProductTimeLeftInSeconds *private* (*integer* _marketProductId_)
** _Returns:_ *number* _timeLeftSeconds_

* GetMarketProductEndTimeString *private* (*integer* _marketProductId_)
** _Returns:_ *string* _endTimeString_

* OpenMarket *private* (*[MarketDisplayGroup|#MarketDisplayGroup]* _displayGroup_)

* GetMarketState *private* (*[MarketDisplayGroup|#MarketDisplayGroup]* _displayGroup_)
** _Returns:_ *[MarketState|#MarketState]* _marketState_

* GetMarketProductsForItem(*integer* _itemId_, *bool* _onlyActiveListings_)
** _Uses variable returns..._
** _Returns:_ *integer* _marketProductId_

* GetActiveMarketProductListingsForHouseTemplate(*integer* _houseTemplateId_, *[MarketDisplayGroup|#MarketDisplayGroup]* _displayGroup_)
** _Uses variable returns..._
** _Returns:_ *integer* _marketProductId_, *luaindex* _presentationIndex_

* OnMarketClose *private* ()

* OnMarketPurchaseMoreCrowns *private* ()

* GetEsoPlusSubscriptionBenefitsInfoHelpIndices()
** _Returns:_ *luaindex:nilable* _helpCategoryIndex_, *luaindex:nilable* _helpIndex_

* GetEsoPlusSubscriptionLapsedBenefitsInfoHelpIndices()
** _Returns:_ *luaindex:nilable* _helpCategoryIndex_, *luaindex:nilable* _helpIndex_

* SendCrownCrateOpenRequest(*integer* _crateId_)

* GetNumOwnedCrownCrateTypes()
** _Returns:_ *integer* _numCrownCrateTypes_

* GetNextOwnedCrownCrateId(*integer:nilable* _lastCrateId_)
** _Returns:_ *integer:nilable* _nextCrateId_

* GetOnSaleCrownCrateId()
** _Returns:_ *integer:nilable* _crateId_

* GetCrownCrateName(*integer* _crateId_)
** _Returns:_ *string* _crateName_

* GetCrownCrateCount(*integer* _crateId_)
** _Returns:_ *integer* _count_

* GetInventorySpaceRequiredToOpenCrownCrate(*integer* _crateId_)
** _Returns:_ *integer* _inventorySpaceRequired_

* GetCrownCratePackNormalTexture(*integer* _crateId_)
** _Returns:_ *textureName* _normalImage_

* GetCrownCrateCardTextures(*integer* _crateId_)
** _Returns:_ *textureName* _cardBackImage_, *textureName* _cardBackGlowImage_, *textureName* _cardFaceImage_, *textureName* _cardFaceGlowImage_

* GetCurrentCrownCrateId()
** _Returns:_ *integer* _crateId_

* GetNumCurrentCrownCrateTotalRewards()
** _Returns:_ *integer* _numRewards_

* GetNumCurrentCrownCratePrimaryRewards()
** _Returns:_ *integer* _numPrimaryRewards_

* GetNumCurrentCrownCrateBonusRewards()
** _Returns:_ *integer* _numBonusRewards_

* GetCrownCrateRewardInfo(*luaindex* _rewardIndex_)
** _Returns:_ *string* _rewardName_, *string* _rewardTypeText_, *textureName* _cardFaceImage_, *textureName* _cardFaceFrameAccentImage_, *integer* _gemsExchanged_, *bool* _isBonus_, *integer* _crownCrateTierId_, *integer* _stackCount_

* GetMarketProductCrownCrateRewardInfo(*integer* _marketProductId_)
** _Returns:_ *string* _rewardName_, *string* _rewardTypeText_, *textureName* _cardFaceImage_, *textureName* _cardFaceFrameAccentImage_, *integer* _stackCount_

* GetMarketProductCrownCrateTierId(*integer* _marketProductId_)
** _Returns:_ *integer* _crownCrateTierId_

* GetCrownCrateRewardProductReferenceData(*luaindex* _rewardIndex_)
** _Returns:_ *[MarketProductType|#MarketProductType]* _rewardProductType_, *integer* _referenceDataId_

* GetCrownCrateNPCBoneWorldPosition(*string* _boneName_)
** _Returns:_ *bool* _success_, *number* _positionX_, *number* _positionY_, *number* _positionZ_

* CreateCrownCrateSpecificParticleEffect *private* (*integer* _crownCrateId_, *[CrownCrateParticleEffects|#CrownCrateParticleEffects]* _crownCrateParticleEffects_, *number* _worldX_, *number* _worldY_, *number* _worldZ_)
** _Returns:_ *integer:nilable* _particleEffectId_

* CreateCrownCrateTierSpecificParticleEffect *private* (*integer* _crownCrateTierId_, *[CrownCrateTierParticleEffects|#CrownCrateTierParticleEffects]* _crownCrateTierParticleEffects_, *number* _worldX_, *number* _worldY_, *number* _worldZ_)
** _Returns:_ *integer:nilable* _particleEffectId_

* GetCrownCrateNPCCardThrowingBoneName()
** _Returns:_ *string* _boneName_

* SetCrownCrateNPCVisible(*bool* _show_)

* TriggerCrownCrateNPCAnimation(*[CrownCrateEvent|#CrownCrateEvent]* _event_, *luaindex:nilable* _rewardIndex_)

* GetCrownCrateTierQualityColor(*integer* _crownCrateTierId_)
** _Returns:_ *number* _r_, *number* _g_, *number* _b_

* GetCrownCrateTierReactionNPCAnimation(*integer* _crownCrateTierId_)
** _Returns:_ *[CrownCrateEvent|#CrownCrateEvent]* _reactionEvent_

* GetCrownCratesSystemState()
** _Returns:_ *[LootCratesSystemState|#LootCratesSystemState]* _crownCratesSystemState_

* CanInteractWithCrownCratesSystem()
** _Returns:_ *bool* _canInteractWithCrownCratesSystem_

* IsPlayerAllowedToOpenCrownCrates()
** _Returns:_ *bool* _isAllowed_, *integer* _errorStringId_

* PlayCrownCrateTierSpecificParticleSoundAndVibration(*integer* _crownCrateTierId_, *[CrownCrateTierParticleEffects|#CrownCrateTierParticleEffects]* _crownCrateTierParticleEffects_)

* PlayCrownCrateSpecificParticleSoundAndVibration(*integer* _crownCrateId_, *[CrownCrateParticleEffects|#CrownCrateParticleEffects]* _crownCrateTierParticleEffects_)

* RefreshCardsInCrownCrateNPCsHand()

* SetCrownCrateUIMenuActive(*bool* _active_)

* GetCrownCrateTierOrdering(*integer* _tierId_)
** _Returns:_ *integer* _tierOrdering_

* GemifyItem(*integer* _itemId_, *integer* _howMany_)

* InitializePendingDyes(*[DyeMode|#DyeMode]* _dyeMode_)

* SetPendingSlotDyes(*[DyeableSlot|#DyeableSlot]* _dyeableSlot_, *integer* _primaryDyeId_, *integer* _secondaryDyeId_, *integer* _accentDyeId_)

* GetPendingSlotDyes(*[DyeableSlot|#DyeableSlot]* _dyeableSlot_)
** _Returns:_ *integer* _primaryDyeId_, *integer* _secondaryDyeId_, *integer* _accentDyeId_

* GetNumDyes()
** _Returns:_ *integer* _numDyes_

* GetDyeInfo(*luaindex* _dyeIndex_)
** _Returns:_ *string* _dyeName_, *bool* _known_, *[DyeRarity|#DyeRarity]* _rarity_, *[DyeHueCategory|#DyeHueCategory]* _hueCategory_, *integer* _achievementId_, *number* _r_, *number* _g_, *number* _b_, *integer* _sortKey_, *integer* _dyeId_

* GetDyeInfoById(*integer* _dyeId_)
** _Returns:_ *string* _dyeName_, *bool* _known_, *[DyeRarity|#DyeRarity]* _rarity_, *[DyeHueCategory|#DyeHueCategory]* _hueCategory_, *integer* _achievementId_, *number* _r_, *number* _g_, *number* _b_, *integer* _sortKey_

* GetDyeColorsById(*integer* _dyeId_)
** _Returns:_ *number* _r_, *number* _g_, *number* _b_

* GetCurrentItemDyes(*integer* _bagId_, *integer* _slotIndex_)
** _Returns:_ *integer* _primaryDyeIndex_, *integer* _secondaryDyeIndex_, *integer* _accentDyeIndex_

* GetCurrentCollectibleDyes(*integer* _collectibleId_)
** _Returns:_ *integer* _primaryDyeIndex_, *integer* _secondaryDyeIndex_, *integer* _accentDyeIndex_

* ApplyPendingDyes()

* GetNumSavedDyeSets()
** _Returns:_ *integer* _numSavedDyeSets_

* GetSavedDyeSetDyes(*luaindex* _dyeSetIndex_)
** _Returns:_ *integer* _primaryDyeId_, *integer* _secondaryDyeId_, *integer* _accentDyeId_

* SetSavedDyeSetDyes(*luaindex* _dyeSetIndex_, *integer* _primaryDyeId_, *integer* _secondaryDyeId_, *integer* _accentDyeId_)

* CanUseCollectibleDyeing()
** _Returns:_ *bool* _collectibleDyeingAllowed_

* IsDyeableSlotDyeable(*[DyeableSlot|#DyeableSlot]* _dyeableSlot_)
** _Returns:_ *bool* _isDyeable_

* IsDyeableSlotBound(*[DyeableSlot|#DyeableSlot]* _dyeableSlot_)
** _Returns:_ *bool* _isBound_

* AreDyeableSlotDyeChannelsDyeable(*[DyeableSlot|#DyeableSlot]* _dyeableSlot_)
** _Returns:_ *bool* _primary_, *bool* _secondary_, *bool* _accent_

* GetDyeableSlotDyeData(*[DyeableSlot|#DyeableSlot]* _dyeableSlot_)
** _Returns:_ *integer* _dyeData_

* GetDyeableSlotId(*[DyeableSlot|#DyeableSlot]* _dyeableSlot_)
** _Returns:_ *integer* _id_

* GetDyeableSlotIcon(*[DyeableSlot|#DyeableSlot]* _dyeableSlot_)
** _Returns:_ *textureName* _icon_

* GetDyeableSlotCurrentDyes(*[DyeableSlot|#DyeableSlot]* _dyeableSlot_)
** _Returns:_ *integer* _primaryDyeId_, *integer* _secondaryDyeId_, *integer* _accentDyeId_

* IsDyeIndexKnown(*luaindex* _dyeIndex_)
** _Returns:_ *bool* _isKnown_

* CanPlayerUseCostumeDyeStamp(*integer* _dyeStampId_)
** _Returns:_ *[DyeStampUseResult|#DyeStampUseResult]* _dyeStampUseResult_

* CanPlayerUseItemDyeStamp(*integer* _dyeStampId_)
** _Returns:_ *[DyeStampUseResult|#DyeStampUseResult]* _dyeStampUseResult_

* SetupDyeStampPreview(*integer* _bagId_, *integer* _slotIndex_)

* IsInPreviewMode()
** _Returns:_ *bool* _isInPreviewMode_

* IsCharacterPreviewingAvailable()
** _Returns:_ *bool* _canPreview_

* IsCurrentlyPreviewing()
** _Returns:_ *bool* _isPreviewing_

* IsCurrentlyPreviewingCollectibleAsFurniture(*integer* _collectibleId_)
** _Returns:_ *bool* _isPreviewing_

* IsCurrentlyPreviewingInventoryItemAsFurniture(*[Bag|#Bag]* _bagId_, *integer* _slotIndex_)
** _Returns:_ *bool* _isPreviewing_

* IsCurrentlyPreviewingPlacedFurniture(*id64* _furnitureId_)
** _Returns:_ *bool* _isPreviewing_

* BeginPreviewMode(*bool* _forceDismount_)

* EndPreviewMode(*bool* _resetTargetFrame_)

* EndCurrentItemPreview()

* BeginItemPreviewSpin()

* EndItemPreviewSpin()

* CanSpinPreviewCharacter()
** _Returns:_ *bool* _canSpin_

* SetShowHiddenGear *private* (*bool* _showHiddenGear_)

* GetShowHiddenGear *private* ()
** _Returns:_ *bool* _showHiddenGear_

* ForceCancelMounted *private* ()

* SetPreviewInEmptyWorld(*number* _sunlightAzimuthRadians_, *number* _sunlightAltitudeRadians_)

* ClearPreviewInEmptyWorld()

* SetPreviewDynamicFramingOpening(*number* _openingWidthUI_, *number* _openingHeightUI_, *number* _cameraAngleRadians_)

* PreviewDyeStamp(*integer* _dyeStampId_, *[ItemUseType|#ItemUseType]* _itemType_)

* PreviewDyeStampByItemLink(*string* _itemLink_)

* SetPreviewDyeMode *private* (*[DyeMode|#DyeMode]* _dyeMode_)

* PreviewCraftItem(*luaindex* _patternIndex_, *luaindex* _materialIndex_, *integer* _materialQuantity_, *luaindex* _styleIndex_, *luaindex* _traitIndex_, *bool* _useUniversalStyleItem_, *integer* _dyeBrushId_)

* PreviewCollectible *private* (*integer* _collectibleDefId_, *luaindex* _variation_, *integer* _dyeBrushId_)

* PreviewCollectibleAsFurniture *private* (*integer* _collectibleDefId_)

* PreviewInventoryItem(*[Bag|#Bag]* _bagId_, *integer* _slotIndex_, *integer* _dyeBrushId_)

* PreviewInventoryItemAsFurniture(*[Bag|#Bag]* _bagId_, *integer* _slotIndex_)

* PreviewStoreEntry(*luaindex* _entryIndex_, *luaindex* _variation_, *integer* _dyeBrushId_)

* PreviewStoreEntryAsFurniture(*luaindex* _entryIndex_)

* PreviewTradingHouseSearchResultItem(*luaindex* _index_, *integer* _dyeBrushId_)

* PreviewTradingHouseSearchResultItemAsFurniture(*luaindex* _index_)

* PreviewArmorByItemLink *private* (*string* _itemLink_, *integer* _dyeBrushId_)

* PreviewProvisionerItemAsFurniture *private* (*luaindex* _recipeListIndex_, *luaindex* _recipeIndex_)

* PreviewPlacedFurniture(*id64* _furnitureId_)

* PreviewMarketProduct *private* (*integer* _marketProductId_, *luaindex* _variation_)

* PreviewFurnitureMarketProduct *private* (*integer* _marketProductId_, *luaindex* _variation_)

* IsPreviewingMarketProduct(*integer* _marketProductId_)
** _Returns:_ *bool* _isBeingPreviewed_

* CanPreviewMarketProduct(*integer* _marketProductId_)
** _Returns:_ *bool* _isPreviewable_

* GetNumMarketProductPreviewVariations(*integer* _marketProductId_)
** _Returns:_ *integer* _numVariations_

* GetMarketProductPreviewVariationDisplayName(*integer* _marketProductId_, *luaindex* _variation_)
** _Returns:_ *string* _variationDisplayName_

* RequestJumpToHouse(*integer* _houseId_)

* RequestJumpToHousePreviewWithTemplate(*integer* _houseTemplateId_)

* ClearCursor()
** _Returns:_ *bool* _clearedSomething_

* SetCursorItemSoundsEnabled(*bool* _enabled_)

* GetCursorContentType()
** _Returns:_ *integer* _cursorType_

* GetSkillLineInfo(*[SkillType|#SkillType]* _skillType_, *luaindex* _skillIndex_)
** _Returns:_ *string* _name_, *luaindex* _rank_, *bool* _discovered_, *integer* _skillLineId_

* GetSkillLineAnnouncementIcon(*[SkillType|#SkillType]* _skillType_, *luaindex* _skillIndex_)
** _Returns:_ *textureName* _announcementIcon_

* GetCraftingSkillLineIndices(*[TradeskillType|#TradeskillType]* _craftingSkillType_)
** _Returns:_ *[SkillType|#SkillType]* _skillType_, *luaindex* _skillIndex_

* GetCraftingSkillName(*[TradeskillType|#TradeskillType]* _craftingSkillType_)
** _Returns:_ *string* _name_

* GetFurnitureCategoryName(*integer* _furnitureCategoryId_)
** _Returns:_ *string* _displayName_

* GetFurnitureDataInfo(*integer* _furnitureDataId_)
** _Returns:_ *integer:nilable* _categoryId_, *integer:nilable* _subcategoryId_, *[FurnitureThemeType|#FurnitureThemeType]* _furnitureTheme_

* GetFurnitureDataCategoryInfo(*integer* _furnitureDataId_)
** _Returns:_ *integer:nilable* _categoryId_, *integer:nilable* _subcategoryId_

* SetInteractionUsingInteractCamera(*bool* _enabled_)

* IsInteractionUsingInteractCamera()
** _Returns:_ *bool* _enabled_

* GetUniversalStyleId()
** _Returns:_ *integer* _universalStyleId_

* GetItemStyleName(*integer* _styleId_)
** _Returns:_ *string* _styleName_


h2. Object API

h3. AddOnManager
* AddRelevantFilter(*string* _relevantFilter_)

* GetAddOnDependencyInfo(*luaindex* _addOnIndex_, *luaindex* _addOnDependencyIndex_)
** _Returns:_ *string* _name_, *bool* _active_

* GetAddOnFilter()
** _Returns:_ *string* _settingFilter_

* GetAddOnInfo(*luaindex* _addOnIndex_)
** _Returns:_ *string* _name_, *string* _title_, *string* _author_, *string* _description_, *bool* _enabled_, *[AddOnLoadState|#AddOnLoadState]* _state_, *bool* _isOutOfDate_

* GetAddOnNumDependencies(*luaindex* _addOnIndex_)
** _Returns:_ *integer* _numDependencies_

* GetLoadOutOfDateAddOns()
** _Returns:_ *bool* _loadOutOfDateAddons_

* GetNumAddOns()
** _Returns:_ *integer* _numAddOns_

* RemoveAddOnFilter()

* ResetRelevantFilters()

* SetAddOnEnabled(*luaindex* _addOnIndex_, *bool* _enabled_)

* SetAddOnFilter(*string* _settingFilter_)

* SetLoadOutOfDateAddOns(*bool* _loadOutOfDateAddons_)


h3. AnimationManager
* CreateTimeline()
** _Returns:_ *object* _timeline_

* CreateTimelineFromVirtual(*string* _timelineName_, *object* _animatedControl_)
** _Returns:_ *object* _timeline_


h3. AnimationObject
Objects that inherit behavior from *AnimationObject*
[AnimationObject3DRotate|#AnimationObject3DRotate], [AnimationObject3DTranslate|#AnimationObject3DTranslate], [AnimationObjectAlpha|#AnimationObjectAlpha], [AnimationObjectColor|#AnimationObjectColor], [AnimationObjectCustom|#AnimationObjectCustom], [AnimationObjectScale|#AnimationObjectScale], [AnimationObjectScroll|#AnimationObjectScroll], [AnimationObjectSize|#AnimationObjectSize], [AnimationObjectTexture|#AnimationObjectTexture], [AnimationObjectTextureRotate|#AnimationObjectTextureRotate], [AnimationObjectTextureSlide|#AnimationObjectTextureSlide], [AnimationObjectTranslate|#AnimationObjectTranslate]

* GetAnimatedControl()
** _Returns:_ *object* _animatedControl_

* GetDuration()
** _Returns:_ *integer* _durationMs_

* GetEasingFunction()
** _Returns:_ *function* _functionRef_

* GetHandler(*string* _EventName_)
** _Returns:_ *function* _FunctionRef_

* GetTimeline()
** _Returns:_ *object* _owningTimeline_

* IsPlaying()
** _Returns:_ *bool* _isPlaying_

* SetAnimatedControl(*object* _animatedControl_)

* SetDuration(*integer* _durationMs_)

* SetEasingFunction(*function* _functionRef_)

* SetHandler(*string* _EventName_, *function* _FunctionRef_)


h3. AnimationObject3DRotate
* GetEndPitch()
** _Returns:_ *number* _endPitchRadians_

* GetEndRoll()
** _Returns:_ *number* _endRollRadians_

* GetEndYaw()
** _Returns:_ *number* _endYawRadians_

* GetStartPitch()
** _Returns:_ *number* _startPitchRadians_

* GetStartRoll()
** _Returns:_ *number* _startRollRadians_

* GetStartYaw()
** _Returns:_ *number* _startYawRadians_

* SetEndPitch(*number* _endPitchRadians_)

* SetEndRoll(*number* _endRollRadians_)

* SetEndYaw(*number* _endYawRadians_)

* SetRotationValues(*number* _startPitchRadians_, *number* _startYawRadians_, *number* _startRollRadians_, *number* _endPitchRadians_, *number* _endYawRadians_, *number* _endRollRadians_)

* SetStartPitch(*number* _startPitchRadians_)

* SetStartRoll(*number* _startRollRadians_)

* SetStartYaw(*number* _startYawRadians_)


h3. AnimationObject3DTranslate
* ClearBezierControlPoints()

* GetDeltaOffsetX()
** _Returns:_ *number* _deltaX_

* GetDeltaOffsetY()
** _Returns:_ *number* _deltaY_

* GetDeltaOffsetZ()
** _Returns:_ *number* _deltaZ_

* GetEndOffsetX()
** _Returns:_ *number* _endX_

* GetEndOffsetY()
** _Returns:_ *number* _endY_

* GetEndOffsetZ()
** _Returns:_ *number* _endZ_

* GetStartOffsetX()
** _Returns:_ *number* _startX_

* GetStartOffsetY()
** _Returns:_ *number* _startY_

* GetStartOffsetZ()
** _Returns:_ *number* _startZ_

* GetTranslateDeltas()
** _Returns:_ *number* _deltaX_, *number* _deltaY_, *number* _deltaZ_

* SetBezierControlPoint(*luaindex* _index_, *number* _x_, *number* _y_, *number* _z_)

* SetDeltaOffsetX(*number* _deltaX_, *[TranslateAnimationDeltaType|#TranslateAnimationDeltaType]* _translateAnimationDeltaType_)

* SetDeltaOffsetY(*number* _deltaY_, *[TranslateAnimationDeltaType|#TranslateAnimationDeltaType]* _translateAnimationDeltaType_)

* SetDeltaOffsetZ(*number* _deltaZ_, *[TranslateAnimationDeltaType|#TranslateAnimationDeltaType]* _translateAnimationDeltaType_)

* SetEndOffsetX(*number* _endX_)

* SetEndOffsetY(*number* _endY_)

* SetEndOffsetZ(*number* _endZ_)

* SetStartOffsetX(*number* _startX_)

* SetStartOffsetY(*number* _startY_)

* SetStartOffsetZ(*number* _startZ_)

* SetTranslateDeltas(*number* _deltaX_, *number* _deltaY_, *number* _deltaZ_, *[TranslateAnimationDeltaType|#TranslateAnimationDeltaType]* _translateAnimationDeltaType_)

* SetTranslateOffsets(*number* _startX_, *number* _startY_, *number* _startZ_, *number* _endX_, *number* _endY_, *number* _endZ_)


h3. AnimationObjectAlpha
* GetEndAlpha()
** _Returns:_ *number* _endAlpha_

* GetStartAlpha()
** _Returns:_ *number* _startAlpha_

* SetAlphaValues(*number* _startAlpha_, *number* _endAlpha_)

* SetEndAlpha(*number* _endAlpha_)

* SetStartAlpha(*number* _startAlpha_)


h3. AnimationObjectColor
* GetEndColor()
** _Returns:_ *number* _endR_, *number* _endG_, *number* _endB_, *number* _endA_

* GetStartColor()
** _Returns:_ *number* _startR_, *number* _startG_, *number* _startB_, *number* _startA_

* SetColorValues(*number* _startR_, *number* _startG_, *number* _startB_, *number* _startA_, *number* _endR_, *number* _endG_, *number* _endB_, *number* _endA_)

* SetEndColor(*number* _endR_, *number* _endG_, *number* _endB_, *number* _endA_)

* SetStartColor(*number* _startR_, *number* _startG_, *number* _startB_, *number* _startA_)


h3. AnimationObjectCustom
* SetUpdateFunction(*function* _functionRef_)


h3. AnimationObjectScale
* GetEndScale()
** _Returns:_ *number* _endScale_

* GetStartScale()
** _Returns:_ *number* _startScale_

* SetEndScale(*number* _endScale_)

* SetScaleValues(*number* _startScale_, *number* _endScale_)

* SetStartScale(*number* _startScale_)


h3. AnimationObjectScroll
* SetHorizontalEnd(*number* _endX_)

* SetHorizontalRelative(*number* _offsetX_)

* SetHorizontalStartAndEnd(*number* _startX_, *number* _endX_)

* SetVerticalEnd(*number* _endY_)

* SetVerticalRelative(*number* _offsetY_)

* SetVerticalStartAndEnd(*number* _startY_, *number* _endY_)


h3. AnimationObjectSize
* SetEndHeight(*number* _endHeight_)

* SetEndWidth(*number* _endWidth_)

* SetStartAndEndHeight(*number* _startHeight_, *number* _endHeight_)

* SetStartAndEndWidth(*number* _startWidth_, *number* _endWidth_)

* SetStartHeight(*number* _startHeight_)

* SetStartWidth(*number* _startWidth_)


h3. AnimationObjectTexture
* GetCellsHigh()
** _Returns:_ *integer* _aNumCellsHigh_

* GetCellsWide()
** _Returns:_ *integer* _aNumCellsWide_

* IsMirroringAlongX()
** _Returns:_ *bool* _mirroring_

* IsMirroringAlongY()
** _Returns:_ *bool* _mirroring_

* SetCellsHigh(*integer* _aNumCellsHigh_)

* SetCellsWide(*integer* _aNumCellsWide_)

* SetFramerate(*number* _framesPerSecond_)

* SetImageData(*integer* _aNumCellsWide_, *integer* _aNumCellsHigh_)

* SetMirrorAlongX(*bool* _mirroring_)

* SetMirrorAlongY(*bool* _mirroring_)


h3. AnimationObjectTextureRotate
* GetEndRotation()
** _Returns:_ *number* _endRadians_

* GetStartRotation()
** _Returns:_ *number* _startRadians_

* SetEndRotation(*number* _endRadians_)

* SetRotationValues(*number* _startRadians_, *number* _endRadians_)

* SetStartRotation(*number* _startRadians_)


h3. AnimationObjectTextureSlide
* SetSlideDistances(*number* _slideDistanceU_, *number* _slideDistanceV_)


h3. AnimationObjectTranslate
* GetAnchorIndex()
** _Returns:_ *integer* _anchorIndex_

* GetDeltaOffsetX()
** _Returns:_ *number* _deltaX_

* GetDeltaOffsetY()
** _Returns:_ *number* _deltaY_

* GetEndOffsetX()
** _Returns:_ *number* _endX_

* GetEndOffsetY()
** _Returns:_ *number* _endY_

* GetStartOffsetX()
** _Returns:_ *number* _startX_

* GetStartOffsetY()
** _Returns:_ *number* _startY_

* GetTranslateDeltas()
** _Returns:_ *number* _deltaX_, *number* _deltaY_

* SetAnchorIndex(*integer* _anchorIndex_)

* SetDeltaOffsetX(*number* _deltaX_, *[TranslateAnimationDeltaType|#TranslateAnimationDeltaType]* _translateAnimationDeltaType_)

* SetDeltaOffsetY(*number* _deltaY_, *[TranslateAnimationDeltaType|#TranslateAnimationDeltaType]* _translateAnimationDeltaType_)

* SetEndOffsetX(*number* _endX_)

* SetEndOffsetY(*number* _endY_)

* SetStartOffsetX(*number* _startX_)

* SetStartOffsetY(*number* _startY_)

* SetTranslateDeltas(*number* _deltaX_, *number* _deltaY_, *[TranslateAnimationDeltaType|#TranslateAnimationDeltaType]* _translateAnimationDeltaType_)

* SetTranslateOffsets(*number* _startX_, *number* _startY_, *number* _endX_, *number* _endY_)


h3. AnimationTimeline
* ApplyAllAnimationsToControl(*object* _animatedControl_)

* ClearAllCallbacks()

* GetAnimation(*luaindex* _animationIndex_)
** _Returns:_ *object* _animation_

* GetAnimationOffset(*object* _animation_)
** _Returns:_ *integer* _offset_

* GetAnimationTimeline(*luaindex* _timelineIndex_)
** _Returns:_ *object* _timeline_

* GetAnimationTimelineOffset(*object* _animation_)
** _Returns:_ *integer* _offset_

* GetDuration()
** _Returns:_ *integer* _duration_

* GetFirstAnimation()
** _Returns:_ *object* _animation_

* GetFirstAnimationTimeline()
** _Returns:_ *object* _timeline_

* GetFullProgress()
** _Returns:_ *number* _progress_

* GetHandler(*string* _EventName_)
** _Returns:_ *function* _FunctionRef_

* GetLastAnimation()
** _Returns:_ *object* _animation_

* GetLastAnimationTimeline()
** _Returns:_ *object* _timeline_

* GetNumAnimationTimelines()
** _Returns:_ *integer* _numTimelines_

* GetNumAnimations()
** _Returns:_ *integer* _numAnimations_

* GetParent()
** _Returns:_ *object* _timeline_

* GetPlaybackLoopsRemaining()
** _Returns:_ *integer* _loopsRemaining_

* GetProgress()
** _Returns:_ *number* _progress_

* GetSkipAnimationsBehindPlayheadOnInitialPlay()
** _Returns:_ *bool* _skipAnimations_

* InsertAnimation(*integer* _animationType_, *object* _animatedControl_, *integer* _offset_)
** _Returns:_ *object* _animation_

* InsertAnimationFromVirtual(*string* _animationVirtualName_, *object* _animatedControl_)
** _Returns:_ *object* _animation_

* InsertAnimationTimeline(*integer* _offset_, *object* _animatedControl_)
** _Returns:_ *object* _animation_

* InsertAnimationTimelineFromVirtual(*string* _animationVirtualName_, *object* _animatedControl_)
** _Returns:_ *object* _animation_

* InsertCallback(*function* _functionRef_, *integer* _offset_)
** _Returns:_ *function* _functionRefRet_

* IsPlaying()
** _Returns:_ *bool* _isPlaying_

* IsPlayingBackward()
** _Returns:_ *bool* _reversed_

* PlayBackward()

* PlayForward()

* PlayFromEnd(*integer* _offsetMs_)

* PlayFromStart(*integer* _offsetMs_)

* PlayInstantlyToEnd()

* PlayInstantlyToStart()

* SetAnimationOffset(*object* _animation_, *integer* _offset_)

* SetAnimationTimelineOffset(*object* _animation_, *integer* _offset_)

* SetCallbackOffset(*function* _callback_, *integer* _offset_)

* SetHandler(*string* _EventName_, *function* _FunctionRef_)

* SetPlaybackLoopCount(*integer* _maxLoopCount_)

* SetPlaybackLoopsRemaining(*integer* _loopsRemaining_)

* SetPlaybackType(*integer* _playbackType_, *integer* _maxLoopCount_)

* SetProgress(*number* _progress_)

* SetSkipAnimationsBehindPlayheadOnInitialPlay(*bool* _skipAnimations_)

* Stop()


h3. BackdropControl
* GetCenterColor()
** _Returns:_ *number* _r_, *number* _g_, *number* _b_, *number* _a_

* IsPixelRoundingEnabled()
** _Returns:_ *bool* _pixelRoundingEnabled_

* SetCenterColor(*number* _r_, *number* _g_, *number* _b_, *number* _a_)

* SetCenterTexture(*string* _filename_, *integer* _tileSize_, *integer* _addressMode_)

* SetEdgeColor(*number* _r_, *number* _g_, *number* _b_, *number* _a_)

* SetEdgeTexture(*string* _filename_, *integer* _edgeFileWidth_, *integer* _edgeFileHeight_, *integer* _edgeSize_, *integer* _edgeFilePadding_)

* SetInsets(*number* _left_, *number* _top_, *number* _right_, *number* _bottom_)

* SetIntegralWrapping(*bool* _integralWrappingEnabled_)

* SetPixelRoundingEnabled(*bool* _enabled_)

* SetTextureReleaseOption(*[ReleaseReferenceOptions|#ReleaseReferenceOptions]* _releaseOption_)


h3. ButtonControl
* EnableMouseButton(*integer* _buttonNum_, *bool* _enabled_)

* GetLabelControl()
** _Returns:_ *object* _labelControl_

* GetState()
** _Returns:_ *integer* _state_

* IsPixelRoundingEnabled()
** _Returns:_ *bool* _pixelRoundingEnabled_

* SetClickSound(*string* _clickSound_)

* SetDesaturation(*number* _desaturation_)

* SetDisabledFontColor(*number* _r_, *number* _g_, *number* _b_, *number* _a_)

* SetDisabledPressedFontColor(*number* _r_, *number* _g_, *number* _b_, *number* _a_)

* SetDisabledPressedTexture(*string* _textureFilename_)

* SetDisabledTexture(*string* _textureFilename_)

* SetEnabled(*bool* _enabled_)

* SetEndCapWidth(*integer* _endCapWidth_)

* SetFont(*string* _text_)

* SetHorizontalAlignment(*integer* _horizontalAlign_)

* SetMouseOverBlendMode(*integer* _blendMode_)

* SetMouseOverFontColor(*number* _r_, *number* _g_, *number* _b_, *number* _a_)

* SetMouseOverTexture(*string* _textureFilename_)

* SetNormalFontColor(*number* _r_, *number* _g_, *number* _b_, *number* _a_)

* SetNormalOffset(*number* _x_, *number* _y_)

* SetNormalTexture(*string* _textureFilename_)

* SetPixelRoundingEnabled(*bool* _pixelRoundingEnabled_)

* SetPressedFontColor(*number* _r_, *number* _g_, *number* _b_, *number* _a_)

* SetPressedMouseOverTexture(*string* _textureFilename_)

* SetPressedOffset(*number* _x_, *number* _y_)

* SetPressedTexture(*string* _textureFilename_)

* SetShowingHighlight(*bool* _showingHighlight_)

* SetState(*integer* _newState_, *bool* _locked_)

* SetText(*string* _text_)

* SetTextureCoords(*number* _left_, *number* _right_, *number* _top_, *number* _bottom_)

* SetTextureReleaseOption(*[ReleaseReferenceOptions|#ReleaseReferenceOptions]* _releaseOption_)

* SetVerticalAlignment(*integer* _verticalAlign_)


h3. ColorSelectControl
* GetColorAsHSV()
** _Returns:_ *number* _hue_, *number* _saturation_, *number* _value_

* GetColorAsRGB()
** _Returns:_ *number* _red_, *number* _green_, *number* _blue_

* GetColorWheelTextureControl()
** _Returns:_ *object* _textureControl_

* GetColorWheelThumbTextureControl()
** _Returns:_ *object* _textureControl_

* GetFullValuedColorAsRGB()
** _Returns:_ *number* _red_, *number* _green_, *number* _blue_

* GetThumbNormalizedPosition()
** _Returns:_ *number* _normalizedX_, *number* _normalizedY_

* GetValue()
** _Returns:_ *number* _value_

* SetColorAsHSV(*number* _hue_, *number* _saturation_, *number* _value_)

* SetColorAsRGB(*number* _red_, *number* _green_, *number* _blue_)

* SetColorWheelThumbTextureControl(*object* _textureControl_)

* SetThumbNormalizedPosition(*number* _normalizedX_, *number* _normalizedY_)

* SetValue(*number* _value_)


h3. CompassDisplayControl
* GetAlphaCoefficients(*[MapDisplayPinType|#MapDisplayPinType]* _pinType_)
** _Returns:_ *number* _leadingCoefficient_, *number* _coefficient_, *number* _constant_

* GetCenterOveredPinDescription(*luaindex* _centerOveredPinIndex_)
** _Returns:_ *string* _description_

* GetCenterOveredPinDistance(*luaindex* _centerOveredPinIndex_)
** _Returns:_ *number* _distance_

* GetCenterOveredPinInfo(*luaindex* _centerOveredPinIndex_)
** _Returns:_ *string* _description_, *[MapDisplayPinType|#MapDisplayPinType]* _type_, *number* _distance_, *[DrawLayer|#DrawLayer]* _drawLayer_, *integer* _drawLevel_, *bool* _suppressed_

* GetCenterOveredPinLayerAndLevel(*luaindex* _centerOveredPinIndex_)
** _Returns:_ *[DrawLayer|#DrawLayer]* _drawLayer_, *integer* _drawLevel_

* GetCenterOveredPinType(*luaindex* _centerOveredPinIndex_)
** _Returns:_ *[MapDisplayPinType|#MapDisplayPinType]* _type_

* GetMinVisibleAlpha(*[MapDisplayPinType|#MapDisplayPinType]* _pinType_)
** _Returns:_ *number* _minVisibleAlpha_

* GetMinVisibleScale(*[MapDisplayPinType|#MapDisplayPinType]* _pinType_)
** _Returns:_ *number* _minVisibleScale_

* GetNumCenterOveredPins()
** _Returns:_ *integer* _numCenterOveredPins_

* GetScaleCoefficients(*[MapDisplayPinType|#MapDisplayPinType]* _pinType_)
** _Returns:_ *number* _leadingCoefficient_, *number* _coefficient_, *number* _constant_

* IsCenterOveredPinSuppressed(*luaindex* _centerOveredPinIndex_)
** _Returns:_ *bool* _suppressed_

* SetAlphaCoefficients(*[MapDisplayPinType|#MapDisplayPinType]* _pinType_, *number* _leadingCoefficient_, *number* _coefficient_, *number* _constant_)

* SetCardinalDirection(*string* _directionName_, *string* _font_, *integer* _cardinalDirection_)

* SetMinVisibleAlpha(*[MapDisplayPinType|#MapDisplayPinType]* _pinType_, *number* _minVisibleAlpha_)

* SetMinVisibleScale(*[MapDisplayPinType|#MapDisplayPinType]* _pinType_, *number* _minVisibleScale_)

* SetScaleCoefficients(*[MapDisplayPinType|#MapDisplayPinType]* _pinType_, *number* _leadingCoefficient_, *number* _coefficient_, *number* _constant_)


h3. Control
Objects that inherit behavior from *Control*
[BackdropControl|#BackdropControl], [ButtonControl|#ButtonControl], [ColorSelectControl|#ColorSelectControl], [CompassDisplayControl|#CompassDisplayControl], [CooldownControl|#CooldownControl], [DebugTextControl|#DebugTextControl], [EditControl|#EditControl], [LabelControl|#LabelControl], [LineControl|#LineControl], [MapDisplayControl|#MapDisplayControl], [RootWindow|#RootWindow], [ScrollControl|#ScrollControl], [SliderControl|#SliderControl], [StatusBarControl|#StatusBarControl], [TextBufferControl|#TextBufferControl], [TextureCompositeControl|#TextureCompositeControl], [TextureControl|#TextureControl], [TooltipControl|#TooltipControl], [TopLevelWindow|#TopLevelWindow]

* AddFilterForEvent(*integer* _event_)
** _Returns:_ *bool* _success_

* ClearAnchors *protected-attributes* ()

* Convert3DLocalOrientationToWorldOrientation(*number* _localPitch_, *number* _localYaw_, *number* _localRoll_)
** _Returns:_ *number* _worldPitch_, *number* _worldYaw_, *number* _worldRoll_

* Convert3DLocalPositionToWorldPosition(*number* _localX_, *number* _localY_, *number* _localZ_)
** _Returns:_ *number* _worldX_, *number* _worldY_, *number* _worldZ_

* Convert3DWorldOrientationToLocalOrientation(*number* _worldPitch_, *number* _worldYaw_, *number* _worldRoll_)
** _Returns:_ *number* _localPitch_, *number* _localYaw_, *number* _localRoll_

* Convert3DWorldPositionToLocalPosition(*number* _worldX_, *number* _worldY_, *number* _worldZ_)
** _Returns:_ *number* _localX_, *number* _localY_, *number* _localZ_

* Create3DRenderSpace()

* CreateControl(*string* _arg1_, *integer* _type_)
** _Returns:_ *object* _apRet_

* Destroy3DRenderSpace()

* Does3DRenderSpaceUseDepthBuffer()
** _Returns:_ *bool* _usesDepthBuffer_

* Get3DRenderSpaceForward()
** _Returns:_ *number* _x_, *number* _y_, *number* _z_

* Get3DRenderSpaceOrientation()
** _Returns:_ *number* _pitchRadians_, *number* _yawRadians_, *number* _rollRadians_

* Get3DRenderSpaceOrigin()
** _Returns:_ *number* _x_, *number* _y_, *number* _z_

* Get3DRenderSpaceRight()
** _Returns:_ *number* _x_, *number* _y_, *number* _z_

* Get3DRenderSpaceSystem()
** _Returns:_ *[GuiRender3DSpaceSystem|#GuiRender3DSpaceSystem]* _system_

* Get3DRenderSpaceUp()
** _Returns:_ *number* _x_, *number* _y_, *number* _z_

* GetAlpha()
** _Returns:_ *number* _alpha_

* GetAnchor(*integer* _anchorIndex_)
** _Returns:_ *bool* _isValidAnchor_, *integer* _point_, *object* _relativeTo_, *integer* _relativePoint_, *number* _offsetX_, *number* _offsetY_, *[AnchorConstrains|#AnchorConstrains]* _anchorConstrains_

* GetBottom()
** _Returns:_ *number* _bottom_

* GetCenter()
** _Returns:_ *number* _centerX_, *number* _centerY_

* GetChild(*luaindex* _childIndex_)
** _Returns:_ *object* _childControl_

* GetClampedToScreen()
** _Returns:_ *bool* _clamped_

* GetClampedToScreenInsets()
** _Returns:_ *number* _left_, *number* _top_, *number* _right_, *number* _bottom_

* GetControlAlpha()
** _Returns:_ *number* _alpha_

* GetControlScale()
** _Returns:_ *number* _scale_

* GetDesiredHeight()
** _Returns:_ *number* _height_

* GetDesiredWidth()
** _Returns:_ *number* _width_

* GetDimensionConstraints()
** _Returns:_ *number* _minWidth_, *number* _minHeight_, *number* _maxWidth_, *number* _maxHeight_

* GetDimensions()
** _Returns:_ *number* _width_, *number* _height_

* GetDrawLayer()
** _Returns:_ *integer* _layer_

* GetDrawLevel()
** _Returns:_ *integer* _level_

* GetDrawTier()
** _Returns:_ *integer* _tier_

* GetExcludeFromResizeToFitExtents()
** _Returns:_ *bool* _excludes_

* GetHandler(*string* _handlerName_)
** _Returns:_ *function* _functionRef_

* GetHeight()
** _Returns:_ *number* _height_

* GetHitInsets()
** _Returns:_ *number* _left_, *number* _top_, *number* _right_, *number* _bottom_

* GetId()
** _Returns:_ *integer* _id_

* GetInheritsAlpha()
** _Returns:_ *bool* _inheritAlpha_

* GetInheritsScale()
** _Returns:_ *bool* _inheritScale_

* GetLeft()
** _Returns:_ *number* _left_

* GetName()
** _Returns:_ *string* _name_

* GetNamedChild(*string* _childName_)
** _Returns:_ *object* _returnedControl_

* GetNumChildren()
** _Returns:_ *integer* _numChildren_

* GetOwningWindow()
** _Returns:_ *object* _OwningTopLevelWindow_

* GetParent()
** _Returns:_ *object* _ret1_

* GetResizeToFitDescendents()
** _Returns:_ *bool* _resizes_

* GetResizeToFitPadding()
** _Returns:_ *number* _width_, *number* _height_

* GetRight()
** _Returns:_ *number* _right_

* GetScale()
** _Returns:_ *number* _scale_

* GetScreenRect()
** _Returns:_ *number* _left_, *number* _top_, *number* _right_, *number* _bottom_

* GetTop()
** _Returns:_ *number* _top_

* GetType()
** _Returns:_ *integer* _type_

* GetWidth()
** _Returns:_ *number* _width_

* Has3DRenderSpace()
** _Returns:_ *bool* _has3DRenderSpace_

* IsChildOf(*object* _desiredParent_)
** _Returns:_ *bool* _isChild_

* IsControlHidden()
** _Returns:_ *bool* _hidden_

* IsHandlerSet(*string* _handlerName_)
** _Returns:_ *bool* _isSet_

* IsHidden()
** _Returns:_ *bool* _hidden_

* IsKeyboardEnabled()
** _Returns:_ *bool* _enabled_

* IsMouseEnabled()
** _Returns:_ *bool* _enabled_

* IsPointInside(*number* _x_, *number* _y_, *number* _leftOffset_, *number* _topOffset_, *number* _rightOffset_, *number* _bottomOffset_)
** _Returns:_ *bool* _isInside_

* RegisterForEvent(*integer* _event_, *function* _callback_)
** _Returns:_ *bool* _success_

* Set3DRenderSpaceForward(*number* _x_, *number* _y_, *number* _z_)

* Set3DRenderSpaceOrientation(*number* _pitchRadians_, *number* _yawRadians_, *number* _rollRadians_)

* Set3DRenderSpaceOrigin(*number* _xM_, *number* _yM_, *number* _zM_)

* Set3DRenderSpaceRight(*number* _x_, *number* _y_, *number* _z_)

* Set3DRenderSpaceSystem(*[GuiRender3DSpaceSystem|#GuiRender3DSpaceSystem]* _system_)

* Set3DRenderSpaceUp(*number* _x_, *number* _y_, *number* _z_)

* Set3DRenderSpaceUsesDepthBuffer(*bool* _usesDepthBuffer_)

* SetAlpha *protected-attributes* (*number* _alpha_)

* SetAnchor *protected-attributes* (*integer* _whereOnMe_, *object* _anchorTargetControl_, *integer* _whereOnTarget_, *number* _offsetX_, *number* _offsetY_, *[AnchorConstrains|#AnchorConstrains]* _anchorConstrains_)

* SetAnchorFill *protected-attributes* (*object* _anchorTargetControl_)

* SetClampedToScreen(*bool* _clamped_)

* SetClampedToScreenInsets(*number* _left_, *number* _top_, *number* _right_, *number* _bottom_)

* SetDimensionConstraints(*number* _minWidth_, *number* _minHeight_, *number* _maxWidth_, *number* _maxHeight_)

* SetDimensions *protected-attributes* (*number* _width_, *number* _height_)

* SetDrawLayer *protected-attributes* (*integer* _layer_)

* SetDrawLevel *protected-attributes* (*integer* _level_)

* SetDrawTier *protected-attributes* (*integer* _tier_)

* SetExcludeFromResizeToFitExtents *protected-attributes* (*bool* _exclude_)

* SetHandler(*string* _handlerName_, *function* _functionRef_)

* SetHeight *protected-attributes* (*number* _height_)

* SetHidden *protected-attributes* (*bool* _aHidden_)

* SetHitInsets(*number* _left_, *number* _top_, *number* _right_, *number* _bottom_)

* SetId(*integer* _id_)

* SetInheritAlpha(*bool* _inheritAlpha_)

* SetInheritScale(*bool* _inheritScale_)

* SetKeyboardEnabled *protected-attributes* (*bool* _enabled_)

* SetMouseEnabled *protected-attributes* (*bool* _enabled_)

* SetMovable(*bool* _isMovable_)

* SetParent *protected-attributes* (*object* _newParent_)

* SetResizeHandleSize(*number* _handleSize_)

* SetResizeToFitDescendents *protected-attributes* (*bool* _resize_)

* SetResizeToFitPadding(*number* _width_, *number* _height_)

* SetScale *protected-attributes* (*number* _scale_)

* SetShapeType *public* (*integer* _shapeType_)

* SetSimpleAnchor *protected-attributes* (*object* _anchorTargetControl_, *number* _offsetX_, *number* _offsetY_)

* SetSimpleAnchorParent *protected-attributes* (*number* _offsetX_, *number* _offsetY_)

* SetWidth *protected-attributes* (*number* _width_)

* StartMoving *protected-attributes* ()
** _Returns:_ *bool* _isMoving_

* StopMovingOrResizing *protected-attributes* ()

* ToggleHidden *protected-attributes* ()

* UnregisterForEvent(*integer* _event_)
** _Returns:_ *bool* _success_


h3. CooldownControl
* GetDuration()
** _Returns:_ *integer* _duration_

* GetPercentCompleteFixed()
** _Returns:_ *number* _percentComplete_

* GetTimeLeft()
** _Returns:_ *integer* _time_

* ResetCooldown()

* SetBlendMode(*integer* _blendMode_)

* SetCooldownRemainTime(*integer* _remain_)

* SetDesaturation(*number* _desaturation_)

* SetFillColor(*number* _r_, *number* _g_, *number* _b_, *number* _a_)

* SetLeadingEdgeTexture(*string* _filename_)

* SetPercentCompleteFixed(*number* _percentComplete_)

* SetRadialCooldownClockwise(*bool* _clockwise_)

* SetRadialCooldownGradient(*number* _startAlpha_, *number* _angularDistance_)

* SetRadialCooldownOriginAngle(*number* _originAngle_)

* SetTexture(*string* _filename_)

* SetTextureReleaseOption(*[ReleaseReferenceOptions|#ReleaseReferenceOptions]* _releaseOption_)

* SetVerticalCooldownLeadingEdgeHeight(*integer* _leadingEdgeHeight_)

* StartCooldown(*integer* _remain_, *integer* _duration_, *integer* _cooldownType_, *integer* _cooldownTimeType_, *bool* _drawLeadingEdge_)

* StartFixedCooldown(*number* _percentComplete_, *integer* _cooldownType_, *integer* _cooldownTimeType_, *bool* _drawLeadingEdge_)


h3. DebugTextControl
* Clear()

* SetFont(*string* _fontStr_)


h3. EditControl
* AddValidCharacter(*string* _validCharacter_)

* Clear()

* ClearSelection()

* CopyAllTextToClipboard *private* ()

* GetCopyEnabled()
** _Returns:_ *bool* _enabled_

* GetCursorPosition()
** _Returns:_ *integer* _cursorPosition_

* GetEditEnabled()
** _Returns:_ *bool* _enabled_

* GetFontHeight()
** _Returns:_ *number* _fontHeightUIUnits_

* GetNewLineEnabled()
** _Returns:_ *bool* _enabled_

* GetPasteEnabled()
** _Returns:_ *bool* _enabled_

* GetScrollExtents()
** _Returns:_ *integer* _numLines_

* GetText()
** _Returns:_ *string* _apRet_

* GetTopLineIndex()
** _Returns:_ *luaindex* _index_

* HasFocus()
** _Returns:_ *bool* _aRet_

* HasSelection()
** _Returns:_ *bool* _hasSelection_

* InsertText(*string* _aText_)

* IsComposingIMEText()
** _Returns:_ *bool* _isComposing_

* IsMultiLine()
** _Returns:_ *bool* _isMultiLine_

* LoseFocus()

* RemoveAllValidCharacters()

* SelectAll()

* SetColor(*number* _r_, *number* _g_, *number* _b_, *number* _a_)

* SetCopyEnabled(*bool* _enabled_)

* SetCursorPosition(*integer* _cursorPosition_)

* SetEditEnabled(*bool* _enabled_)

* SetFont(*string* _font_)

* SetMaxInputChars(*integer* _maxChars_)

* SetMultiLine(*bool* _isMultiLine_)

* SetNewLineEnabled(*bool* _enabled_)

* SetPasteEnabled(*bool* _enabled_)

* SetSelection(*integer* _selectionStartIndex_, *integer* _selectionEndIndex_)

* SetSelectionColor(*number* _r_, *number* _g_, *number* _b_, *number* _a_)

* SetText(*string* _aText_)

* SetTextType(*integer* _textType_)

* SetTopLineIndex(*luaindex* _index_)

* SetVirtualKeyboardType(*[VirtualKeyboardType|#VirtualKeyboardType]* _aKeyboardType_)

* TakeFocus()

* WasLastChangeVirtualKeyboard()
** _Returns:_ *bool* _aRet_


h3. FontObject
* GetFontInfo()
** _Returns:_ *string* _face_, *integer* _size_, *string* _option_

* SetFont(*string* _fontDescriptor_)


h3. LabelControl
* AnchorToBaseline(*object* _toLabel_, *number* _offsetX_, *[AnchorPosition|#AnchorPosition]* _anchorSide_)

* Clean()

* ClearAnchorToBaseline(*object* _toLabel_)

* DidLineWrap()
** _Returns:_ *bool* _didLineWrap_

* GetColor()
** _Returns:_ *number* _r_, *number* _g_, *number* _b_, *number* _a_

* GetFontHeight()
** _Returns:_ *number* _fontHeightUIUnits_

* GetHorizontalAlignment()
** _Returns:_ *integer* _align_

* GetModifyTextType()
** _Returns:_ *[ModifyTextType|#ModifyTextType]* _modifyTextType_

* GetNumLines()
** _Returns:_ *integer* _numLines_

* GetStringWidth(*string* _text_)
** _Returns:_ *number* _pixelWidth_

* GetStyleColor()
** _Returns:_ *number* _r_, *number* _g_, *number* _b_, *number* _a_

* GetText()
** _Returns:_ *string* _apRet_

* GetTextDimensions()
** _Returns:_ *number* _stringWidth_, *number* _stringHeight_

* GetTextHeight()
** _Returns:_ *number* _stringHeight_

* GetTextWidth()
** _Returns:_ *number* _stringWidth_

* GetVerticalAlignment()
** _Returns:_ *integer* _align_

* SetColor(*number* _r_, *number* _g_, *number* _b_, *number* _a_)

* SetDesaturation(*number* _desaturation_)

* SetFont(*string* _fontString_)

* SetHorizontalAlignment(*integer* _align_)

* SetLineSpacing(*integer* _lineSpacing_)

* SetMaxLineCount(*integer* _maxLineCount_)

* SetModifyTextType(*[ModifyTextType|#ModifyTextType]* _modifyTextType_)

* SetNewLineX(*number* _newLineX_)

* SetPixelRoundingEnabled(*bool* _pixelRoundingEnabled_)

* SetStyleColor(*number* _r_, *number* _g_, *number* _b_, *number* _a_)

* SetText(*string* _aText_)

* SetVerticalAlignment(*integer* _verticalAlign_)

* SetWrapMode(*integer* _wrapMode_)

* WasTruncated()
** _Returns:_ *bool* _wasTruncated_


h3. LineControl
* GetBlendMode()
** _Returns:_ *[TextureBlendMode|#TextureBlendMode]* _blendMode_

* GetColor()
** _Returns:_ *number* _r_, *number* _g_, *number* _b_, *number* _a_

* GetDesaturation()
** _Returns:_ *number* _desaturation_

* GetTextureCoords()
** _Returns:_ *number* _left_, *number* _right_, *number* _top_, *number* _bottom_

* GetTextureFileDimensions()
** _Returns:_ *integer* _pixelWidth_, *integer* _pixelHeight_

* GetTextureFileName()
** _Returns:_ *string* _filename_

* IsPixelRoundingEnabled()
** _Returns:_ *bool* _pixelRoundingEnabled_

* IsTextureLoaded()
** _Returns:_ *bool* _loaded_

* SetBlendMode(*[TextureBlendMode|#TextureBlendMode]* _blendMode_)

* SetColor(*number* _r_, *number* _g_, *number* _b_, *number* _a_)

* SetDesaturation(*number* _desaturation_)

* SetGradientColors(*[ControlOrientation|#ControlOrientation]* _orientation_, *number* _startR_, *number* _startG_, *number* _startB_, *number* _startA_, *number* _endR_, *number* _endG_, *number* _endB_, *number* _endA_)

* SetPixelRoundingEnabled(*bool* _pixelRoundingEnabled_)

* SetTexture(*string* _filename_)

* SetTextureCoords(*number* _left_, *number* _right_, *number* _top_, *number* _bottom_)

* SetThickness(*number* _thickness_)

* SetVertexColors(*integer* _vertexPoints_, *number* _red_, *number* _green_, *number* _blue_, *number* _alpha_)


h3. MapDisplayControl
* GetZoom()
** _Returns:_ *number* _normalizedRadius_

* SetPinFont(*string* _pinFont_)

* SetZoom(*number* _normalizedRadius_)


h3. RootWindow

h3. ScrollControl
* GetScrollExtents()
** _Returns:_ *number* _horizontal_, *number* _vertical_

* GetScrollOffsets()
** _Returns:_ *number* _horizontal_, *number* _vertical_

* RestoreToExtents(*integer* _duration_)

* SetFadeGradient(*luaindex* _gradientIndex_, *number* _normalX_, *number* _normalY_, *number* _gradientLength_)

* SetHorizontalScroll(*number* _offset_)

* SetScrollBounding(*integer* _bounding_)

* SetVerticalScroll(*number* _offset_)


h3. SliderControl
* DoesAllowDraggingFromThumb()
** _Returns:_ *bool* _allow_

* GetEnabled()
** _Returns:_ *bool* _isEnabled_

* GetMinMax()
** _Returns:_ *number* _min_, *number* _max_

* GetOrientation()
** _Returns:_ *integer* _orientation_

* GetThumbTextureControl()
** _Returns:_ *object* _textureControl_

* GetValue()
** _Returns:_ *number* _value_

* GetValueStep()
** _Returns:_ *number* _step_

* IsThumbFlushWithExtents()
** _Returns:_ *bool* _flush_

* SetAllowDraggingFromThumb(*bool* _allow_)

* SetBackgroundBottomTexture(*string* _fileName_, *number* _texTop_, *number* _texLeft_, *number* _texBottom_, *number* _texRight_)

* SetBackgroundMiddleTexture(*string* _fileName_, *number* _texTop_, *number* _texLeft_, *number* _texBottom_, *number* _texRight_)

* SetBackgroundTopTexture(*string* _fileName_, *number* _texTop_, *number* _texLeft_, *number* _texBottom_, *number* _texRight_)

* SetColor(*number* _r_, *number* _g_, *number* _b_, *number* _a_)

* SetEnabled(*bool* _enable_)

* SetMinMax(*number* _min_, *number* _max_)

* SetOrientation(*integer* _orientation_)

* SetThumbFlushWithExtents(*bool* _flush_)

* SetThumbTexture(*string* _filename_, *string* _disabledFilename_, *string* _highlightedFilename_, *number* _thumbWidth_, *number* _thumbHeight_, *number* _texTop_, *number* _texLeft_, *number* _texBottom_, *number* _texRight_)

* SetThumbTextureHeight(*number* _height_)

* SetValue(*number* _value_)

* SetValueStep(*number* _step_)


h3. StatusBarControl
* ClearFadeOutLossAdjustedTopValue()

* EnableFadeOut(*bool* _enabled_)

* EnableLeadingEdge(*bool* _enabled_)

* EnableScrollingOverlay(*bool* _enabled_)

* GetMinMax()
** _Returns:_ *number* _min_, *number* _max_

* GetValue()
** _Returns:_ *number* _value_

* SetBarAlignment(*integer* _barAlignment_)

* SetColor(*number* _r_, *number* _g_, *number* _b_, *number* _a_)

* SetFadeOutGainColor(*number* _r_, *number* _g_, *number* _b_, *number* _a_)

* SetFadeOutLossAdjustedTopValue(*number* _topValue_)

* SetFadeOutLossColor(*number* _r_, *number* _g_, *number* _b_, *number* _a_)

* SetFadeOutLossSetValueToAdjust(*number* _adjustValue_)

* SetFadeOutTexture(*string* _filename_)

* SetFadeOutTime(*number* _fadeOutSeconds_, *number* _fadeOutDelaySeconds_)

* SetGradientColors(*number* _startR_, *number* _startG_, *number* _startB_, *number* _startA_, *number* _endR_, *number* _endG_, *number* _endB_, *number* _endA_)

* SetLeadingEdge(*string* _textureFile_, *number* _width_, *number* _height_)

* SetLeadingEdgeTextureCoords(*number* _left_, *number* _right_, *number* _top_, *number* _bottom_)

* SetMinMax(*number* _aMin_, *number* _aMax_)

* SetOrientation(*integer* _orientation_)

* SetTexture(*string* _filename_)

* SetTextureCoords(*number* _left_, *number* _right_, *number* _top_, *number* _bottom_)

* SetValue(*number* _aValue_)

* SetupScrollingOverlay(*string* _textureFile_, *number* _width_, *number* _height_, *integer* _duration_)


h3. TextBufferControl
* AddMessage(*string* _aText_, *number* _r_, *number* _g_, *number* _b_, *integer* _colorId_)

* Clear()

* GetDrawLastEntryIfOutOfRoom()
** _Returns:_ *bool* _drawLastIfOutOfRoom_

* GetLineFade()
** _Returns:_ *number* _timeBeforeLineBeginsToFade_, *number* _timeItTakesLineToFade_

* GetLinkEnabled()
** _Returns:_ *bool* _linkEnabed_

* GetMaxHistoryLines()
** _Returns:_ *integer* _numLines_

* GetNumHistoryLines()
** _Returns:_ *integer* _numLines_

* GetNumVisibleLines()
** _Returns:_ *integer* _numLines_

* GetScrollPosition()
** _Returns:_ *integer* _scrollPosition_

* IsSplittingLongMessages()
** _Returns:_ *bool* _isSplitting_

* MoveScrollPosition(*integer* _numLines_)

* SetClearBufferAfterFadeout(*bool* _clearAfterFade_)

* SetColorById(*integer* _colorId_, *number* _r_, *number* _g_, *number* _b_)

* SetDrawLastEntryIfOutOfRoom(*bool* _drawLastIfOutOfRoom_)

* SetFont(*string* _fontString_)

* SetHorizontalAlignment(*integer* _align_)

* SetLineFade(*number* _timeBeforeLineFadeBegins_, *number* _timeForLineToFade_)

* SetLinesInheritAlpha(*bool* _linesInheritAlpha_)

* SetLinkEnabled(*bool* _linkEnabed_)

* SetMaxHistoryLines(*integer* _numLines_)

* SetScrollPosition(*integer* _line_)

* SetSplitLongMessages(*bool* _splitLongMessages_)

* ShowFadedLines()


h3. TextureCompositeControl
* AddSurface(*number* _left_, *number* _right_, *number* _top_, *number* _bottom_)

* ClearAllSurfaces()

* GetBlendMode()
** _Returns:_ *[TextureBlendMode|#TextureBlendMode]* _blendMode_

* GetColor(*luaindex* _surfaceIndex_)
** _Returns:_ *number* _r_, *number* _g_, *number* _b_, *number* _a_

* GetDesaturation()
** _Returns:_ *number* _desaturation_

* GetInsets(*luaindex* _surfaceIndex_)
** _Returns:_ *number* _left_, *number* _right_, *number* _top_, *number* _bottom_

* GetNumSurfaces()
** _Returns:_ *integer* _surfaces_

* GetSurfaceAlpha(*luaindex* _surfaceIndex_)
** _Returns:_ *number* _a_

* GetTextureCoords(*luaindex* _surfaceIndex_)
** _Returns:_ *number* _left_, *number* _right_, *number* _top_, *number* _bottom_

* GetTextureFileDimensions()
** _Returns:_ *integer* _pixelWidth_, *integer* _pixelHeight_

* GetTextureFileName()
** _Returns:_ *string* _filename_

* IsPixelRoundingEnabled()
** _Returns:_ *bool* _pixelRoundingEnabled_

* IsSurfaceHidden(*luaindex* _surfaceIndex_)
** _Returns:_ *bool* _hidden_

* IsTextureLoaded()
** _Returns:_ *bool* _loaded_

* RemoveSurface(*luaindex* _surfaceIndex_)

* SetBlendMode(*[TextureBlendMode|#TextureBlendMode]* _blendMode_)

* SetColor(*luaindex* _surfaceIndex_, *number* _r_, *number* _g_, *number* _b_, *number* _a_)

* SetDesaturation(*number* _desaturation_)

* SetInsets(*luaindex* _surfaceIndex_, *number* _left_, *number* _right_, *number* _top_, *number* _bottom_)

* SetPixelRoundingEnabled(*bool* _pixelRoundingEnabled_)

* SetSurfaceAlpha(*luaindex* _surfaceIndex_, *number* _a_)

* SetSurfaceHidden(*luaindex* _surfaceIndex_, *bool* _hidden_)

* SetTexture(*string* _filename_)

* SetTextureCoords(*luaindex* _surfaceIndex_, *number* _left_, *number* _right_, *number* _top_, *number* _bottom_)

* SetTextureReleaseOption(*[ReleaseReferenceOptions|#ReleaseReferenceOptions]* _releaseOption_)


h3. TextureControl
* Get3DLocalDimensions()
** _Returns:_ *number* _width_, *number* _height_

* GetAddressMode()
** _Returns:_ *[TextureAddressMode|#TextureAddressMode]* _addressMode_

* GetBlendMode()
** _Returns:_ *[TextureBlendMode|#TextureBlendMode]* _blendMode_

* GetColor()
** _Returns:_ *number* _r_, *number* _g_, *number* _b_, *number* _a_

* GetDesaturation()
** _Returns:_ *number* _desaturation_

* GetResizeToFitFile()
** _Returns:_ *bool* _resizesToFitFile_

* GetTextureCoords()
** _Returns:_ *number* _left_, *number* _right_, *number* _top_, *number* _bottom_

* GetTextureFileDimensions()
** _Returns:_ *integer* _pixelWidth_, *integer* _pixelHeight_

* GetTextureFileName()
** _Returns:_ *string* _filename_

* GetVertexUV(*[VERTEX_POINTS|#VERTEX_POINTS]* _vertex_)
** _Returns:_ *number* _u_, *number* _v_

* Is3DQuadFacingCamera()
** _Returns:_ *bool* _isFacing_

* IsPixelRoundingEnabled()
** _Returns:_ *bool* _pixelRoundingEnabled_

* IsTextureLoaded()
** _Returns:_ *bool* _loaded_

* Set3DLocalDimensions(*number* _width_, *number* _height_)

* SetAddressMode(*[TextureAddressMode|#TextureAddressMode]* _addressMode_)

* SetAutoAdjustWrappedCoords(*bool* _enabled_)

* SetBlendMode(*[TextureBlendMode|#TextureBlendMode]* _blendMode_)

* SetColor(*number* _r_, *number* _g_, *number* _b_, *number* _a_)

* SetDesaturation(*number* _desaturation_)

* SetGradientColors(*[ControlOrientation|#ControlOrientation]* _orientation_, *number* _startR_, *number* _startG_, *number* _startB_, *number* _startA_, *number* _endR_, *number* _endG_, *number* _endB_, *number* _endA_)

* SetPixelRoundingEnabled(*bool* _pixelRoundingEnabled_)

* SetResizeToFitFile(*bool* _resizesToFitFile_)

* SetTexture(*string* _filename_)

* SetTextureCoords(*number* _left_, *number* _right_, *number* _top_, *number* _bottom_)

* SetTextureCoordsRotation(*number* _angleInRadians_)

* SetTextureReleaseOption(*[ReleaseReferenceOptions|#ReleaseReferenceOptions]* _releaseOption_)

* SetTextureRotation(*number* _angleInRadians_, *number* _normalizedRotationPointX_, *number* _normalizedRotationPointY_)

* SetVertexColors(*integer* _vertexPoints_, *number* _red_, *number* _green_, *number* _blue_, *number* _alpha_)

* SetVertexUV(*[VERTEX_POINTS|#VERTEX_POINTS]* _vertex_, *number* _u_, *number* _v_)


h3. TooltipControl
* AddControl(*object* _control_, *integer* _cell_, *bool* _useLastRow_)

* AddHeaderControl(*object* _control_, *integer* _headerRow_, *[TooltipHeaderSide|#TooltipHeaderSide]* _headerSide_)

* AddHeaderLine(*string* _text_, *string* _font_, *integer* _headerRow_, *[TooltipHeaderSide|#TooltipHeaderSide]* _headerSide_, *number* _r_, *number* _g_, *number* _b_)

* AddLine(*string* _text_, *string* _font_, *number* _r_, *number* _g_, *number* _b_, *[AnchorPosition|#AnchorPosition]* _lineAnchor_, *[ModifyTextType|#ModifyTextType]* _modifyTextType_, *[TextAlignment|#TextAlignment]* _textAlignment_, *bool* _setToFullSize_, *number* _minWidth_)

* AddVerticalPadding(*number* _paddingY_)

* AppendAvAObjective(*integer* _queryType_, *integer* _keepId_, *integer* _objectiveId_, *[ObjectivePinTier|#ObjectivePinTier]* _objectivePinTier_)

* AppendMapPing(*integer* _pingType_, *string* _unitTag_)

* AppendQuestCondition(*luaindex* _questIndex_, *luaindex* _stepIndex_, *luaindex* _conditionIndex_)

* AppendQuestEnding(*luaindex* _questIndex_)

* AppendUnitName(*string* _unitTag_)

* ClearLines()

* GetOwner()
** _Returns:_ *object* _owner_

* HideComparativeTooltips()

* SetAbility(*luaindex* _aAbilityIndex_, *bool* _aShowBase_)

* SetAbilityId(*integer* _abilityId_)

* SetAchievement(*integer* _aAchievementId_)

* SetAchievementRewardItem(*integer* _aAchievementId_)

* SetAction(*luaindex* _aSlotId_)

* SetAsComparativeTooltip1()

* SetAsComparativeTooltip2()

* SetAttachedMailItem(*id64* _aMailId_, *luaindex* _aAttachSlot_)

* SetBagItem(*integer* _bagIndex_, *integer* _slotIndex_)

* SetBook(*luaindex* _categoryIndex_, *luaindex* _collectionIndex_, *luaindex* _bookIndex_)

* SetBuff(*integer* _aBuffSlotId_, *string* _unitTag_)

* SetBuybackItem(*luaindex* _entryIndex_)

* SetChampionSkillAbility(*luaindex* _disiplineIndex_, *luaindex* _skillIndex_, *integer* _numPendingPoints_)

* SetCollectible(*integer* _collectibleId_, *bool* _addNickname_, *bool* _showHint_, *bool* _showBlockReason_)

* SetEmperorBonusAbility(*integer* _campaignId_, *[Alliance|#Alliance]* _alliance_)

* SetFont(*string* _fontStr_)

* SetGuildSpecificItem(*luaindex* _guildSpecificItemIndex_)

* SetHeaderRowSpacing(*number* _spacing_)

* SetHeaderVerticalOffset(*number* _verticalOffset_)

* SetItemUsingEnchantment(*integer* _itemBagIndex_, *integer* _itemSlotIndex_, *integer* _enchantmentBagIndex_, *integer* _enchantmentSlotIndex_)

* SetKeepBonusAbility(*luaindex* _bonusIndex_)

* SetKeepUpgrade(*integer* _keepId_, *[BattlegroundQueryContextType|#BattlegroundQueryContextType]* _battlegroundContext_, *integer* _upgradeLine_, *integer* _level_, *luaindex* _index_)

* SetLastCraftingResultItem(*luaindex* _resultIndex_)

* SetLink(*string* _aLink_)

* SetLootItem(*integer* _lootId_)

* SetMarketProduct(*integer* _marketProductId_)

* SetMinHeaderRowHeight(*number* _minRowHeight_)

* SetMinHeaderRows(*integer* _minRows_)

* SetOwner(*object* _owner_, *integer* _position_, *number* _offsetX_, *number* _offsetY_, *integer* _relativePoint_)

* SetPendingAlchemyItem(*integer* _solventBagId_, *integer* _solventSlotIndex_, *integer* _reagent1BagId_, *integer* _reagent1SlotIndex_, *integer* _reagent2BagId_, *integer* _reagent2SlotIndex_, *integer:nilable* _reagent3BagId_, *integer:nilable* _reagent3SlotIndex_)

* SetPendingEnchantingItem(*integer* _potencyRuneBagId_, *integer* _potencyRuneSlotIndex_, *integer* _essenceRuneBagId_, *integer* _essenceRuneSlotIndex_, *integer* _aspectRuneBagId_, *integer* _aspectRuneSlotIndex_)

* SetPendingSmithingItem(*luaindex* _patternIndex_, *luaindex* _materialIndex_, *integer* _materialQuantity_, *integer* _itemStyleId_, *luaindex* _traitIndex_)

* SetPlacedFurniture(*id64* _placedFurnitureId_)

* SetProgressionAbility(*luaindex* _aProgressionIndex_, *integer* _aMorph_, *integer* _aRank_)

* SetProvisionerIngredientItem(*luaindex* _recipeListIndex_, *luaindex* _recipeIndex_, *luaindex* _ingredientIndex_)

* SetProvisionerResultItem(*luaindex* _recipeListIndex_, *luaindex* _recipeIndex_)

* SetQuestItem(*luaindex* _questIndex_, *luaindex* _stepIndex_, *luaindex* _conditionIndex_)

* SetQuestReward(*luaindex* _aPerkIndex_)

* SetQuestTool(*luaindex* _questIndex_, *luaindex* _toolIndex_)

* SetScrollBonusAbility(*[Alliance|#Alliance]* _alliance_, *[ObjectiveType|#ObjectiveType]* _artifactType_, *luaindex* _bonusIndex_)

* SetSkillAbility(*integer* _skillType_, *luaindex* _skillIndex_, *luaindex* _abilityIndex_)

* SetSkillLine(*integer* _skillType_, *luaindex* _skillIndex_)

* SetSkillUpgradeAbility(*integer* _skillType_, *luaindex* _skillIndex_, *luaindex* _abilityIndex_)

* SetSmithingImprovementItem(*integer* _craftingSkillType_, *luaindex* _improvementItemIndex_)

* SetSmithingImprovementResult(*integer* _itemToImproveBagId_, *integer* _itemToImproveSlotIndex_, *integer* _craftingSkillType_)

* SetSmithingMaterialItem(*luaindex* _patternIndex_, *luaindex* _materialIndex_)

* SetSmithingStyleItem(*integer* _itemStyleId_)

* SetSmithingTraitItem(*luaindex* _traitItemIndex_)

* SetStoreItem(*luaindex* _entryIndex_)

* SetTradeItem(*integer* _aWho_, *luaindex* _aTradeIndex_)

* SetTradingHouseItem(*luaindex* _tradingHouseIndex_)

* SetTradingHouseListing(*luaindex* _tradingHouseIndex_)

* SetVerticalPadding(*number* _paddingY_)

* SetWornItem(*integer* _equipSlot_)

* ShowComparativeTooltips()


h3. TopLevelWindow
* AllowBringToTop()
** _Returns:_ *bool* _allow_

* BringWindowToTop *protected-attributes* ()

* SetAllowBringToTop *protected-attributes* (*bool* _allow_)

* SetDrawWhenGuiHidden *private* (*bool* _drawWhenHidden_)

* SetTopmost(*bool* _isTopmost_)


h3. WindowManager
* ApplyTemplateToControl(*object* _control_, *string* _virtualName_)

* CompareControlVisualOrder(*object* _controlA_, *object* _controlB_)
** _Returns:_ *integer* _order_

* CreateControl(*string* _arg1_, *object* _parent_, *integer* _type_)
** _Returns:_ *object* _apRet_

* CreateControlFromVirtual(*string* _controlName_, *object* _parent_, *string* _virtualName_, *string* _optionalSuffix_)
** _Returns:_ *object* _apRet_

* CreateTopLevelWindow(*string* _arg1_)
** _Returns:_ *object* _apRet_

* GetControlByName(*string* _name_, *string* _suffix_)
** _Returns:_ *object* _ret_

* GetFocusControl()
** _Returns:_ *object* _focusControl_

* GetMouseOverControl()
** _Returns:_ *object* _mouseOverControl_

* IsHandlingHardwareEvent()
** _Returns:_ *bool* _isHandlingHardwareEvent_

* IsMouseOverWorld()
** _Returns:_ *bool* _isMouseOverWorld_

* IsSecureRenderModeEnabled()
** _Returns:_ *bool* _secureRenderModeEnabled_

* SetFocusByName(*string* _name_)

* SetMouseCursor(*integer* _cursorType_)

* SetMouseFocusByName(*string* _name_)


h2. Events
* EVENT_ABILITY_COOLDOWN_UPDATED (*integer* _abilityId_)
* EVENT_ABILITY_LIST_CHANGED
* EVENT_ABILITY_PROGRESSION_RANK_UPDATE (*luaindex* _progressionIndex_, *integer* _rank_, *integer* _maxRank_, *integer* _morph_)
* EVENT_ABILITY_PROGRESSION_RESULT (*integer* _reason_)
* EVENT_ABILITY_PROGRESSION_XP_UPDATE (*luaindex* _progressionIndex_, *integer* _lastRankXP_, *integer* _nextRankXP_, *integer* _currentXP_, *bool* _atMorph_)
* EVENT_ABILITY_REQUIREMENTS_FAIL (*integer* _errorId_)
* EVENT_ACHIEVEMENTS_UPDATED
* EVENT_ACHIEVEMENT_AWARDED (*string* _name_, *integer* _points_, *integer* _id_, *string* _link_)
* EVENT_ACHIEVEMENT_UPDATED (*integer* _id_)
* EVENT_ACTION_SLOTS_FULL_UPDATE (*bool* _isHotbarSwap_)
* EVENT_ACTION_SLOT_ABILITY_SLOTTED (*bool* _newAbilitySlotted_)
* EVENT_ACTION_SLOT_ABILITY_USED (*luaindex* _slotNum_)
* EVENT_ACTION_SLOT_ABILITY_USED_WRONG_WEAPON (*integer* _weaponConfigType_)
* EVENT_ACTION_SLOT_STATE_UPDATED (*luaindex* _slotNum_)
* EVENT_ACTION_SLOT_UPDATED (*luaindex* _slotNum_)
* EVENT_ACTION_UPDATE_COOLDOWNS
* EVENT_ACTIVE_MOUNT_CHANGED
* EVENT_ACTIVE_QUEST_TOOL_CHANGED (*luaindex* _journalIndex_, *luaindex* _toolIndex_)
* EVENT_ACTIVE_QUEST_TOOL_CLEARED
* EVENT_ACTIVE_QUICKSLOT_CHANGED (*integer* _slotId_)
* EVENT_ACTIVE_WEAPON_PAIR_CHANGED (*integer* _activeWeaponPair_, *bool* _locked_)
* EVENT_ACTIVITY_FINDER_ACTIVITY_COMPLETE
* EVENT_ACTIVITY_FINDER_COOLDOWNS_UPDATE
* EVENT_ACTIVITY_FINDER_STATUS_UPDATE (*integer* _status_)
* EVENT_ACTIVITY_QUEUE_RESULT (*integer* _result_)
* EVENT_AGENT_CHAT_ACCEPTED
* EVENT_AGENT_CHAT_DECLINED
* EVENT_AGENT_CHAT_FORCED
* EVENT_AGENT_CHAT_REQUESTED
* EVENT_AGENT_CHAT_TERMINATED
* EVENT_ALLIANCE_POINT_UPDATE (*integer* _alliancePoints_, *bool* _playSound_, *integer* _difference_, *integer* _reason_)
* EVENT_ANIMATION_NOTE (*string* _animNote_)
* EVENT_ARTIFACT_CONTROL_STATE (*string* _artifactName_, *integer* _keepId_, *string* _characterName_, *integer* _playerAlliance_, *integer* _controlEvent_, *integer* _controlState_, *integer* _campaignId_, *string* _displayName_)
* EVENT_ARTIFACT_SCROLL_STATE_CHANGED (*integer* _objectiveKeepId_, *integer* _objectiveObjectiveId_, *integer* _battlegroundContext_, *string* _objectiveName_, *integer* _objectiveControlEvent_, *integer* _objectiveControlState_, *integer* _originalOwnerAlliance_, *integer* _holderAlliance_, *integer* _lastHolderAlliance_, *integer* _capturedAtKeepId_, *integer* _pinType_)
* EVENT_ARTIFICIAL_EFFECT_ADDED (*integer* _artificialEffectId_)
* EVENT_ARTIFICIAL_EFFECT_REMOVED (*integer* _artificialEffectId_)
* EVENT_ASSIGNED_CAMPAIGN_CHANGED (*integer* _newAssignedCampaignId_)
* EVENT_ATTRIBUTE_FORCE_RESPEC (*string* _note_)
* EVENT_ATTRIBUTE_UPGRADE_UPDATED
* EVENT_AVENGE_KILL (*string* _avengedCharacterName_, *string* _killedCharacterName_, *string* _avengedDisplayName_, *string* _killedDisplayName_)
* EVENT_BANKED_CURRENCY_UPDATE (*integer* _currency_, *integer* _newValue_, *integer* _oldValue_)
* EVENT_BANKED_MONEY_UPDATE (*integer* _newValue_, *integer* _oldValue_)
* EVENT_BANK_IS_FULL
* EVENT_BATTLEGROUND_INACTIVITY_WARNING
* EVENT_BATTLEGROUND_KILL (*string* _killedPlayerCharacterName_, *string* _killedPlayerDisplayName_, *integer* _killedPlayerBattlegroundAlliance_, *string* _killingPlayerCharacterName_, *string* _killingPlayerDisplayName_, *integer* _killingPlayerBattlegroundAlliance_, *integer* _battlegroundKillType_)
* EVENT_BATTLEGROUND_LEADERBOARD_DATA_CHANGED
* EVENT_BATTLEGROUND_RULESET_CHANGED
* EVENT_BATTLEGROUND_SCOREBOARD_UPDATED
* EVENT_BATTLEGROUND_SHUTDOWN_TIMER (*bool* _enabled_)
* EVENT_BATTLEGROUND_STATE_CHANGED (*integer* _previousState_, *integer* _currentState_)
* EVENT_BATTLE_STANDARDS_UPDATED
* EVENT_BEGIN_CUTSCENE
* EVENT_BEGIN_LOCKPICK
* EVENT_BEGIN_SIEGE_CONTROL
* EVENT_BEGIN_SIEGE_UPGRADE
* EVENT_BOSSES_CHANGED
* EVENT_BROADCAST (*string* _message_)
* EVENT_BUYBACK_RECEIPT (*string* _itemLink_, *integer* _itemQuantity_, *integer* _money_, *integer* _itemSoundCategory_)
* EVENT_BUY_RECEIPT (*string* _entryName_, *integer* _entryType_, *integer* _entryQuantity_, *integer* _money_, *integer* _specialCurrencyType1_, *string* _specialCurrencyInfo1_, *integer* _specialCurrencyQuantity1_, *integer* _specialCurrencyType2_, *string* _specialCurrencyInfo2_, *integer* _specialCurrencyQuantity2_, *integer* _itemSoundCategory_)
* EVENT_CADWELL_PROGRESSION_LEVEL_CHANGED (*integer* _progressionLevel_)
* EVENT_CAMPAIGN_ASSIGNMENT_RESULT (*integer* _result_)
* EVENT_CAMPAIGN_EMPEROR_CHANGED (*integer* _campaignId_)
* EVENT_CAMPAIGN_HISTORY_WINDOW_CHANGED
* EVENT_CAMPAIGN_LEADERBOARD_DATA_CHANGED
* EVENT_CAMPAIGN_QUEUE_JOINED (*integer* _campaignId_, *bool* _isGroup_)
* EVENT_CAMPAIGN_QUEUE_LEFT (*integer* _campaignId_, *bool* _isGroup_)
* EVENT_CAMPAIGN_QUEUE_POSITION_CHANGED (*integer* _campaignId_, *bool* _isGroup_, *integer* _position_)
* EVENT_CAMPAIGN_QUEUE_STATE_CHANGED (*integer* _campaignId_, *bool* _isGroup_, *integer* _state_)
* EVENT_CAMPAIGN_SCORE_DATA_CHANGED
* EVENT_CAMPAIGN_SELECTION_DATA_CHANGED
* EVENT_CAMPAIGN_STATE_INITIALIZED (*integer* _campaignId_)
* EVENT_CAMPAIGN_UNASSIGNMENT_RESULT (*integer* _result_)
* EVENT_CAMPAIGN_UNDERPOP_BONUS_CHANGE_NOTIFICATION (*integer* _campaignId_)
* EVENT_CANCEL_MOUSE_REQUEST_DESTROY_ITEM
* EVENT_CANNOT_CROUCH_WHILE_CARRYING_ARTIFACT (*string* _artifactName_)
* EVENT_CANNOT_DO_THAT_WHILE_DEAD
* EVENT_CANNOT_FISH_WHILE_SWIMMING
* EVENT_CAPTURE_AREA_STATE_CHANGED (*integer* _objectiveKeepId_, *integer* _objectiveObjectiveId_, *integer* _battlegroundContext_, *string* _objectiveName_, *integer* _objectiveControlEvent_, *integer* _objectiveControlState_, *integer* _owningAlliance_, *integer* _pinType_)
* EVENT_CAPTURE_AREA_STATUS (*integer* _keepId_, *integer* _objectiveId_, *integer* _battlegroundContext_, *integer* _capturePoolValue_, *integer* _capturePoolMax_, *integer* _capturingPlayers_, *integer* _contestingPlayers_, *integer* _owningAlliance_, *integer* _pinType_)
* EVENT_CAPTURE_FLAG_STATE_CHANGED (*integer* _objectiveKeepId_, *integer* _objectiveObjectiveId_, *integer* _battlegroundContext_, *string* _objectiveName_, *integer* _objectiveControlEvent_, *integer* _objectiveControlState_, *integer* _originalOwnerAlliance_, *integer* _holderAlliance_, *integer* _lastHolderAlliance_, *integer* _pinType_)
* EVENT_CARRIED_CURRENCY_UPDATE (*integer* _currency_, *integer* _newValue_, *integer* _oldValue_, *integer* _reason_)
* EVENT_CHAMPION_LEVEL_ACHIEVED (*bool* _wasChampionSystemUnlocked_)
* EVENT_CHAMPION_POINT_GAINED (*integer* _championPointsDelta_)
* EVENT_CHAMPION_POINT_UPDATE (*string* _unitTag_, *integer* _oldChampionPoints_, *integer* _currentChampionPoints_)
* EVENT_CHAMPION_PURCHASE_RESULT (*integer* _result_)
* EVENT_CHAMPION_SYSTEM_UNLOCKED
* EVENT_CHATTER_BEGIN (*integer* _optionCount_)
* EVENT_CHATTER_END
* EVENT_CHAT_CHANNEL_INVITE (*string* _channelName_, *string* _playerName_)
* EVENT_CHAT_CHANNEL_JOIN (*integer* _channelId_, *integer* _customChannelId_, *string* _channelName_)
* EVENT_CHAT_CHANNEL_LEAVE (*integer* _channelId_, *integer* _customChannelId_, *string* _channelName_)
* EVENT_CHAT_LOG_TOGGLED (*bool* _opened_)
* EVENT_CHAT_MESSAGE_CHANNEL (*integer* _channelType_, *string* _fromName_, *string* _text_, *bool* _isCustomerService_, *string* _fromDisplayName_)
* EVENT_CLOSE_BANK
* EVENT_CLOSE_GUILD_BANK
* EVENT_CLOSE_STORE
* EVENT_CLOSE_TRADING_HOUSE
* EVENT_COLLECTIBLES_SEARCH_RESULTS_READY
* EVENT_COLLECTIBLE_NEW_STATUS_CLEARED (*integer* _collectibleId_)
* EVENT_COLLECTIBLE_NOTIFICATION_NEW (*integer* _collectibleId_)
* EVENT_COLLECTIBLE_NOTIFICATION_REMOVED (*integer* _notificationId_, *integer* _collectibleId_)
* EVENT_COLLECTIBLE_RENAME_ERROR (*integer* _errorReason_)
* EVENT_COLLECTIBLE_REQUEST_BROWSE_TO (*integer* _collectibleId_, *luaindex* _categoryIndex_, *luaindex* _subcategoryIndex_)
* EVENT_COLLECTIBLE_SET_IN_WATER_ALERT
* EVENT_COLLECTIBLE_USE_RESULT (*integer* _result_, *bool* _isAttemptingActivation_)
* EVENT_COLLECTION_UPDATED
* EVENT_COMBAT_EVENT (*integer* _result_, *bool* _isError_, *string* _abilityName_, *integer* _abilityGraphic_, *integer* _abilityActionSlotType_, *string* _sourceName_, *integer* _sourceType_, *string* _targetName_, *integer* _targetType_, *integer* _hitValue_, *integer* _powerType_, *integer* _damageType_, *bool* _log_, *integer* _sourceUnitId_, *integer* _targetUnitId_, *integer* _abilityId_)
* EVENT_CONFIRM_INTERACT (*string* _dialogTitle_, *string* _dialogBody_, *string* _acceptText_, *string* _cancelText_)
* EVENT_CONVERSATION_FAILED_INVENTORY_FULL
* EVENT_CONVERSATION_FAILED_UNIQUE_ITEM
* EVENT_CONVERSATION_UPDATED (*string* _conversationBodyText_, *integer* _conversationOptionCount_)
* EVENT_CORONATE_EMPEROR_NOTIFICATION (*integer* _campaignId_, *string* _emperorCharacterName_, *integer* _emperorAlliance_, *string* _emperorDisplayName_)
* EVENT_CRAFTING_STATION_INTERACT (*integer* _craftSkill_, *bool* _sameStation_)
* EVENT_CRAFT_BAG_AUTO_TRANSFER_NOTIFICATION_CLEARED
* EVENT_CRAFT_COMPLETED (*integer* _craftSkill_)
* EVENT_CRAFT_FAILED (*integer* _tradeskillResult_)
* EVENT_CRAFT_STARTED (*integer* _craftSkill_)
* EVENT_CROWN_CRATES_SYSTEM_STATE_CHANGED (*integer* _crownCratesSystemState_)
* EVENT_CROWN_CRATE_INVENTORY_UPDATED
* EVENT_CROWN_CRATE_OPEN_RESPONSE (*integer* _crownCrateId_, *integer* _response_)
* EVENT_CROWN_CRATE_QUANTITY_UPDATE (*integer* _crateId_, *integer* _count_)
* EVENT_CURRENT_CAMPAIGN_CHANGED (*integer* _newCurrentCampaignId_)
* EVENT_CURRENT_SUBZONE_LIST_CHANGED
* EVENT_CURSOR_DROPPED (*integer* _type_, *integer* _param1_, *integer* _param2_, *integer* _param3_, *integer* _param4_, *integer* _param5_, *integer* _param6_)
* EVENT_CURSOR_PICKUP (*integer* _type_, *integer* _param1_, *integer* _param2_, *integer* _param3_, *integer* _param4_, *integer* _param5_, *integer* _param6_, *integer* _itemSoundCategory_)
* EVENT_CUSTOMER_SERVICE_FEEDBACK_SUBMITTED (*string* _responseMessage_, *bool* _success_)
* EVENT_CUSTOMER_SERVICE_TICKET_SUBMITTED (*string* _responseMessage_, *bool* _success_)
* EVENT_DEPOSE_EMPEROR_NOTIFICATION (*integer* _campaignId_, *string* _emperorCharacterName_, *integer* _emperorAlliance_, *bool* _abdication_, *string* _emperorDisplayName_)
* EVENT_DISABLE_SIEGE_AIM_ABILITY
* EVENT_DISABLE_SIEGE_FIRE_ABILITY
* EVENT_DISABLE_SIEGE_PACKUP_ABILITY
* EVENT_DISCOVERY_EXPERIENCE (*string* _areaName_, *integer* _level_, *integer* _previousExperience_, *integer* _currentExperience_, *integer* _championPoints_)
* EVENT_DISGUISE_STATE_CHANGED (*string* _unitTag_, *integer* _disguiseState_)
* EVENT_DISPLAY_ACTIVE_COMBAT_TIP (*integer* _activeCombatTipId_)
* EVENT_DISPLAY_ALERT (*string* _alertText_, *string* _soundId_)
* EVENT_DISPLAY_ANNOUNCEMENT (*string* _title_, *string* _description_)
* EVENT_DISPLAY_TUTORIAL (*luaindex* _tutorialIndex_)
* EVENT_DISPOSITION_UPDATE (*string* _unitTag_)
* EVENT_DUEL_COUNTDOWN (*integer* _startTimeMS_)
* EVENT_DUEL_FINISHED (*integer* _duelResult_, *bool* _wasLocalPlayersResult_, *string* _opponentCharacterName_, *string* _opponentDisplayName_, *integer* _opponentAlliance_, *integer* _opponentGender_, *integer* _opponentClassId_, *integer* _opponentRaceId_)
* EVENT_DUEL_INVITE_ACCEPTED
* EVENT_DUEL_INVITE_CANCELED
* EVENT_DUEL_INVITE_DECLINED
* EVENT_DUEL_INVITE_FAILED (*integer* _reason_, *string* _targetCharacterName_, *string* _targetDisplayName_)
* EVENT_DUEL_INVITE_RECEIVED (*string* _inviterCharacterName_, *string* _inviterDisplayName_)
* EVENT_DUEL_INVITE_REMOVED
* EVENT_DUEL_INVITE_SENT (*string* _inviteeCharacterName_, *string* _inviteeDisplayName_)
* EVENT_DUEL_NEAR_BOUNDARY (*bool* _isInWarningArea_)
* EVENT_DUEL_STARTED
* EVENT_DYEING_STATION_INTERACT_END
* EVENT_DYEING_STATION_INTERACT_START
* EVENT_DYE_STAMP_USE_FAIL (*integer* _reason_)
* EVENT_EFFECTS_FULL_UPDATE
* EVENT_EFFECT_CHANGED (*integer* _changeType_, *integer* _effectSlot_, *string* _effectName_, *string* _unitTag_, *number* _beginTime_, *number* _endTime_, *integer* _stackCount_, *string* _iconName_, *string* _buffType_, *integer* _effectType_, *integer* _abilityType_, *integer* _statusEffectType_, *string* _unitName_, *integer* _unitId_, *integer* _abilityId_, *integer* _sourceType_)
* EVENT_ENABLE_SIEGE_AIM_ABILITY
* EVENT_ENABLE_SIEGE_FIRE_ABILITY
* EVENT_ENABLE_SIEGE_PACKUP_ABILITY
* EVENT_END_CRAFTING_STATION_INTERACT (*integer* _craftSkill_)
* EVENT_END_CUTSCENE
* EVENT_END_FAST_TRAVEL_INTERACTION
* EVENT_END_FAST_TRAVEL_KEEP_INTERACTION
* EVENT_END_KEEP_GUILD_CLAIM_INTERACTION
* EVENT_END_KEEP_GUILD_RELEASE_INTERACTION
* EVENT_END_SIEGE_CONTROL
* EVENT_END_SOUL_GEM_RESURRECTION
* EVENT_ENLIGHTENED_STATE_GAINED
* EVENT_ENLIGHTENED_STATE_LOST
* EVENT_ENTER_GROUND_TARGET_MODE
* EVENT_ESO_PLUS_FREE_TRIAL_NOTIFICATION_CLEARED
* EVENT_EXPERIENCE_GAIN (*integer* _reason_, *integer* _level_, *integer* _previousExperience_, *integer* _currentExperience_, *integer* _championPoints_)
* EVENT_EXPERIENCE_UPDATE (*string* _unitTag_, *integer* _currentExp_, *integer* _maxExp_, *integer* _reason_)
* EVENT_FAST_TRAVEL_KEEP_NETWORK_LINK_CHANGED (*luaindex* _linkIndex_, *integer* _linkType_, *integer* _owningAlliance_, *integer* _oldLinkType_, *integer* _oldOwningAlliance_, *bool* _isLocal_)
* EVENT_FAST_TRAVEL_KEEP_NETWORK_UPDATED
* EVENT_FAST_TRAVEL_NETWORK_UPDATED (*luaindex* _nodeIndex_)
* EVENT_FEEDBACK_REQUESTED (*integer* _feedbackId_)
* EVENT_FEEDBACK_TOO_FREQUENT_SCREENSHOT
* EVENT_FINESSE_RANK_CHANGED (*string* _unitTag_, *luaindex* _rankNum_, *string* _name_, *integer* _xpBonus_, *bool* _loot_)
* EVENT_FISHING_LURE_CLEARED
* EVENT_FISHING_LURE_SET (*luaindex* _fishingLure_)
* EVENT_FORWARD_CAMPS_UPDATED
* EVENT_FORWARD_CAMP_RESPAWN_TIMER_BEGINS (*integer* _durationMS_)
* EVENT_GAME_CAMERA_ACTIVATED
* EVENT_GAME_CAMERA_CHARACTER_FRAMING_STARTED
* EVENT_GAME_CAMERA_DEACTIVATED
* EVENT_GAME_CAMERA_UI_MODE_CHANGED
* EVENT_GAME_FOCUS_CHANGED (*bool* _hasFocus_)
* EVENT_GRAVEYARD_USAGE_FAILURE
* EVENT_GROUPING_TOOLS_FIND_REPLACEMENT_NOTIFICATION_NEW
* EVENT_GROUPING_TOOLS_FIND_REPLACEMENT_NOTIFICATION_REMOVED
* EVENT_GROUPING_TOOLS_LFG_JOINED (*string* _locationName_)
* EVENT_GROUPING_TOOLS_NO_LONGER_LFG
* EVENT_GROUPING_TOOLS_READY_CHECK_CANCELLED (*integer* _reason_)
* EVENT_GROUPING_TOOLS_READY_CHECK_UPDATED
* EVENT_GROUP_CAMPAIGN_ASSIGNMENTS_CHANGED
* EVENT_GROUP_ELECTION_FAILED (*integer* _failureReason_, *string* _descriptor_)
* EVENT_GROUP_ELECTION_NOTIFICATION_ADDED
* EVENT_GROUP_ELECTION_NOTIFICATION_REMOVED
* EVENT_GROUP_ELECTION_REQUESTED (*string* _descriptor_)
* EVENT_GROUP_ELECTION_RESULT (*integer* _electionResult_, *string* _descriptor_)
* EVENT_GROUP_INVITE_ACCEPT_RESPONSE_TIMEOUT
* EVENT_GROUP_INVITE_RECEIVED (*string* _inviterCharacterName_, *string* _inviterDisplayName_)
* EVENT_GROUP_INVITE_REMOVED
* EVENT_GROUP_INVITE_RESPONSE (*string* _inviterName_, *integer* _response_, *string* _inviterDisplayName_)
* EVENT_GROUP_MEMBER_CONNECTED_STATUS (*string* _unitTag_, *bool* _isOnline_)
* EVENT_GROUP_MEMBER_IN_REMOTE_REGION (*string* _unitTag_, *bool* _isInRemoteRegion_)
* EVENT_GROUP_MEMBER_JOINED (*string* _memberName_)
* EVENT_GROUP_MEMBER_LEFT (*string* _memberCharacterName_, *integer* _reason_, *bool* _isLocalPlayer_, *bool* _isLeader_, *string* _memberDisplayName_, *bool* _actionRequiredVote_)
* EVENT_GROUP_MEMBER_ROLES_CHANGED (*string* _unitTag_, *bool* _dps_, *bool* _healer_, *bool* _tank_)
* EVENT_GROUP_NOTIFICATION_MESSAGE (*integer* _messageId_)
* EVENT_GROUP_SUPPORT_RANGE_UPDATE (*string* _unitTag_, *bool* _status_)
* EVENT_GROUP_TYPE_CHANGED (*bool* _largeGroup_)
* EVENT_GROUP_UPDATE
* EVENT_GROUP_VETERAN_DIFFICULTY_CHANGED (*bool* _isVeteranDifficulty_)
* EVENT_GUEST_CAMPAIGN_CHANGED (*integer* _newGuestCampaignId_)
* EVENT_GUILD_BANKED_MONEY_UPDATE (*integer* _newBankedMoney_, *integer* _oldBankedMoney_)
* EVENT_GUILD_BANK_DESELECTED
* EVENT_GUILD_BANK_ITEMS_READY
* EVENT_GUILD_BANK_ITEM_ADDED (*integer* _slotId_)
* EVENT_GUILD_BANK_ITEM_REMOVED (*integer* _slotId_)
* EVENT_GUILD_BANK_OPEN_ERROR (*integer* _reason_)
* EVENT_GUILD_BANK_SELECTED (*integer* _guildId_)
* EVENT_GUILD_BANK_TRANSFER_ERROR (*integer* _reason_)
* EVENT_GUILD_BANK_UPDATED_QUANTITY (*integer* _slotId_)
* EVENT_GUILD_KIOSK_CONSIDER_BID_START
* EVENT_GUILD_KIOSK_CONSIDER_BID_STOP
* EVENT_GUILD_KIOSK_CONSIDER_PURCHASE_START
* EVENT_GUILD_KIOSK_CONSIDER_PURCHASE_STOP
* EVENT_GUILD_KIOSK_ERROR (*integer* _reason_)
* EVENT_GUI_WORLD_PARTICLE_EFFECT_READY (*integer* _particleEffectId_)
* EVENT_HELP_INITIALIZED
* EVENT_HELP_SEARCH_RESULTS_READY
* EVENT_HERALDRY_CUSTOMIZATION_END
* EVENT_HERALDRY_CUSTOMIZATION_START
* EVENT_HERALDRY_FUNDS_UPDATED
* EVENT_HERALDRY_SAVED
* EVENT_HIDE_BOOK
* EVENT_HIDE_OBJECTIVE_STATUS
* EVENT_HIGH_FALL_DAMAGE
* EVENT_HOME_SHOW_LEADERBOARD_DATA_CHANGED (*integer* _voteCategory_, *integer* _houseCategory_)
* EVENT_HOT_BAR_RESULT (*integer* _reason_)
* EVENT_HOUSING_ADD_PERMISSIONS_CANT_ADD_SELF
* EVENT_HOUSING_ADD_PERMISSIONS_FAILED (*integer* _userGroup_, *string* _attemptedName_)
* EVENT_HOUSING_EDITOR_MODE_CHANGED (*integer* _oldMode_, *integer* _newMode_)
* EVENT_HOUSING_EDITOR_REQUEST_RESULT (*integer* _requestResult_)
* EVENT_HOUSING_FURNITURE_PLACED (*id64* _furnitureId_, *integer* _collectibleId_)
* EVENT_HOUSING_FURNITURE_REMOVED (*id64* _furnitureId_, *integer* _collectibleId_)
* EVENT_HOUSING_LOAD_PERMISSIONS_RESULT (*integer* _loadResult_)
* EVENT_HOUSING_PERMISSIONS_CHANGED (*integer* _userGroup_)
* EVENT_HOUSING_PLAYER_INFO_CHANGED (*bool* _wasOwner_, *bool* _oldCanEdit_, *integer* _oldVisitorRole_)
* EVENT_HOUSING_POPULATION_CHANGED (*integer* _newPopulation_)
* EVENT_HOUSING_PRIMARY_RESIDENCE_SET (*integer* _houseId_)
* EVENT_IMPACTFUL_HIT
* EVENT_IMPERIAL_CITY_ACCESS_GAINED_NOTIFICATION (*integer* _campaignId_, *integer* _alliance_)
* EVENT_IMPERIAL_CITY_ACCESS_LOST_NOTIFICATION (*integer* _campaignId_, *integer* _alliance_)
* EVENT_INSTANCE_KICK_TIME_UPDATE (*integer* _timeRemainingMs_)
* EVENT_INTERACTABLE_IMPOSSIBLE_TO_PICK (*string* _interactableName_)
* EVENT_INTERACTABLE_LOCKED (*string* _interactableName_)
* EVENT_INTERACT_BUSY
* EVENT_INTERFACE_SETTING_CHANGED (*integer* _settingSystemType_, *integer* _settingId_)
* EVENT_INVENTORY_BAG_CAPACITY_CHANGED (*integer* _previousCapacity_, *integer* _currentCapacity_, *integer* _previousUpgrade_, *integer* _currentUpgrade_)
* EVENT_INVENTORY_BANK_CAPACITY_CHANGED (*integer* _previousCapacity_, *integer* _currentCapacity_, *integer* _previousUpgrade_, *integer* _currentUpgrade_)
* EVENT_INVENTORY_BOUGHT_BAG_SPACE (*integer* _numberOfSlots_)
* EVENT_INVENTORY_BOUGHT_BANK_SPACE (*integer* _numberOfSlots_)
* EVENT_INVENTORY_BUY_BAG_SPACE (*integer* _cost_)
* EVENT_INVENTORY_BUY_BANK_SPACE (*integer* _cost_)
* EVENT_INVENTORY_CLOSE_BUY_SPACE
* EVENT_INVENTORY_FULL_UPDATE
* EVENT_INVENTORY_IS_FULL (*integer* _numSlotsRequested_, *integer* _numSlotsFree_)
* EVENT_INVENTORY_ITEMS_AUTO_TRANSFERRED_TO_CRAFT_BAG
* EVENT_INVENTORY_ITEM_DESTROYED (*integer* _itemSoundCategory_)
* EVENT_INVENTORY_ITEM_USED (*integer* _itemSoundCategory_)
* EVENT_INVENTORY_SINGLE_SLOT_UPDATE (*integer* _bagId_, *integer* _slotId_, *bool* _isNewItem_, *integer* _itemSoundCategory_, *integer* _inventoryUpdateReason_, *integer* _stackCountChange_)
* EVENT_INVENTORY_SLOT_LOCKED (*integer* _bagId_, *integer* _slotId_)
* EVENT_INVENTORY_SLOT_UNLOCKED (*integer* _bagId_, *integer* _slotId_)
* EVENT_ITEM_LAUNDER_RESULT (*integer* _result_)
* EVENT_ITEM_ON_COOLDOWN
* EVENT_ITEM_REPAIR_FAILURE (*integer* _reason_)
* EVENT_ITEM_SLOT_CHANGED (*integer* _itemSoundCategory_)
* EVENT_JUMP_FAILED (*integer* _reason_)
* EVENT_JUSTICE_BEING_ARRESTED (*bool* _quitGame_)
* EVENT_JUSTICE_BOUNTY_PAYOFF_AMOUNT_UPDATED (*integer* _oldBounty_, *integer* _newBounty_, *bool* _isInitialize_)
* EVENT_JUSTICE_FENCE_UPDATE (*integer* _sellsUsed_, *integer* _laundersUsed_)
* EVENT_JUSTICE_GOLD_PICKPOCKETED (*integer* _goldAmount_)
* EVENT_JUSTICE_GOLD_REMOVED (*integer* _goldAmount_)
* EVENT_JUSTICE_INFAMY_UPDATED (*integer* _oldInfamy_, *integer* _newInfamy_, *integer* _oldInfamyLevel_, *integer* _newInfamyLevel_)
* EVENT_JUSTICE_ITEM_PICKPOCKETED (*string* _itemName_, *integer* _itemCount_)
* EVENT_JUSTICE_NOW_KOS
* EVENT_JUSTICE_NO_LONGER_KOS
* EVENT_JUSTICE_NPC_SHUNNING
* EVENT_JUSTICE_PICKPOCKET_FAILED
* EVENT_JUSTICE_STOLEN_ITEMS_REMOVED
* EVENT_KEEPS_INITIALIZED
* EVENT_KEEP_ALLIANCE_OWNER_CHANGED (*integer* _keepId_, *integer* _battlegroundContext_, *integer* _owningAlliance_, *integer* _oldOwningAlliance_)
* EVENT_KEEP_END_INTERACTION
* EVENT_KEEP_GATE_STATE_CHANGED (*integer* _keepId_, *bool* _open_)
* EVENT_KEEP_GUILD_CLAIM_UPDATE (*integer* _keepId_, *integer* _battlegroundContext_)
* EVENT_KEEP_INITIALIZED (*integer* _keepId_, *integer* _battlegroundContext_)
* EVENT_KEEP_OWNERSHIP_CHANGED_NOTIFICATION (*integer* _campaignId_, *integer* _keepId_, *integer* _oldOwner_, *integer* _newOwner_)
* EVENT_KEEP_RESOURCE_UPDATE (*integer* _keepId_)
* EVENT_KEEP_START_INTERACTION
* EVENT_KEEP_UNDER_ATTACK_CHANGED (*integer* _keepId_, *integer* _battlegroundContext_, *bool* _underAttack_)
* EVENT_KILL_LOCATIONS_UPDATED
* EVENT_LEADER_UPDATE (*string* _leaderTag_)
* EVENT_LEAVE_CAMPAIGN_QUEUE_RESPONSE (*integer* _response_)
* EVENT_LEAVE_RAM_ESCORT
* EVENT_LEVEL_UPDATE (*string* _unitTag_, *integer* _level_)
* EVENT_LINKED_WORLD_POSITION_CHANGED
* EVENT_LOCKPICK_BROKE (*integer* _inactivityLengthMs_)
* EVENT_LOCKPICK_FAILED
* EVENT_LOCKPICK_SUCCESS
* EVENT_LOGOUT_DEFERRED (*integer* _deferMilliseconds_, *bool* _quitRequested_)
* EVENT_LOGOUT_DISALLOWED (*bool* _quitRequested_)
* EVENT_LOOT_CLOSED
* EVENT_LOOT_ITEM_FAILED (*integer* _reason_, *string* _itemName_)
* EVENT_LOOT_RECEIVED (*string* _receivedBy_, *string* _itemName_, *integer* _quantity_, *integer* _itemSound_, *integer* _lootType_, *bool* _self_, *bool* _isPickpocketLoot_, *string* _questItemIcon_, *integer* _itemId_, *bool* _isStolen_)
* EVENT_LOOT_UPDATED
* EVENT_LORE_BOOK_ALREADY_KNOWN (*string* _bookTitle_)
* EVENT_LORE_BOOK_LEARNED (*luaindex* _categoryIndex_, *luaindex* _collectionIndex_, *luaindex* _bookIndex_, *luaindex* _guildIndex_, *bool* _isMaxRank_)
* EVENT_LORE_BOOK_LEARNED_SKILL_EXPERIENCE (*luaindex* _categoryIndex_, *luaindex* _collectionIndex_, *luaindex* _bookIndex_, *luaindex* _guildIndex_, *integer* _skillType_, *luaindex* _skillIndex_, *luaindex* _rank_, *integer* _previousXP_, *integer* _currentXP_)
* EVENT_LORE_COLLECTION_COMPLETED (*luaindex* _categoryIndex_, *luaindex* _collectionIndex_, *luaindex* _guildIndex_, *bool* _isMaxRank_)
* EVENT_LORE_COLLECTION_COMPLETED_SKILL_EXPERIENCE (*luaindex* _categoryIndex_, *luaindex* _collectionIndex_, *luaindex* _guildIndex_, *integer* _skillType_, *luaindex* _skillIndex_, *luaindex* _rank_, *integer* _previousXP_, *integer* _currentXP_)
* EVENT_LORE_LIBRARY_INITIALIZED
* EVENT_LOW_FALL_DAMAGE
* EVENT_MAIL_ATTACHED_MONEY_CHANGED (*integer* _moneyAmount_)
* EVENT_MAIL_ATTACHMENT_ADDED (*luaindex* _attachmentSlot_)
* EVENT_MAIL_ATTACHMENT_REMOVED (*luaindex* _attachmentSlot_)
* EVENT_MAIL_CLOSE_MAILBOX
* EVENT_MAIL_COD_CHANGED (*integer* _codAmount_)
* EVENT_MAIL_INBOX_UPDATE
* EVENT_MAIL_NUM_UNREAD_CHANGED (*integer* _numUnread_)
* EVENT_MAIL_OPEN_MAILBOX
* EVENT_MAIL_READABLE (*id64* _mailId_)
* EVENT_MAIL_REMOVED (*id64* _mailId_)
* EVENT_MAIL_SEND_FAILED (*integer* _reason_)
* EVENT_MAIL_SEND_SUCCESS
* EVENT_MAIL_TAKE_ATTACHED_ITEM_SUCCESS (*id64* _mailId_)
* EVENT_MAIL_TAKE_ATTACHED_MONEY_SUCCESS (*id64* _mailId_)
* EVENT_MAP_PING (*integer* _pingEventType_, *integer* _pingType_, *string* _pingTag_, *number* _offsetX_, *number* _offsetY_, *bool* _isLocalPlayerOwner_)
* EVENT_MEDAL_AWARDED (*integer* _medalId_, *string* _name_, *string* _iconFilename_, *integer* _value_)
* EVENT_MISSING_LURE
* EVENT_MONEY_UPDATE (*integer* _newMoney_, *integer* _oldMoney_, *integer* _reason_)
* EVENT_MOUNTED_STATE_CHANGED (*bool* _mounted_)
* EVENT_MOUNT_FAILURE (*integer* _reason_, *integer* _arg1_)
* EVENT_MOUNT_INFO_UPDATED
* EVENT_MOUSE_REQUEST_ABANDON_QUEST (*luaindex* _journalIndex_, *string* _name_)
* EVENT_MOUSE_REQUEST_DESTROY_ITEM (*integer* _bagId_, *integer* _slotIndex_, *integer* _itemCount_, *string* _name_, *bool* _needsConfirm_)
* EVENT_MOUSE_REQUEST_DESTROY_ITEM_FAILED (*integer* _bagId_, *integer* _slotIndex_, *integer* _itemCount_, *string* _name_, *integer* _reason_)
* EVENT_MURDERBALL_STATE_CHANGED (*integer* _objectiveKeepId_, *integer* _objectiveObjectiveId_, *integer* _battlegroundContext_, *string* _objectiveName_, *integer* _objectiveControlEvent_, *integer* _objectiveControlState_, *integer* _holderAlliance_, *integer* _lastHolderAlliance_, *string* _holderRawCharacterName_, *string* _holderDisplayName_, *string* _lastHolderRawCharacterName_, *string* _lastHolderDisplayName_, *integer* _pinType_)
* EVENT_NEW_MOVEMENT_IN_UI_MODE
* EVENT_NON_COMBAT_BONUS_CHANGED (*integer* _nonCombatBonus_, *integer* _oldValue_, *integer* _newValue_)
* EVENT_NOT_ENOUGH_MONEY
* EVENT_NO_INTERACT_TARGET
* EVENT_OBJECTIVES_UPDATED
* EVENT_OBJECTIVE_COMPLETED (*luaindex* _zoneIndex_, *luaindex* _poiIndex_, *integer* _level_, *integer* _previousExperience_, *integer* _currentExperience_, *integer* _championPoints_)
* EVENT_OBJECTIVE_CONTROL_STATE (*integer* _objectiveKeepId_, *integer* _objectiveObjectiveId_, *integer* _battlegroundContext_, *string* _objectiveName_, *integer* _objectiveType_, *integer* _objectiveControlEvent_, *integer* _objectiveControlState_, *integer* _objectiveParam1_, *integer* _objectiveParam2_, *integer* _pinType_)
* EVENT_OPEN_BANK
* EVENT_OPEN_FENCE (*bool* _allowSell_, *bool* _allowLaunder_)
* EVENT_OPEN_GUILD_BANK
* EVENT_OPEN_HOUSE_STORE
* EVENT_OPEN_STORE
* EVENT_OPEN_TRADING_HOUSE
* EVENT_PERSONALITY_CHANGED
* EVENT_PICKPOCKET_ON_COOLDOWN
* EVENT_PICKPOCKET_OUT_OF_POSITION
* EVENT_PICKPOCKET_STATE_UPDATED
* EVENT_PICKPOCKET_SUSPICIOUS
* EVENT_PICKPOCKET_TOO_FAR
* EVENT_PLAYER_ALIVE
* EVENT_PLAYER_COMBAT_STATE (*bool* _inCombat_)
* EVENT_PLAYER_DEAD
* EVENT_PLAYER_DEATH_INFO_UPDATE
* EVENT_PLAYER_DEATH_REQUEST_FAILURE
* EVENT_PLAYER_EMOTE_FAILED_PLAY (*integer* _failure_)
* EVENT_PLAYER_IN_PIN_AREA_CHANGED (*integer* _pinType_, *integer* _param1_, *integer* _param2_, *integer* _param3_, *bool* _playerIsInside_)
* EVENT_PLAYER_NOT_SWIMMING
* EVENT_PLAYER_QUEUED_FOR_CYCLIC_RESPAWN
* EVENT_PLAYER_REINCARNATED
* EVENT_PLAYER_STUNNED_STATE_CHANGED (*bool* _playerStunned_)
* EVENT_PLAYER_SWIMMING
* EVENT_PLAYER_TITLES_UPDATE
* EVENT_PLEDGE_OF_MARA_OFFER (*string* _targetCharacterName_, *bool* _isSender_, *string* _targetDisplayName_)
* EVENT_PLEDGE_OF_MARA_OFFER_REMOVED
* EVENT_PLEDGE_OF_MARA_RESULT (*integer* _reason_, *string* _targetCharacterName_, *string* _targetDisplayName_)
* EVENT_POIS_INITIALIZED
* EVENT_POI_DISCOVERED (*luaindex* _zoneIndex_, *luaindex* _poiIndex_)
* EVENT_POI_UPDATED (*luaindex* _zoneIndex_, *luaindex* _poiIndex_)
* EVENT_POWER_UPDATE (*string* _unitTag_, *luaindex* _powerIndex_, *integer* _powerType_, *integer* _powerValue_, *integer* _powerMax_, *integer* _powerEffectiveMax_)
* EVENT_PREFERRED_CAMPAIGN_CHANGED (*integer* _newPreferredCampaignId_)
* EVENT_QUEST_ADDED (*luaindex* _journalIndex_, *string* _questName_, *string* _objectiveName_)
* EVENT_QUEST_ADVANCED (*luaindex* _journalIndex_, *string* _questName_, *bool* _isPushed_, *bool* _isComplete_, *bool* _mainStepChanged_)
* EVENT_QUEST_COMPLETE (*string* _questName_, *integer* _level_, *integer* _previousExperience_, *integer* _currentExperience_, *integer* _championPoints_, *integer* _questType_, *integer* _instanceDisplayType_)
* EVENT_QUEST_COMPLETE_ATTEMPT_FAILED_INVENTORY_FULL
* EVENT_QUEST_COMPLETE_DIALOG (*luaindex* _journalIndex_)
* EVENT_QUEST_CONDITION_COUNTER_CHANGED (*luaindex* _journalIndex_, *string* _questName_, *string* _conditionText_, *integer* _conditionType_, *integer* _currConditionVal_, *integer* _newConditionVal_, *integer* _conditionMax_, *bool* _isFailCondition_, *string* _stepOverrideText_, *bool* _isPushed_, *bool* _isComplete_, *bool* _isConditionComplete_, *bool* _isStepHidden_)
* EVENT_QUEST_LIST_UPDATED
* EVENT_QUEST_LOG_IS_FULL
* EVENT_QUEST_OFFERED
* EVENT_QUEST_OPTIONAL_STEP_ADVANCED (*string* _text_)
* EVENT_QUEST_POSITION_REQUEST_COMPLETE (*integer* _taskId_, *integer* _pinType_, *number* _xLoc_, *number* _yLoc_, *number* _areaRadius_, *bool* _insideCurrentMapWorld_, *bool* _isBreadcrumb_)
* EVENT_QUEST_REMOVED (*bool* _isCompleted_, *luaindex* _journalIndex_, *string* _questName_, *luaindex* _zoneIndex_, *luaindex* _poiIndex_, *integer* _questID_)
* EVENT_QUEST_SHARED (*integer* _questId_)
* EVENT_QUEST_SHARE_REMOVED (*integer* _questId_)
* EVENT_QUEST_SHOW_JOURNAL_ENTRY (*luaindex* _journalIndex_)
* EVENT_QUEST_TIMER_PAUSED (*luaindex* _journalIndex_, *bool* _isPaused_)
* EVENT_QUEST_TIMER_UPDATED (*luaindex* _journalIndex_)
* EVENT_QUEST_TOOL_UPDATED (*luaindex* _journalIndex_, *string* _questName_, *integer* _countDelta_, *string* _iconFilename_, *integer* _questItemId_, *string* _name_)
* EVENT_QUEUE_FOR_CAMPAIGN_RESPONSE (*integer* _response_)
* EVENT_RAID_LEADERBOARD_DATA_CHANGED
* EVENT_RAID_LEADERBOARD_PLAYER_DATA_CHANGED
* EVENT_RAID_PARTICIPATION_UPDATE
* EVENT_RAID_REVIVE_COUNTER_UPDATE (*integer* _currentCounter_, *integer* _countDelta_)
* EVENT_RAID_SCORE_NOTIFICATION_ADDED (*integer* _notificationId_)
* EVENT_RAID_SCORE_NOTIFICATION_REMOVED (*integer* _notificationId_)
* EVENT_RAID_TIMER_STATE_UPDATE
* EVENT_RAID_TRIAL_COMPLETE (*string* _trialName_, *integer* _score_, *integer* _totalTime_)
* EVENT_RAID_TRIAL_FAILED (*string* _trialName_, *integer* _score_)
* EVENT_RAID_TRIAL_NEW_BEST_SCORE (*string* _trialName_, *integer* _score_, *bool* _isWeekly_)
* EVENT_RAID_TRIAL_RESET_BEST_SCORE (*string* _trialName_, *bool* _isWeekly_)
* EVENT_RAID_TRIAL_SCORE_UPDATE (*integer* _scoreType_, *integer* _scoreAmount_, *integer* _totalScore_)
* EVENT_RAID_TRIAL_STARTED (*string* _trialName_, *bool* _weekly_)
* EVENT_RAM_ESCORT_COUNT_UPDATE (*integer* _numEscorts_)
* EVENT_RANK_POINT_UPDATE (*string* _unitTag_, *integer* _rankPoints_, *integer* _difference_)
* EVENT_RECIPE_ALREADY_KNOWN
* EVENT_RECIPE_LEARNED (*luaindex* _recipeListIndex_, *luaindex* _recipeIndex_)
* EVENT_REMOVE_ACTIVE_COMBAT_TIP (*integer* _activeCombatTipId_, *integer* _result_)
* EVENT_REMOVE_TUTORIAL (*luaindex* _tutorialIndex_)
* EVENT_REQUIREMENTS_FAIL (*integer* _errorId_)
* EVENT_RESURRECT_REQUEST (*string* _requesterCharacterName_, *integer* _timeLeftToAccept_, *string* _requesterDisplayName_)
* EVENT_RESURRECT_REQUEST_REMOVED
* EVENT_RESURRECT_RESULT (*string* _targetCharacterName_, *integer* _result_, *string* _targetDisplayName_)
* EVENT_RETICLE_HIDDEN_UPDATE (*bool* _hidden_)
* EVENT_RETICLE_TARGET_CHANGED
* EVENT_RETICLE_TARGET_PLAYER_CHANGED
* EVENT_REVENGE_KILL (*string* _killedCharacterName_, *string* _killedDisplayName_)
* EVENT_RIDING_SKILL_IMPROVEMENT (*integer* _ridingSkillType_, *integer* _previous_, *integer* _current_, *integer* _source_)
* EVENT_SCREENSHOT_SAVED (*string* _directory_, *string* _filename_)
* EVENT_SCRIPTED_WORLD_EVENT_INVITE (*integer* _eventId_, *string* _scriptedEventName_, *string* _inviterName_, *string* _questName_)
* EVENT_SCRIPTED_WORLD_EVENT_INVITE_REMOVED (*integer* _eventId_)
* EVENT_SELL_RECEIPT (*string* _itemName_, *integer* _itemQuantity_, *integer* _money_)
* EVENT_SERVER_SHUTDOWN_INFO (*integer* _action_, *integer* _timeRemaining_)
* EVENT_SHOW_BOOK (*string* _bookTitle_, *string* _body_, *integer* _medium_, *bool* _showTitle_, *integer* _bookId_)
* EVENT_SHOW_SUBTITLE (*integer* _channelType_, *string* _speakerName_, *string* _text_)
* EVENT_SHOW_TREASURE_MAP (*luaindex* _treasureMapIndex_)
* EVENT_SIEGE_BUSY (*string* _siegeName_)
* EVENT_SIEGE_CONTROL_ANOTHER_PLAYER (*string* _siegeName_)
* EVENT_SIEGE_CREATION_FAILED_CLOSEST_DOOR_ALREADY_HAS_RAM
* EVENT_SIEGE_CREATION_FAILED_NO_VALID_DOOR
* EVENT_SIEGE_FIRE_FAILED_COOLDOWN
* EVENT_SIEGE_FIRE_FAILED_RETARGETING
* EVENT_SIEGE_PACK_FAILED_INVENTORY_FULL
* EVENT_SIEGE_PACK_FAILED_NOT_CREATOR
* EVENT_SKILLS_FULL_UPDATE
* EVENT_SKILL_ABILITY_PROGRESSIONS_UPDATED
* EVENT_SKILL_FORCE_RESPEC (*string* _note_)
* EVENT_SKILL_LINE_ADDED (*integer* _skillType_, *luaindex* _skillIndex_)
* EVENT_SKILL_POINTS_CHANGED (*integer* _pointsBefore_, *integer* _pointsNow_, *integer* _partialPointsBefore_, *integer* _partialPointsNow_)
* EVENT_SKILL_RANK_UPDATE (*integer* _skillType_, *luaindex* _skillIndex_, *luaindex* _rank_)
* EVENT_SKILL_XP_UPDATE (*integer* _skillType_, *luaindex* _skillIndex_, *integer* _reason_, *luaindex* _rank_, *integer* _previousXP_, *integer* _currentXP_)
* EVENT_SLOT_IS_LOCKED_FAILURE (*integer* _bagId_, *integer* _slotId_)
* EVENT_SMITHING_TRAIT_RESEARCH_CANCELED (*integer* _craftingSkillType_, *luaindex* _researchLineIndex_, *luaindex* _traitIndex_)
* EVENT_SMITHING_TRAIT_RESEARCH_COMPLETED (*integer* _craftingSkillType_, *luaindex* _researchLineIndex_, *luaindex* _traitIndex_)
* EVENT_SMITHING_TRAIT_RESEARCH_STARTED (*integer* _craftingSkillType_, *luaindex* _researchLineIndex_, *luaindex* _traitIndex_)
* EVENT_SMITHING_TRAIT_RESEARCH_TIMES_UPDATED
* EVENT_SOUL_GEM_ITEM_CHARGE_FAILURE (*integer* _reason_)
* EVENT_SPAM_WARNING (*integer* _spamType_)
* EVENT_STABLE_INTERACT_END
* EVENT_STABLE_INTERACT_START
* EVENT_STACKED_ALL_ITEMS_IN_BAG (*integer* _bagId_)
* EVENT_START_FAST_TRAVEL_INTERACTION (*luaindex* _nodeIndex_)
* EVENT_START_FAST_TRAVEL_KEEP_INTERACTION (*integer* _keepId_)
* EVENT_START_KEEP_GUILD_CLAIM_INTERACTION
* EVENT_START_KEEP_GUILD_RELEASE_INTERACTION
* EVENT_START_SOUL_GEM_RESURRECTION (*integer* _durationMs_)
* EVENT_STATS_UPDATED (*string* _unitTag_)
* EVENT_STEALTH_STATE_CHANGED (*string* _unitTag_, *integer* _stealthState_)
* EVENT_STORE_FAILURE (*integer* _reason_)
* EVENT_STUCK_BEGIN
* EVENT_STUCK_CANCELED
* EVENT_STUCK_COMPLETE
* EVENT_STUCK_ERROR_ALREADY_IN_PROGRESS
* EVENT_STUCK_ERROR_INVALID_LOCATION
* EVENT_STUCK_ERROR_IN_COMBAT
* EVENT_STUCK_ERROR_ON_COOLDOWN
* EVENT_STYLE_LEARNED (*integer* _itemStyleId_, *integer* _chapterIndex_, *bool* _isDefaultRacialStyle_)
* EVENT_SYNERGY_ABILITY_CHANGED
* EVENT_TARGET_CHANGED (*string* _unitTag_)
* EVENT_TELVAR_STONE_UPDATE (*integer* _newTelvarStones_, *integer* _oldTelvarStones_, *integer* _reason_)
* EVENT_TITLE_UPDATE (*string* _unitTag_)
* EVENT_TRACKING_UPDATE
* EVENT_TRADE_ACCEPT_FAILED_NOT_ENOUGH_MONEY
* EVENT_TRADE_CANCELED (*string* _cancelerName_)
* EVENT_TRADE_CONFIRMATION_CHANGED (*integer* _who_, *integer* _level_)
* EVENT_TRADE_ELEVATION_FAILED (*integer* _reason_, *string* _itemName_)
* EVENT_TRADE_FAILED (*integer* _reason_)
* EVENT_TRADE_INVITE_ACCEPTED
* EVENT_TRADE_INVITE_CANCELED
* EVENT_TRADE_INVITE_CONSIDERING (*string* _inviterCharacterName_, *string* _inviterDisplayName_)
* EVENT_TRADE_INVITE_DECLINED
* EVENT_TRADE_INVITE_FAILED (*integer* _reason_, *string* _inviteeCharacterName_, *string* _inviteeDisplayName_)
* EVENT_TRADE_INVITE_REMOVED
* EVENT_TRADE_INVITE_WAITING (*string* _inviteeCharacterName_, *string* _inviteeDisplayName_)
* EVENT_TRADE_ITEM_ADDED (*integer* _who_, *luaindex* _tradeIndex_, *integer* _itemSoundCategory_)
* EVENT_TRADE_ITEM_ADD_FAILED (*integer* _reason_, *string* _itemName_)
* EVENT_TRADE_ITEM_REMOVED (*integer* _who_, *luaindex* _tradeIndex_, *integer* _itemSoundCategory_)
* EVENT_TRADE_ITEM_UPDATED (*integer* _who_, *luaindex* _tradeIndex_)
* EVENT_TRADE_MONEY_CHANGED (*integer* _who_, *integer* _money_)
* EVENT_TRADE_SUCCEEDED
* EVENT_TRADING_HOUSE_AWAITING_RESPONSE (*integer* _responseType_)
* EVENT_TRADING_HOUSE_CONFIRM_ITEM_PURCHASE (*luaindex* _pendingPurchaseIndex_)
* EVENT_TRADING_HOUSE_ERROR (*integer* _errorCode_)
* EVENT_TRADING_HOUSE_OPERATION_TIME_OUT (*integer* _responseType_)
* EVENT_TRADING_HOUSE_PENDING_ITEM_UPDATE (*integer* _slotId_, *bool* _isPending_)
* EVENT_TRADING_HOUSE_RESPONSE_RECEIVED (*integer* _responseType_, *integer* _result_)
* EVENT_TRADING_HOUSE_SEARCH_COOLDOWN_UPDATE (*integer* _cooldownMilliseconds_)
* EVENT_TRADING_HOUSE_SEARCH_RESULTS_RECEIVED (*integer* _guildId_, *integer* _numItemsOnPage_, *integer* _currentPage_, *bool* _hasMorePages_)
* EVENT_TRADING_HOUSE_STATUS_RECEIVED
* EVENT_TRAIT_LEARNED (*string* _itemName_, *string* _itemTrait_)
* EVENT_TRIAL_FEATURE_RESTRICTED (*integer* _restrictionType_)
* EVENT_TUTORIALS_RESET
* EVENT_TUTORIAL_SYSTEM_ENABLED_STATE_CHANGED (*bool* _enabled_)
* EVENT_UI_ERROR (*integer* _stringId_)
* EVENT_UNIT_ATTRIBUTE_VISUAL_ADDED (*string* _unitTag_, *integer* _unitAttributeVisual_, *integer* _statType_, *integer* _attributeType_, *integer* _powerType_, *number* _value_, *number* _maxValue_)
* EVENT_UNIT_ATTRIBUTE_VISUAL_REMOVED (*string* _unitTag_, *integer* _unitAttributeVisual_, *integer* _statType_, *integer* _attributeType_, *integer* _powerType_, *number* _value_, *number* _maxValue_)
* EVENT_UNIT_ATTRIBUTE_VISUAL_UPDATED (*string* _unitTag_, *integer* _unitAttributeVisual_, *integer* _statType_, *integer* _attributeType_, *integer* _powerType_, *number* _oldValue_, *number* _newValue_, *number* _oldMaxValue_, *number* _newMaxValue_)
* EVENT_UNIT_CREATED (*string* _unitTag_)
* EVENT_UNIT_DEATH_STATE_CHANGED (*string* _unitTag_, *bool* _isDead_)
* EVENT_UNIT_DESTROYED (*string* _unitTag_)
* EVENT_UNIT_FRAME_UPDATE (*string* _unitTag_)
* EVENT_UNLOCKED_DYES_UPDATED
* EVENT_UNSPENT_CHAMPION_POINTS_CHANGED
* EVENT_UPDATE_BUYBACK
* EVENT_VETERAN_DIFFICULTY_CHANGED (*string* _unitTag_, *bool* _isDifficult_)
* EVENT_VIBRATION (*integer* _duration_, *number* _coarseMotor_, *number* _fineMotor_, *number* _leftTriggerMotor_, *number* _rightTriggerMotor_, *string* _debugSourceInfo_)
* EVENT_VISUAL_LAYER_CHANGED
* EVENT_WEAPON_PAIR_LOCK_CHANGED (*bool* _locked_)
* EVENT_WEAPON_SWAP_LOCKED (*integer* _swapLevel_)
* EVENT_WEREWOLF_STATE_CHANGED (*bool* _werewolf_)
* EVENT_WRIT_VOUCHER_UPDATE (*integer* _newWritVouchers_, *integer* _oldWritVouchers_, *integer* _reason_)
* EVENT_ZONE_CHANGED (*string* _zoneName_, *string* _subZoneName_, *bool* _newSubzone_, *integer* _zoneId_, *integer* _subZoneId_)
* EVENT_ZONE_CHANNEL_CHANGED
* EVENT_ZONE_COLLECTIBLE_REQUIREMENT_FAILED (*integer* _requiredCollectible_)
* EVENT_ZONE_SCORING_CHANGED
* EVENT_ZONE_UPDATE (*string* _unitTag_, *string* _newZoneName_)

* EVENT_ESO_PLUS_FREE_TRIAL_STATUS_CHANGED (*bool* _hasFreeTrial_)
* EVENT_ITEM_PREVIEW_READY
* EVENT_MARKET_PURCHASE_RESULT (*integer* _purchaseResult_, *integer* _tutorialTrigger_)
* EVENT_MARKET_STATE_UPDATED (*integer* _displayGroup_, *integer* _marketState_)
* EVENT_PLAYER_ACTIVATED (*bool* _initial_)
* EVENT_PLAYER_DEACTIVATED
* EVENT_TUTORIAL_HIDDEN (*luaindex* _tutorialIndex_)

* EVENT_ACTION_LAYER_POPPED (*luaindex* _layerIndex_, *luaindex* _activeLayerIndex_)
* EVENT_ACTION_LAYER_PUSHED (*luaindex* _layerIndex_, *luaindex* _activeLayerIndex_)
* EVENT_ADD_ON_LOADED (*string* _addonName_)
* EVENT_ALL_GUI_SCREENS_RESIZED
* EVENT_ALL_GUI_SCREENS_RESIZE_STARTED
* EVENT_CAPS_LOCK_STATE_CHANGED (*bool* _capsLockEnabled_)
* EVENT_GAMEPAD_PREFERRED_MODE_CHANGED (*bool* _gamepadPreferred_)
* EVENT_GLOBAL_MOUSE_DOWN (*integer* _button_, *bool* _ctrl_, *bool* _alt_, *bool* _shift_, *bool* _command_)
* EVENT_GLOBAL_MOUSE_UP (*integer* _button_, *bool* _ctrl_, *bool* _alt_, *bool* _shift_, *bool* _command_)
* EVENT_GUI_HIDDEN (*string* _guiName_, *bool* _hidden_)
* EVENT_INPUT_LANGUAGE_CHANGED
* EVENT_KEYBINDINGS_LOADED
* EVENT_KEYBINDING_CLEARED (*luaindex* _layerIndex_, *luaindex* _categoryIndex_, *luaindex* _actionIndex_, *luaindex* _bindingIndex_)
* EVENT_KEYBINDING_SET (*luaindex* _layerIndex_, *luaindex* _categoryIndex_, *luaindex* _actionIndex_, *luaindex* _bindingIndex_, *integer* _keyCode_, *integer* _mod1_, *integer* _mod2_, *integer* _mod3_, *integer* _mod4_)
* EVENT_LUA_ERROR (*string* _error_)
* EVENT_LUA_LOW_MEMORY
* EVENT_SCREEN_RESIZED (*integer* _width_, *integer* _height_)
* EVENT_SCRIPT_ACCESS_VIOLATION (*string* _protectedFunctionName_)
* EVENT_SECURE_3D_RENDER_MODE_CHANGED (*bool* _enabled_)
* EVENT_SECURE_RENDER_MODE_CHANGED (*bool* _enabled_)
* EVENT_SHOW_PREGAME_GUI_IN_STATE (*string* _desiredStateName_)
* EVENT_UPDATE_GUI_LOADING_PROGRESS (*string* _guiName_, *integer* _assetsLoaded_, *integer* _assetsTotal_)

h2. UI XML Layout
h4. Attributes:
* addressMode *[TextureAddressMode|#TextureAddressMode]*
* allowBringToTop *bool*
* alpha *number*
* anchorIndex *integer*
* autoAdjustTextureCoords *bool*
* barAlignment *[BarAlignment|#BarAlignment]*
* blendMode *[TextureBlendMode|#TextureBlendMode]*
* cellsHigh *integer*
* cellsWide *integer*
* centerColor *string*
* clampedToScreen *bool*
* clickSound *string*
* color *string*
* delay *integer*
* deltaX *number*
* deltaXFromEnd *number*
* deltaY *number*
* deltaYFromEnd *number*
* deltaZ *number*
* deltaZFromEnd *number*
* disabled *string*
* disabledColor *string*
* disabledPressed *string*
* disabledPressedColor *string*
* dragFromThumb *bool*
* drawLastEntryIfOutOfRoom *bool*
* duration *integer*
* edgeColor *string*
* editEnabled *bool*
* enableFadeOut *bool*
* endAlpha *number*
* endCapWidth *integer*
* endColor *string*
* endHeight *number*
* endPitch *number*
* endRoll *number*
* endRotation *number*
* endScale *number*
* endWidth *number*
* endX *number*
* endY *number*
* endYaw *number*
* endZ *number*
* excludeFromResizeToFitExtents *bool*
* fadeOutGainColor *string*
* fadeOutLossColor *string*
* fadeOutTextureFile *string*
* fillColor *string*
* font *string*
* framerate *number*
* headerRowSpacing *number*
* headerVerticalOffset *number*
* hidden *bool*
* horizontalAlignment *[TextAlignment|#TextAlignment]*
* id *integer*
* inheritAlpha *bool*
* inheritScale *bool*
* inherits *string*
* integralWrapping *bool*
* keyboardEnabled *bool*
* layer *string*
* leadingEdgeTexture *string*
* level *integer*
* lineSpacing *integer*
* linkEnabled *bool*
* loopCount *string*
* maxHistoryLines *integer*
* maxInputCharacters *integer*
* maxLineCount *integer*
* mirrorAlongX *bool*
* mirrorAlongY *bool*
* modifyTextType *[ModifyTextType|#ModifyTextType]*
* mouseEnabled *bool*
* mouseOver *string*
* mouseOverBlendMode *[TextureBlendMode|#TextureBlendMode]*
* mouseOverColor *string*
* movable *bool*
* multiLine *bool*
* newLineEnabled *bool*
* newLineIndent *number*
* normal *string*
* normalColor *string*
* orientation *[ControlOrientation|#ControlOrientation]*
* pinFont *string*
* pixelRoundingEnabled *bool*
* playbackType *[AnimationPlayback|#AnimationPlayback]*
* pressed *string*
* pressedColor *string*
* pressedMouseOver *string*
* radialCooldownClockwise *bool*
* radialCooldownOriginAngle *number*
* resizeHandleSize *number*
* resizeToFitDescendents *bool*
* resizeToFitFile *bool*
* scale *number*
* selectionColor *string*
* shape *[ShapeType|#ShapeType]*
* splitLongMessages *bool*
* startAlpha *number*
* startColor *string*
* startHeight *number*
* startPitch *number*
* startRoll *number*
* startRotation *number*
* startScale *number*
* startWidth *number*
* startX *number*
* startY *number*
* startYaw *number*
* startZ *number*
* step *number*
* styleColor *string*
* text *string*
* textType *string*
* textureCoordsRotation *number*
* textureFile *string*
* textureFileReleaseOption *[ReleaseReferenceOptions|#ReleaseReferenceOptions]*
* thickness *number*
* tier *string*
* topmost *bool*
* verticalAlignment *[TextAlignment|#TextAlignment]*
* wrapMode *[TextWrapMode|#TextWrapMode]*

h5. AlphaAnimation
* [Inherits: AnimationBase|#AnimationBase]
* [Child: endAlpha|#Attributes]
* [Child: startAlpha|#Attributes]

h5. Anchor
* _attribute:_ *[AnchorPosition|#AnchorPosition]* _point_
* _attribute:_ *[AnchorPosition|#AnchorPosition]* _relativePoint_
* _attribute:_ *string* _relativeTo_
* _attribute:_ *number* _offsetX_
* _attribute:_ *number* _offsetY_
* _attribute:_ *[AnchorConstrains|#AnchorConstrains]* _constrains_

h5. AnchorFill

h5. AnchorToBaseline
* _attribute:_ *string* _relativeToLabel_
* _attribute:_ *number* _offsetX_
* _attribute:_ *[AnchorPosition|#AnchorPosition]* _side_

h5. AnimationBase
* _attribute:_ *string* _name_
* [Child: EasingFunction|#EasingFunction]
* [Child: OnPlay_Animation|#OnPlay_Animation]
* [Child: OnStop_Animation|#OnStop_Animation]
* [Child: delay|#Attributes]
* [Child: duration|#Attributes]
* [Child: inherits|#Attributes]

h5. AnimationTimeline
* _attribute:_ *string* _name_
* [Child: Animations|#Animations]
* [Child: Callbacks|#Callbacks]
* [Child: OnDurationChanged|#OnDurationChanged]
* [Child: OnPlay|#OnPlay]
* [Child: OnStop|#OnStop]
* [Child: delay|#Attributes]
* [Child: inherits|#Attributes]
* [Child: loopCount|#Attributes]
* [Child: playbackType|#Attributes]

h5. Animations
* [Child: AlphaAnimation|#AlphaAnimation]
* [Child: AnimationTimeline|#AnimationTimeline]
* [Child: ColorAnimation|#ColorAnimation]
* [Child: CustomAnimation|#CustomAnimation]
* [Child: Rotate3DAnimation|#Rotate3DAnimation]
* [Child: ScaleAnimation|#ScaleAnimation]
* [Child: SizeAnimation|#SizeAnimation]
* [Child: TextureAnimation|#TextureAnimation]
* [Child: TextureRotateAnimation|#TextureRotateAnimation]
* [Child: Translate3DAnimation|#Translate3DAnimation]
* [Child: TranslateAnimation|#TranslateAnimation]

h5. Backdrop
* [Inherits: Control|#Control]
* [Child: Center|#Center]
* [Child: Edge|#Edge]
* [Child: Insets|#Insets]
* [Child: blendMode|#Attributes]
* [Child: centerColor|#Attributes]
* [Child: edgeColor|#Attributes]
* [Child: integralWrapping|#Attributes]
* [Child: pixelRoundingEnabled|#Attributes]
* [Child: textureFileReleaseOption|#Attributes]

h5. BackgroundBottom
* _attribute:_ *string* _textureFile_
* _attribute:_ *number* _left_
* _attribute:_ *number* _top_
* _attribute:_ *number* _bottom_
* _attribute:_ *number* _right_

h5. BackgroundMiddle
* _attribute:_ *string* _textureFile_
* _attribute:_ *number* _left_
* _attribute:_ *number* _top_
* _attribute:_ *number* _bottom_
* _attribute:_ *number* _right_

h5. BackgroundTop
* _attribute:_ *string* _textureFile_
* _attribute:_ *number* _left_
* _attribute:_ *number* _top_
* _attribute:_ *number* _bottom_
* _attribute:_ *number* _right_

h5. Browser
* [Inherits: Control|#Control]
* [Child: OnLoadFinished|#OnLoadFinished]
* [Child: OnLoadStart|#OnLoadStart]
* [Child: OnRequestClose|#OnRequestClose]

h5. Button
* [Inherits: Control|#Control]
* [Child: ButtonState|#ButtonState]
* [Child: FontColors|#FontColors]
* [Child: MouseButton|#MouseButton]
* [Child: NormalOffset|#NormalOffset]
* [Child: OnClicked|#OnClicked]
* [Child: PressedOffset|#PressedOffset]
* [Child: TextureCoords|#TextureCoords]
* [Child: Textures|#Textures]
* [Child: clickSound|#Attributes]
* [Child: endCapWidth|#Attributes]
* [Child: font|#Attributes]
* [Child: horizontalAlignment|#Attributes]
* [Child: modifyTextType|#Attributes]
* [Child: mouseOverBlendMode|#Attributes]
* [Child: pixelRoundingEnabled|#Attributes]
* [Child: text|#Attributes]
* [Child: textureFileReleaseOption|#Attributes]
* [Child: verticalAlignment|#Attributes]

h5. ButtonState
* _attribute:_ *[ButtonState|#ButtonState]* _state_
* _attribute:_ *bool* _locked_

h5. Callback
* [Inherits: OnInsertAnimationTimelineCallback|#OnInsertAnimationTimelineCallback]
* ScriptArguments: local self, time = ...

h5. Callbacks
* [Child: Callback|#Callback]

h5. Center
* _attribute:_ *string* _file_
* _attribute:_ *bool* _tiled_
* _attribute:_ *integer* _tileSize_

h5. ClampedToScreenInsets
* _attribute:_ *number* _left_
* _attribute:_ *number* _top_
* _attribute:_ *number* _right_
* _attribute:_ *number* _bottom_

h5. ClearAnchors

h5. ColorAnimation
* [Inherits: AnimationBase|#AnimationBase]
* [Child: endColor|#Attributes]
* [Child: startColor|#Attributes]

h5. ColorSelect
* [Inherits: Control|#Control]
* [Child: OnColorSelected|#OnColorSelected]

h5. Compass
* [Inherits: Control|#Control]
* [Child: CompassPinType|#CompassPinType]

h5. CompassPinType
* _attribute:_ *[MapDisplayPinType|#MapDisplayPinType]* _name_
* _attribute:_ *number* _pinSize_
* _attribute:_ *string* _pinTexture_
* _attribute:_ *string* _areaTexture_
* _attribute:_ *string* _aboveTexture_
* _attribute:_ *string* _belowTexture_
* _attribute:_ *string* _linkTexture_
* _attribute:_ *bool* _clamped_
* _attribute:_ *bool* _allowUpdatesWhenAnimating_
* _attribute:_ *number* _minScale_
* _attribute:_ *number* _maxScale_
* _attribute:_ *number* _minVisibleScale_
* _attribute:_ *number* _minAlpha_
* _attribute:_ *number* _maxAlpha_
* _attribute:_ *number* _minVisibleAlpha_
* _attribute:_ *number* _maxVisibleNormalizedDistance_
* _attribute:_ *number* _leadingScaleCoefficient_
* _attribute:_ *number* _scaleCoefficient_
* _attribute:_ *number* _scaleConstant_
* _attribute:_ *number* _leadingAlphaCoefficient_
* _attribute:_ *number* _alphaCoefficient_
* _attribute:_ *number* _alphaConstant_
* _attribute:_ *string* _animation_
* _attribute:_ *string* _addedAnimation_
* _attribute:_ *string* _removedAnimation_
* _attribute:_ *[DrawLayer|#DrawLayer]* _layer_
* _attribute:_ *integer* _drawLevelOffsetBase_

h5. Control
* _attribute:_ *string* _name_
* _attribute:_ *bool* _virtual_
* _attribute:_ *bool* _override_
* _attribute:_ *[ControlAccessControl|#ControlAccessControl]* _accessControl_
* [Child: Anchor|#Anchor]
* [Child: AnchorFill|#AnchorFill]
* [Child: ClampedToScreenInsets|#ClampedToScreenInsets]
* [Child: ClearAnchors|#ClearAnchors]
* [Child: Controls|#Controls]
* [Child: DimensionConstraints|#DimensionConstraints]
* [Child: Dimensions|#Dimensions]
* [Child: HitInsets|#HitInsets]
* [Child: OnChar|#OnChar]
* [Child: OnDragStart|#OnDragStart]
* [Child: OnEffectivelyHidden|#OnEffectivelyHidden]
* [Child: OnEffectivelyShown|#OnEffectivelyShown]
* [Child: OnHide|#OnHide]
* [Child: OnInitialized|#OnInitialized]
* [Child: OnKeyDown|#OnKeyDown]
* [Child: OnKeyUp|#OnKeyUp]
* [Child: OnMouseDoubleClick|#OnMouseDoubleClick]
* [Child: OnMouseDown|#OnMouseDown]
* [Child: OnMouseEnter|#OnMouseEnter]
* [Child: OnMouseExit|#OnMouseExit]
* [Child: OnMouseUp|#OnMouseUp]
* [Child: OnMouseWheel|#OnMouseWheel]
* [Child: OnMoveStart|#OnMoveStart]
* [Child: OnMoveStop|#OnMoveStop]
* [Child: OnReceiveDrag|#OnReceiveDrag]
* [Child: OnResizeStart|#OnResizeStart]
* [Child: OnResizeStop|#OnResizeStop]
* [Child: OnResizedToFit|#OnResizedToFit]
* [Child: OnShow|#OnShow]
* [Child: OnUpdate|#OnUpdate]
* [Child: ResizeToFitPadding|#ResizeToFitPadding]
* [Child: alpha|#Attributes]
* [Child: clampedToScreen|#Attributes]
* [Child: excludeFromResizeToFitExtents|#Attributes]
* [Child: hidden|#Attributes]
* [Child: id|#Attributes]
* [Child: inheritAlpha|#Attributes]
* [Child: inheritScale|#Attributes]
* [Child: inherits|#Attributes]
* [Child: keyboardEnabled|#Attributes]
* [Child: layer|#Attributes]
* [Child: level|#Attributes]
* [Child: mouseEnabled|#Attributes]
* [Child: movable|#Attributes]
* [Child: resizeHandleSize|#Attributes]
* [Child: resizeToFitDescendents|#Attributes]
* [Child: scale|#Attributes]
* [Child: tier|#Attributes]

h5. Controls
* [Child: Backdrop|#Backdrop]
* [Child: Browser|#Browser]
* [Child: Button|#Button]
* [Child: ColorSelect|#ColorSelect]
* [Child: Compass|#Compass]
* [Child: Control|#Control]
* [Child: Cooldown|#Cooldown]
* [Child: DebugText|#DebugText]
* [Child: EditBox|#EditBox]
* [Child: Label|#Label]
* [Child: Line|#Line]
* [Child: MapDisplay|#MapDisplay]
* [Child: Scroll|#Scroll]
* [Child: Slider|#Slider]
* [Child: StatusBar|#StatusBar]
* [Child: TextBuffer|#TextBuffer]
* [Child: Texture|#Texture]
* [Child: TextureComposite|#TextureComposite]
* [Child: Tooltip|#Tooltip]
* [Child: TopLevelControl|#TopLevelControl]

h5. Cooldown
* [Inherits: Control|#Control]
* [Child: RadialCooldownGradient|#RadialCooldownGradient]
* [Child: blendMode|#Attributes]
* [Child: fillColor|#Attributes]
* [Child: leadingEdgeTexture|#Attributes]
* [Child: radialCooldownClockwise|#Attributes]
* [Child: radialCooldownOriginAngle|#Attributes]
* [Child: textureFile|#Attributes]
* [Child: textureFileReleaseOption|#Attributes]

h5. CustomAnimation
* [Inherits: AnimationBase|#AnimationBase]
* [Child: UpdateFunction|#UpdateFunction]

h5. DebugText
* [Inherits: Control|#Control]
* [Child: font|#Attributes]

h5. DimensionConstraints
* _attribute:_ *number* _minX_
* _attribute:_ *number* _minY_
* _attribute:_ *number* _maxX_
* _attribute:_ *number* _maxY_

h5. Dimensions
* _attribute:_ *number* _x_
* _attribute:_ *number* _y_

h5. EasingFunction
* [Inherits: OnSetAnimationEaseFunction|#OnSetAnimationEaseFunction]
* ScriptArguments: local progress = ...

h5. Edge
* _attribute:_ *string* _file_
* _attribute:_ *integer* _edgeFileWidth_
* _attribute:_ *integer* _edgeFileHeight_
* _attribute:_ *integer* _edgeSize_
* _attribute:_ *integer* _edgeFilePadding_

h5. EditBox
* [Inherits: Control|#Control]
* [Child: OnBackspace|#OnBackspace]
* [Child: OnDownArrow|#OnDownArrow]
* [Child: OnEnter|#OnEnter]
* [Child: OnEscape|#OnEscape]
* [Child: OnFocusGained|#OnFocusGained]
* [Child: OnFocusLost|#OnFocusLost]
* [Child: OnIMEBeginComposition|#OnIMEBeginComposition]
* [Child: OnIMEEndComposition|#OnIMEEndComposition]
* [Child: OnPageDown|#OnPageDown]
* [Child: OnPageUp|#OnPageUp]
* [Child: OnSpace|#OnSpace]
* [Child: OnTab|#OnTab]
* [Child: OnTextChanged|#OnTextChanged]
* [Child: OnUpArrow|#OnUpArrow]
* [Child: color|#Attributes]
* [Child: editEnabled|#Attributes]
* [Child: font|#Attributes]
* [Child: maxInputCharacters|#Attributes]
* [Child: multiLine|#Attributes]
* [Child: newLineEnabled|#Attributes]
* [Child: selectionColor|#Attributes]
* [Child: textType|#Attributes]

h5. FadeGradient
* _attribute:_ *number* _x1_
* _attribute:_ *number* _y1_
* _attribute:_ *number* _size1_
* _attribute:_ *number* _x2_
* _attribute:_ *number* _y2_
* _attribute:_ *number* _size2_

h5. Font
* _attribute:_ *string* _name_
* _attribute:_ *bool* _virtual_
* [Child: sentinel_element|#sentinel_element]
* [Child: font|#Attributes]
* [Child: inherits|#Attributes]

h5. FontColors
* [Child: disabledColor|#Attributes]
* [Child: disabledPressedColor|#Attributes]
* [Child: mouseOverColor|#Attributes]
* [Child: normalColor|#Attributes]
* [Child: pressedColor|#Attributes]

h5. GuiXml
* [Child: Animations|#Animations]
* [Child: Controls|#Controls]
* [Child: Font|#Font]
* [Child: String|#String]

h5. HitInsets
* _attribute:_ *number* _left_
* _attribute:_ *number* _top_
* _attribute:_ *number* _right_
* _attribute:_ *number* _bottom_

h5. Insets
* _attribute:_ *number* _left_
* _attribute:_ *number* _top_
* _attribute:_ *number* _right_
* _attribute:_ *number* _bottom_

h5. Label
* [Inherits: Control|#Control]
* [Child: AnchorToBaseline|#AnchorToBaseline]
* [Child: OnLinkClicked|#OnLinkClicked]
* [Child: OnLinkMouseUp|#OnLinkMouseUp]
* [Child: OnTextChanged|#OnTextChanged]
* [Child: OnUserAreaCreated|#OnUserAreaCreated]
* [Child: color|#Attributes]
* [Child: font|#Attributes]
* [Child: horizontalAlignment|#Attributes]
* [Child: lineSpacing|#Attributes]
* [Child: linkEnabled|#Attributes]
* [Child: maxLineCount|#Attributes]
* [Child: modifyTextType|#Attributes]
* [Child: newLineIndent|#Attributes]
* [Child: pixelRoundingEnabled|#Attributes]
* [Child: styleColor|#Attributes]
* [Child: text|#Attributes]
* [Child: verticalAlignment|#Attributes]
* [Child: wrapMode|#Attributes]

h5. LeadingEdge
* _attribute:_ *string* _textureFile_
* _attribute:_ *number* _width_
* _attribute:_ *number* _height_

h5. LeadingEdgeTextureCoords
* _attribute:_ *number* _left_
* _attribute:_ *number* _right_
* _attribute:_ *number* _top_
* _attribute:_ *number* _bottom_

h5. Limits
* _attribute:_ *number* _min_
* _attribute:_ *number* _max_

h5. Line
* [Inherits: Control|#Control]
* [Child: TextureCoords|#TextureCoords]
* [Child: blendMode|#Attributes]
* [Child: color|#Attributes]
* [Child: pixelRoundingEnabled|#Attributes]
* [Child: textureFile|#Attributes]
* [Child: thickness|#Attributes]

h5. LineFade
* _attribute:_ *number* _fadeBegin_
* _attribute:_ *number* _fadeDuration_

h5. LocalDimensions3D
* _attribute:_ *number* _x_
* _attribute:_ *number* _y_

h5. MapDisplay
* [Inherits: Control|#Control]
* [Child: MapGutter|#MapGutter]
* [Child: MapPinType|#MapPinType]
* [Child: OnVisibleRadiusChanged|#OnVisibleRadiusChanged]
* [Child: pinFont|#Attributes]
* [Child: shape|#Attributes]

h5. MapGutter
* _attribute:_ *number* _offset_
* _attribute:_ *number* _size_

h5. MapPinType
* _attribute:_ *[MapDisplayPinType|#MapDisplayPinType]* _name_
* _attribute:_ *[MapArrowType|#MapArrowType]* _arrowType_
* _attribute:_ *number* _pinSize_
* _attribute:_ *number* _pinXInset_
* _attribute:_ *number* _pinYInset_
* _attribute:_ *number* _arrowSize_
* _attribute:_ *string* _pinTexture_
* _attribute:_ *string* _arrowTexture_
* _attribute:_ *string* _areaTexture_
* _attribute:_ *string* _aboveTexture_
* _attribute:_ *string* _belowTexture_
* _attribute:_ *string* _linkTexture_
* _attribute:_ *string* _animation_
* _attribute:_ *string* _addedAnimation_
* _attribute:_ *string* _removedAnimation_
* _attribute:_ *[MapPinAnimationTarget|#MapPinAnimationTarget]* _animationTarget_

h5. MouseButton
* _attribute:_ *integer* _button_
* _attribute:_ *bool* _enabled_

h5. NormalOffset
* _attribute:_ *number* _x_
* _attribute:_ *number* _y_

h5. OnAddGameData
* [Inherits: OnSetControlEventHandler|#OnSetControlEventHandler]
* ScriptArguments: local self = ...

h5. OnBackspace
* [Inherits: OnSetControlEventHandler|#OnSetControlEventHandler]
* ScriptArguments: local self = ...

h5. OnChar
* [Inherits: OnSetControlEventHandler|#OnSetControlEventHandler]
* ScriptArguments: local self, key = ...

h5. OnCleared
* [Inherits: OnSetControlEventHandler|#OnSetControlEventHandler]
* ScriptArguments: local self = ...

h5. OnClicked
* [Inherits: OnSetControlEventHandler|#OnSetControlEventHandler]
* ScriptArguments: local self, button = ...

h5. OnColorSelected
* [Inherits: OnSetControlEventHandler|#OnSetControlEventHandler]
* ScriptArguments: local self, r, g, b = ...

h5. OnDownArrow
* [Inherits: OnSetControlEventHandler|#OnSetControlEventHandler]
* ScriptArguments: local self = ...

h5. OnDragStart
* [Inherits: OnSetControlEventHandler|#OnSetControlEventHandler]
* ScriptArguments: local self, button = ...

h5. OnDurationChanged
* [Inherits: OnSetAnimationTimelineEventHandler|#OnSetAnimationTimelineEventHandler]
* ScriptArguments: local self, duration = ...

h5. OnEffectivelyHidden
* [Inherits: OnSetControlEventHandler|#OnSetControlEventHandler]
* ScriptArguments: local self, hidden = ...

h5. OnEffectivelyShown
* [Inherits: OnSetControlEventHandler|#OnSetControlEventHandler]
* ScriptArguments: local self, hidden = ...

h5. OnEnabledStateChanged
* [Inherits: OnSetControlEventHandler|#OnSetControlEventHandler]
* ScriptArguments: local self, enabled = ...

h5. OnEnter
* [Inherits: OnSetControlEventHandler|#OnSetControlEventHandler]
* ScriptArguments: local self = ...

h5. OnEscape
* [Inherits: OnSetControlEventHandler|#OnSetControlEventHandler]
* ScriptArguments: local self = ...

h5. OnFocusGained
* [Inherits: OnSetControlEventHandler|#OnSetControlEventHandler]
* ScriptArguments: local self = ...

h5. OnFocusLost
* [Inherits: OnSetControlEventHandler|#OnSetControlEventHandler]
* ScriptArguments: local self = ...

h5. OnHide
* [Inherits: OnSetControlEventHandler|#OnSetControlEventHandler]
* ScriptArguments: local self, hidden = ...

h5. OnIMEBeginComposition
* [Inherits: OnSetControlEventHandler|#OnSetControlEventHandler]
* ScriptArguments: local self = ...

h5. OnIMEEndComposition
* [Inherits: OnSetControlEventHandler|#OnSetControlEventHandler]
* ScriptArguments: local self = ...

h5. OnInitialized
* [Inherits: OnSetControlEventHandler|#OnSetControlEventHandler]
* ScriptArguments: local self = ...

h5. OnInsertAnimationTimelineCallback
* _attribute:_ *integer* _delay_

h5. OnKeyDown
* [Inherits: OnSetControlEventHandler|#OnSetControlEventHandler]
* ScriptArguments: local self, key, ctrl, alt, shift, command = ...

h5. OnKeyUp
* [Inherits: OnSetControlEventHandler|#OnSetControlEventHandler]
* ScriptArguments: local self, key, ctrl, alt, shift, command = ...

h5. OnLinkClicked
* [Inherits: OnSetControlEventHandler|#OnSetControlEventHandler]
* ScriptArguments: local self, linkData, linkText, button, ctrl, alt, shift, command = ...

h5. OnLinkMouseUp
* [Inherits: OnSetControlEventHandler|#OnSetControlEventHandler]
* ScriptArguments: local self, linkData, linkText, button, ctrl, alt, shift, command = ...

h5. OnLoadFinished
* [Inherits: OnSetControlEventHandler|#OnSetControlEventHandler]
* ScriptArguments: local self = ...

h5. OnLoadStart
* [Inherits: OnSetControlEventHandler|#OnSetControlEventHandler]
* ScriptArguments: local self = ...

h5. OnMinMaxValueChanged
* [Inherits: OnSetControlEventHandler|#OnSetControlEventHandler]
* ScriptArguments: local self, min, max = ...

h5. OnMouseDoubleClick
* [Inherits: OnSetControlEventHandler|#OnSetControlEventHandler]
* ScriptArguments: local self, button, ctrl, alt, shift, command = ...

h5. OnMouseDown
* [Inherits: OnSetControlEventHandler|#OnSetControlEventHandler]
* ScriptArguments: local self, button, ctrl, alt, shift, command = ...

h5. OnMouseEnter
* [Inherits: OnSetControlEventHandler|#OnSetControlEventHandler]
* ScriptArguments: local self = ...

h5. OnMouseExit
* [Inherits: OnSetControlEventHandler|#OnSetControlEventHandler]
* ScriptArguments: local self = ...

h5. OnMouseUp
* [Inherits: OnSetControlEventHandler|#OnSetControlEventHandler]
* ScriptArguments: local self, button, upInside, ctrl, alt, shift, command = ...

h5. OnMouseWheel
* [Inherits: OnSetControlEventHandler|#OnSetControlEventHandler]
* ScriptArguments: local self, delta, ctrl, alt, shift, command = ...

h5. OnMoveStart
* [Inherits: OnSetControlEventHandler|#OnSetControlEventHandler]
* ScriptArguments: local self = ...

h5. OnMoveStop
* [Inherits: OnSetControlEventHandler|#OnSetControlEventHandler]
* ScriptArguments: local self = ...

h5. OnPageDown
* [Inherits: OnSetControlEventHandler|#OnSetControlEventHandler]
* ScriptArguments: local self = ...

h5. OnPageUp
* [Inherits: OnSetControlEventHandler|#OnSetControlEventHandler]
* ScriptArguments: local self = ...

h5. OnPlay
* [Inherits: OnSetAnimationTimelineEventHandler|#OnSetAnimationTimelineEventHandler]
* ScriptArguments: local self, completedPlaying = ...

h5. OnPlay_Animation
* [Inherits: OnSetAnimationEventHandler|#OnSetAnimationEventHandler]
* ScriptArguments: local self, animatingControl, completedPlaying = ...

h5. OnReceiveDrag
* [Inherits: OnSetControlEventHandler|#OnSetControlEventHandler]
* ScriptArguments: local self, button = ...

h5. OnRequestClose
* [Inherits: OnSetControlEventHandler|#OnSetControlEventHandler]
* ScriptArguments: local self = ...

h5. OnResizeStart
* [Inherits: OnSetControlEventHandler|#OnSetControlEventHandler]
* ScriptArguments: local self = ...

h5. OnResizeStop
* [Inherits: OnSetControlEventHandler|#OnSetControlEventHandler]
* ScriptArguments: local self = ...

h5. OnResizedToFit
* [Inherits: OnSetControlEventHandler|#OnSetControlEventHandler]
* ScriptArguments: local self, desiredWidth, desiredHeight = ...

h5. OnScrollExtentsChanged
* [Inherits: OnSetControlEventHandler|#OnSetControlEventHandler]
* ScriptArguments: local self, horizontal, vertical = ...

h5. OnScrollOffsetChanged
* [Inherits: OnSetControlEventHandler|#OnSetControlEventHandler]
* ScriptArguments: local self, horizontal, vertical = ...

h5. OnSetAnimationEaseFunction

h5. OnSetAnimationEventHandler

h5. OnSetAnimationTimelineEventHandler

h5. OnSetControlEventHandler

h5. OnSetUpdateFunction

h5. OnShow
* [Inherits: OnSetControlEventHandler|#OnSetControlEventHandler]
* ScriptArguments: local self, hidden = ...

h5. OnSliderReleased
* [Inherits: OnSetControlEventHandler|#OnSetControlEventHandler]
* ScriptArguments: local self, value = ...

h5. OnSpace
* [Inherits: OnSetControlEventHandler|#OnSetControlEventHandler]
* ScriptArguments: local self = ...

h5. OnStop
* [Inherits: OnSetAnimationTimelineEventHandler|#OnSetAnimationTimelineEventHandler]
* ScriptArguments: local self, completedPlaying = ...

h5. OnStop_Animation
* [Inherits: OnSetAnimationEventHandler|#OnSetAnimationEventHandler]
* ScriptArguments: local self, animatingControl, completedPlaying = ...

h5. OnTab
* [Inherits: OnSetControlEventHandler|#OnSetControlEventHandler]
* ScriptArguments: local self = ...

h5. OnTextChanged
* [Inherits: OnSetControlEventHandler|#OnSetControlEventHandler]
* ScriptArguments: local self = ...

h5. OnTextureLoaded
* [Inherits: OnSetControlEventHandler|#OnSetControlEventHandler]
* ScriptArguments: local self = ...

h5. OnUpArrow
* [Inherits: OnSetControlEventHandler|#OnSetControlEventHandler]
* ScriptArguments: local self = ...

h5. OnUpdate
* [Inherits: OnSetControlEventHandler|#OnSetControlEventHandler]
* ScriptArguments: local self, time = ...

h5. OnUserAreaCreated
* [Inherits: OnSetControlEventHandler|#OnSetControlEventHandler]
* ScriptArguments: local self, areaData, areaText, left, right, top, bottom, continuation = ...

h5. OnValueChanged
* [Inherits: OnSetControlEventHandler|#OnSetControlEventHandler]
* ScriptArguments: local self, value, eventReason = ...

h5. OnVisibleRadiusChanged
* [Inherits: OnSetControlEventHandler|#OnSetControlEventHandler]
* ScriptArguments: local self, radius = ...

h5. PressedOffset
* _attribute:_ *number* _x_
* _attribute:_ *number* _y_

h5. RadialCooldownGradient
* _attribute:_ *number* _startAlpha_
* _attribute:_ *number* _angularDistance_

h5. ResizeToFitPadding
* _attribute:_ *number* _width_
* _attribute:_ *number* _height_

h5. Rotate3DAnimation
* [Inherits: AnimationBase|#AnimationBase]
* [Child: endPitch|#Attributes]
* [Child: endRoll|#Attributes]
* [Child: endYaw|#Attributes]
* [Child: startPitch|#Attributes]
* [Child: startRoll|#Attributes]
* [Child: startYaw|#Attributes]

h5. ScaleAnimation
* [Inherits: AnimationBase|#AnimationBase]
* [Child: endScale|#Attributes]
* [Child: startScale|#Attributes]

h5. Scroll
* [Inherits: Control|#Control]
* [Child: FadeGradient|#FadeGradient]
* [Child: OnScrollExtentsChanged|#OnScrollExtentsChanged]
* [Child: OnScrollOffsetChanged|#OnScrollOffsetChanged]

h5. ScrollingOverlay
* _attribute:_ *string* _textureFile_
* _attribute:_ *number* _width_
* _attribute:_ *number* _height_
* _attribute:_ *integer* _duration_

h5. SizeAnimation
* [Inherits: AnimationBase|#AnimationBase]
* [Child: endHeight|#Attributes]
* [Child: endWidth|#Attributes]
* [Child: startHeight|#Attributes]
* [Child: startWidth|#Attributes]

h5. Slider
* [Inherits: Control|#Control]
* [Child: BackgroundBottom|#BackgroundBottom]
* [Child: BackgroundMiddle|#BackgroundMiddle]
* [Child: BackgroundTop|#BackgroundTop]
* [Child: Limits|#Limits]
* [Child: OnEnabledStateChanged|#OnEnabledStateChanged]
* [Child: OnSliderReleased|#OnSliderReleased]
* [Child: OnValueChanged|#OnValueChanged]
* [Child: ThumbTexture|#ThumbTexture]
* [Child: dragFromThumb|#Attributes]
* [Child: orientation|#Attributes]
* [Child: step|#Attributes]

h5. StatusBar
* [Inherits: Control|#Control]
* [Child: LeadingEdge|#LeadingEdge]
* [Child: LeadingEdgeTextureCoords|#LeadingEdgeTextureCoords]
* [Child: Limits|#Limits]
* [Child: OnMinMaxValueChanged|#OnMinMaxValueChanged]
* [Child: OnValueChanged|#OnValueChanged]
* [Child: ScrollingOverlay|#ScrollingOverlay]
* [Child: TextureCoords|#TextureCoords]
* [Child: barAlignment|#Attributes]
* [Child: color|#Attributes]
* [Child: enableFadeOut|#Attributes]
* [Child: fadeOutGainColor|#Attributes]
* [Child: fadeOutLossColor|#Attributes]
* [Child: fadeOutTextureFile|#Attributes]
* [Child: orientation|#Attributes]
* [Child: textureFile|#Attributes]

h5. String
* _attribute:_ *string* _name_
* _attribute:_ *string* _value_

h5. Surface
* _attribute:_ *number* _texCoordLeft_
* _attribute:_ *number* _texCoordRight_
* _attribute:_ *number* _texCoordTop_
* _attribute:_ *number* _texCoordBottom_
* _attribute:_ *number* _insetLeft_
* _attribute:_ *number* _insetRight_
* _attribute:_ *number* _insetTop_
* _attribute:_ *number* _insetBottom_
* _attribute:_ *string* _color_

h5. TextBuffer
* [Inherits: Control|#Control]
* [Child: LineFade|#LineFade]
* [Child: OnLinkClicked|#OnLinkClicked]
* [Child: OnLinkMouseUp|#OnLinkMouseUp]
* [Child: color|#Attributes]
* [Child: drawLastEntryIfOutOfRoom|#Attributes]
* [Child: font|#Attributes]
* [Child: horizontalAlignment|#Attributes]
* [Child: linkEnabled|#Attributes]
* [Child: maxHistoryLines|#Attributes]
* [Child: splitLongMessages|#Attributes]

h5. Texture
* [Inherits: Control|#Control]
* [Child: LocalDimensions3D|#LocalDimensions3D]
* [Child: OnTextureLoaded|#OnTextureLoaded]
* [Child: TextureCoords|#TextureCoords]
* [Child: addressMode|#Attributes]
* [Child: autoAdjustTextureCoords|#Attributes]
* [Child: blendMode|#Attributes]
* [Child: color|#Attributes]
* [Child: pixelRoundingEnabled|#Attributes]
* [Child: resizeToFitFile|#Attributes]
* [Child: textureCoordsRotation|#Attributes]
* [Child: textureFile|#Attributes]
* [Child: textureFileReleaseOption|#Attributes]

h5. TextureAnimation
* [Inherits: AnimationBase|#AnimationBase]
* [Child: cellsHigh|#Attributes]
* [Child: cellsWide|#Attributes]
* [Child: framerate|#Attributes]
* [Child: mirrorAlongX|#Attributes]
* [Child: mirrorAlongY|#Attributes]

h5. TextureComposite
* [Inherits: Control|#Control]
* [Child: Surface|#Surface]
* [Child: blendMode|#Attributes]
* [Child: pixelRoundingEnabled|#Attributes]
* [Child: textureFile|#Attributes]
* [Child: textureFileReleaseOption|#Attributes]

h5. TextureCoords
* _attribute:_ *number* _left_
* _attribute:_ *number* _right_
* _attribute:_ *number* _top_
* _attribute:_ *number* _bottom_

h5. TextureRotateAnimation
* [Inherits: AnimationBase|#AnimationBase]
* [Child: endRotation|#Attributes]
* [Child: startRotation|#Attributes]

h5. Textures
* [Child: disabled|#Attributes]
* [Child: disabledPressed|#Attributes]
* [Child: mouseOver|#Attributes]
* [Child: normal|#Attributes]
* [Child: pressed|#Attributes]
* [Child: pressedMouseOver|#Attributes]

h5. ThumbTexture
* _attribute:_ *string* _textureFile_
* _attribute:_ *string* _disabledTextureFile_
* _attribute:_ *string* _highlightedTextureFile_
* _attribute:_ *number* _thumbWidth_
* _attribute:_ *number* _thumbHeight_
* _attribute:_ *number* _left_
* _attribute:_ *number* _top_
* _attribute:_ *number* _bottom_
* _attribute:_ *number* _right_
* _attribute:_ *bool* _flushWithSliderExtents_

h5. Tooltip
* [Inherits: Control|#Control]
* [Child: OnAddGameData|#OnAddGameData]
* [Child: OnCleared|#OnCleared]
* [Child: font|#Attributes]
* [Child: headerRowSpacing|#Attributes]
* [Child: headerVerticalOffset|#Attributes]

h5. TopLevelControl
* [Inherits: Control|#Control]
* [Child: allowBringToTop|#Attributes]
* [Child: topmost|#Attributes]

h5. Translate3DAnimation
* [Inherits: AnimationBase|#AnimationBase]
* [Child: deltaX|#Attributes]
* [Child: deltaXFromEnd|#Attributes]
* [Child: deltaY|#Attributes]
* [Child: deltaYFromEnd|#Attributes]
* [Child: deltaZ|#Attributes]
* [Child: deltaZFromEnd|#Attributes]
* [Child: endX|#Attributes]
* [Child: endY|#Attributes]
* [Child: endZ|#Attributes]
* [Child: startX|#Attributes]
* [Child: startY|#Attributes]
* [Child: startZ|#Attributes]

h5. TranslateAnimation
* [Inherits: AnimationBase|#AnimationBase]
* [Child: anchorIndex|#Attributes]
* [Child: deltaX|#Attributes]
* [Child: deltaXFromEnd|#Attributes]
* [Child: deltaY|#Attributes]
* [Child: deltaYFromEnd|#Attributes]
* [Child: endX|#Attributes]
* [Child: endY|#Attributes]
* [Child: startX|#Attributes]
* [Child: startY|#Attributes]

h5. UpdateFunction
* [Inherits: OnSetUpdateFunction|#OnSetUpdateFunction]
* ScriptArguments: local self, progress = ...

h5. sentinel_element

